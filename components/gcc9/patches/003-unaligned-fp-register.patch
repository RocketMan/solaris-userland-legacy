GNU compiler might generate an invalid assembly code on SPARC platform
if '-mcpu=niagara4' is passed. To be more particular, an invalid
floating point register might be used as an operand to std instruction
(e.g., 'std %f9, [%fp+1999]'). If this happens, the assembler complains
about illegal operands...

For example, Qt5 on SPARC with GCC 9.2.0:
{standard input}: Assembler messages:
{standard input}:280: Error: Illegal operands
{standard input}:563: Error: Illegal operands
{standard input}:708: Error: Illegal operands
{standard input}:866: Error: Illegal operands
{standard input}:963: Error: Illegal operands
{standard input}:1069: Error: Illegal operands
{standard input}:1288: Error: Illegal operands
{standard input}:1371: Error: Illegal operands

$ sed -n -e 280p qurlrecode.S
        std     %f9, [%fp+2015]

Upstream bug:
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91269

Eric Botcazou wrote a patch and sent it to upstream.
The patch was cherry picked from gcc-9-branch.

--- gcc-9-branch/gcc/config/sparc/sparc.h	2019/09/20 09:42:40	275994
+++ gcc-9-branch/gcc/config/sparc/sparc.h	2019/09/20 09:45:26	275995
@@ -736,6 +736,13 @@
    register window instruction in the prologue.  */
 #define HARD_REGNO_RENAME_OK(FROM, TO) ((FROM) != 1)
 
+/* Select a register mode required for caller save of hard regno REGNO.
+   Contrary to what is documented, the default is not the smallest suitable
+   mode but the largest suitable mode for the given (REGNO, NREGS) pair and
+   it quickly creates paradoxical subregs that can be problematic.  */
+#define HARD_REGNO_CALLER_SAVE_MODE(REGNO, NREGS, MODE) \
+  ((MODE) == VOIDmode ? choose_hard_reg_mode (REGNO, NREGS, false) : (MODE))
+
 /* Specify the registers used for certain standard purposes.
    The values of these macros are register numbers.  */
 
--- /dev/null
+++ gcc-9.2.0/gcc/testsuite/gcc.dg/pr91269.c	2019-09-26 08:39:25.000000000 +0000
@@ -0,0 +1,70 @@
+/* PR target/91269 */
+/* Testcase by Sergei Trofimovich <slyfox@inbox.ru> */
+
+/* { dg-do assemble } */
+/* { dg-options "-O2 -Wno-int-conversion" }  */
+/* { dg-additional-options "-fcall-used-g6 -fPIE -mcpu=niagara4" { target sparc*-*-* } } */
+
+struct m;
+
+enum { a = 2 };
+int b[1];
+int d[2715];
+int e, f, h;
+enum { i = 2 } j;
+inline int c(int k) {
+  char *cp;
+  if (k >= 62 && k <= 247)
+    cp = b[k];
+  if (cp)
+    return 65533;
+  return 2;
+}
+inline int g(int k) {
+  if (k < sizeof(d))
+    return e;
+  return 0;
+}
+
+int u(struct m*, char*, char*);
+
+int l(struct m *k, char n, long o, int *p) {
+  int q, flags = j, r, s, lasttwo = *p;
+  char inptr, outptr;
+  while (inptr) {
+    if (__builtin_expect(h, 0))
+      break;
+    unsigned ch = inptr;
+    if (lasttwo) {
+      long need = lasttwo >> 3;
+      if (__builtin_expect(need > n, 0))
+        break;
+    } else if (s == i) {
+      long t = c(ch);
+      if (t != 65533) {
+        int jch = g(ch);
+        if (jch & 8)
+          continue;
+      }
+    }
+    if (ch <= 5)
+      ;
+    else {
+      long t = c(ch);
+      if (t != 65533)
+        ;
+      else {
+        switch (f >> 8)
+        case 79:
+          q = f == 20308 || f == 20350;
+        if (q)
+          if (j)
+            r = u(k, &inptr, &outptr);
+        s = *p;
+        if (r)
+          if (o && flags & a)
+            break;
+      }
+    }
+  }
+}
