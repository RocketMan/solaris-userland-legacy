Starting with llvm 16 on 11.3, the following error appears during
build install:

````
CMake Error at tools/clang/tools/clang-shlib/cmake_install.cmake:50 (file):
  file RPATH_CHANGE could not write new RPATH:

    $ORIGIN/../lib/amd64

  to the file:

    /build/userland/components/llvm/build/prototype/i386/usr/lib/amd64/libclang-cpp.so.17

  No valid ELF RPATH or RUNPATH entry exists in the file;
Call Stack (most recent call first):
  tools/clang/tools/cmake_install.cmake:122 (include)
  tools/clang/cmake_install.cmake:72 (include)
  tools/cmake_install.cmake:72 (include)
  cmake_install.cmake:117 (include)
````

$ readelf -a build/prototype/i386/usr/lib/amd64/libclang-cpp.so.17|grep PATH
 0x000000000000001d (RUNPATH)            Library runpath: [/usr/gcc/10/lib/amd64:/build/userland/components/llvm/build/amd64/lib/amd64:]
 0x000000000000000f (RPATH)              Library rpath: [/usr/gcc/10/lib/amd64:/build/userland/components/llvm/build/amd64/lib/amd64:]

$ patchelf --print-rpath build/prototype/i386/usr/lib/amd64/libclang-cpp.so.17
Assertion failed: shstrtabIndex < shdrs.size(), file patchelf.cc, line 292

$ /usr/bin/elfedit -e "dyn:runpath /usr/gcc/10/lib/amd64:\$ORIGIN/../lib/amd64" build/prototype/i386/usr/lib/amd64/libclang-cpp.so.17
Segmentation Fault


In other cases (such as rust), larger .so files resulted in the
inclusion of Solais .SUNW_ldynsym sections, which had presented
similar problems; however, adding the -znoldynsym switch to suppress
those sections did not clear the issue here.

As a workaround, this patch adds NO_INSTALL_PATH to prevent patching
the RPATH/RUNPATH.  CAUTION: This means the build directory will be
left in the RPATH!


--- llvm-16.0.6/tools/clang/tools/clang-shlib/CMakeLists.txt.~1~	2023-06-10 23:58:16.000000000 +0000
+++ llvm-16.0.6/tools/clang/tools/clang-shlib/CMakeLists.txt	2024-02-09 18:34:47.809275408 +0000
@@ -42,7 +42,7 @@
 endif()
 
 add_clang_library(clang-cpp
-                  SHARED
+                  SHARED NO_INSTALL_RPATH
                   ${INSTALL_WITH_TOOLCHAIN}
                   clang-shlib.cpp
                   ${_OBJECTS}
@@ -51,5 +51,6 @@
 # Optimize function calls for default visibility definitions to avoid PLT and
 # reduce dynamic relocations.
 if (NOT APPLE AND NOT MINGW)
-  target_link_options(clang-cpp PRIVATE LINKER:-Bsymbolic-functions)
+  target_link_options(clang-cpp PRIVATE LINKER:-Bsymbolic)
+  target_link_options(clang-cpp PRIVATE LINKER:-znoldynsym)
 endif()
--- llvm-13.0.1/tools/clang/tools/libclang/CMakeLists.txt-	2022-01-20 21:31:59.000000000 +0000
+++ llvm-13.0.1/tools/clang/tools/libclang/CMakeLists.txt	2023-04-02 18:02:41.637914391 +0000
@@ -167,11 +167,11 @@
     endif()
   endif()
   if (USE_VERSION_SCRIPT)
-    target_link_options(libclang PRIVATE "-Wl,--version-script,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map")
+    # target_link_options(libclang PRIVATE "-Wl,--version-script,${CMAKE_CURRENT_SOURCE_DIR}/libclang.map")
     # The Solaris 11.4 linker supports a subset of GNU ld version scripts,
     # but requires a special option to enable it.
     if (${CMAKE_SYSTEM_NAME} MATCHES "SunOS")
-      target_link_options(libclang PRIVATE "-Wl,-z,gnu-version-script-compat")
+      # target_link_options(libclang PRIVATE "-Wl,-z,gnu-version-script-compat")
     endif()
     # Ensure that libclang.so gets rebuilt when the linker script changes.
     set_property(SOURCE ARCMigrate.cpp APPEND PROPERTY
--- llvm-16.0.6/tools/llvm-shlib/CMakeLists.txt.~1~	2023-06-10 23:58:16.000000000 +0000
+++ llvm-16.0.6/tools/llvm-shlib/CMakeLists.txt	2024-02-09 18:32:45.564636321 +0000
@@ -30,7 +30,7 @@
   if (LLVM_LINK_LLVM_DYLIB)
     set(INSTALL_WITH_TOOLCHAIN INSTALL_WITH_TOOLCHAIN)
   endif()
-  add_llvm_library(LLVM SHARED DISABLE_LLVM_LINK_LLVM_DYLIB SONAME ${INSTALL_WITH_TOOLCHAIN} ${SOURCES})
+  add_llvm_library(LLVM SHARED DISABLE_LLVM_LINK_LLVM_DYLIB NO_INSTALL_RPATH SONAME ${INSTALL_WITH_TOOLCHAIN} ${SOURCES})
 
   list(REMOVE_DUPLICATES LIB_NAMES)
   if(("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux") OR (MINGW) OR (HAIKU)
@@ -56,7 +56,8 @@
       # reduce dynamic relocations.
       # Note: for -fno-pic default, the address of a function may be different from
       # inside and outside libLLVM.so.
-      target_link_options(LLVM PRIVATE LINKER:-Bsymbolic-functions)
+      target_link_options(LLVM PRIVATE LINKER:-Bsymbolic)
+      target_link_options(LLVM PRIVATE LINKER:-znoldynsym)
     endif()
   elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
     set(LIB_NAMES -Wl,-all_load ${LIB_NAMES})
