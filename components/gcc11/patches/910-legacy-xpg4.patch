Revert to gcc7 XPG4 semantics.

Solaris 11.3 exhibits the issues described here:

https://www.illumos.org/issues/12306


--- gcc-9.3.0/gcc/config/sol2.h	2020-03-12 11:07:21.000000000 +0000
+++ gcc-7.3.0/gcc/config/sol2.h	2019-05-26 12:46:43.412075169 +0000
@@ -173,37 +169,32 @@
 #undef SUPPORTS_INIT_PRIORITY
 #define SUPPORTS_INIT_PRIORITY HAVE_INITFINI_ARRAY_SUPPORT
 
-/* Solaris libc and libm implement multiple behaviours for various
-   interfaces that have changed over the years in different versions of the
-   C standard.  The behaviour is controlled by linking corresponding
-   values-*.o objects.  Each of these objects contain alternate definitions
-   of one or more variables that the libraries use to select which
-   conflicting behaviour they should exhibit.  There are two sets of these
-   objects, values-X*.o and values-xpg*.o.
-
-   The values-X[ac].o objects set the variable _lib_version.  The Studio C
-   compilers use values-Xc.o with either -Xc or (since Studio 12.6)
-   -pedantic to select strictly conformant ISO C behaviour, otherwise
-   values-Xa.o.  Since -pedantic is a diagnostic option only in GCC, we
-   need to specifiy the -std=c* options and -std=iso9899:199409.  We
-   traditionally include -ansi, which affects C and C++, and also -std=c++*
-   for consistency.
-
-   The values-xpg[46].o objects define either or both __xpg[46] variables,
-   selecting XPG4 mode (__xpg4) and conforming C99/SUSv3 behavior (__xpg6).
-
-   Since GCC 5, gcc defaults to -std=gnu11 or higher, so we link
-   values-xpg6.o to get C99 semantics.  Besides, most of the runtime
-   libraries always require C99 semantics.
-
-   Since only one instance of _lib_version and __xpg[46] takes effekt (the
-   first in ld.so.1's search path), we only link the values-*.o files into
-   executable programs.  */
+/* Solaris libc and libm implement multiple behaviours for various interfaces
+   that have changed over the years in different versions of the standards.
+   The behaviour is controlled by linking corresponding values-*.o objects.
+   Each of these objects contain alternate defintions of one or more variables
+   that libc uses to select which conflicting behaviour it should exhibit.
+   There are two sets of these objects, values-X*.o and values-xpg*.o.
+
+   The values-X*.o objects set the variable _lib_version to one of strict_ansi,
+   ansi_1, or c_issue_4.  Ignoring '-Xt' and '-Xs', unless '-Xc' is used with
+   the Solaris Studio C/C++ compilers, it appears that values-Xa.o is linked
+   into resulting executables regardless of which '-std=' setting is selected.
+
+   The values-xpg*.o objects define one or more __xpg* variables.  No
+   values-xpg*.o object is linked in unless the equivalent of '-std=c99|c11'
+   is used during the linking of C code.  In either of those cases,
+   values-xpg6.o is linked.
+
+   The below spec string is reasonably consistent with that behaviour. */
 #undef STARTFILE_ARCH_SPEC
 #define STARTFILE_ARCH_SPEC \
-  "%{!shared:%{!symbolic: \
-     %{ansi|std=c*|std=iso9899\\:199409:values-Xc.o%s; :values-Xa.o%s} \
-     %{std=c90|std=gnu90:values-xpg4.o%s; :values-xpg6.o%s}}}"
+    "%{ansi:values-Xc.o%s; :values-Xa.o%s} \
+     %{std=c99|std=c9x|std=gnu99|std=gnu9x:values-xpg6.o%s} \
+     %{std=c11|std=c1x|std=gnu11|std=gnu1x:values-xpg6.o%s} \
+     %{std=c++11|std=c++0x|std=gnu++11|std=gnu++0x:values-xpg6.o%s} \
+     %{std=c++14|std=c++1y|std=gnu++14|std=gnu++1y:values-xpg6.o%s} \
+     %{std=c++1z|std=gnu++1z:values-xpg6.o%s}"
 
 #if defined(HAVE_LD_PIE) && defined(HAVE_SOLARIS_CRTS)
 #define STARTFILE_CRTBEGIN_SPEC "%{static:crtbegin.o%s; \
