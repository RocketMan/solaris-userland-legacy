Fixes CVE-2021-44227.

CVE-2021-44227
In GNU Mailman before 2.1.38, a list member or moderator can get a CSRF token
and craft an admin request (using that token) to set a new admin password or
make other changes.

Patch from upstream:
https://bugs.launchpad.net/mailman/+bug/1952384

--- old/Mailman/CSRFcheck.py	2021-11-12 23:23:52 +0000
+++ new/Mailman/CSRFcheck.py	2021-11-25 03:13:26 +0000
@@ -55,7 +55,7 @@
     token = binascii.hexlify(marshal.dumps((issued, keymac)))
     return token
 
-def csrf_check(mlist, token, options_user=None):
+def csrf_check(mlist, token, cgi_user=None):
     """ check token by mailman cookie validation algorithm """
     try:
         issued, keymac = marshal.loads(binascii.unhexlify(token))
@@ -67,12 +67,25 @@
             key, user = key.split('+', 1)
         else:
             user = None
+        # Don't allow unprivileged tokens for admin or admindb.
+        if cgi_user == 'admin':
+            if key not in ('admin', 'site'):
+                syslog('mischief',
+                       'admin form submitted with CSRF token issued for %s.',
+                       key + '+' + user if user else key)
+                return False
+        elif cgi_user == 'admindb':
+            if key not in ('moderator', 'admin', 'site'):
+                syslog('mischief',
+                       'admindb form submitted with CSRF token issued for %s.',
+                       key + '+' + user if user else key)
+                return False
         if user:
             # This is for CVE-2021-42097.  The token is a user token because
             # of the fix for CVE-2021-42096 but it must match the user for
             # whom the options page is requested.
             raw_user = UnobscureEmail(urllib.unquote(user))
-            if options_user and options_user != raw_user:
+            if cgi_user and cgi_user != raw_user:
                 syslog('mischief',
                        'Form for user %s submitted with CSRF token '
                        'issued for %s.',

=== modified file 'Mailman/Cgi/admin.py'
--- old/Mailman/Cgi/admin.py	2019-10-05 21:32:22 +0000
+++ new/Mailman/Cgi/admin.py	2021-11-24 23:16:31 +0000
@@ -107,7 +107,8 @@
                    'legend']
     params = cgidata.keys()
     if set(params) - set(safe_params):
-        csrf_checked = csrf_check(mlist, cgidata.getfirst('csrf_token'))
+        csrf_checked = csrf_check(mlist, cgidata.getfirst('csrf_token'),
+                                  'admin')
     else:
         csrf_checked = True
     # if password is present, void cookie to force password authentication.

=== modified file 'Mailman/Cgi/admindb.py'
--- old/Mailman/Cgi/admindb.py	2021-11-12 23:23:52 +0000
+++ new/Mailman/Cgi/admindb.py	2021-11-24 23:17:41 +0000
@@ -144,7 +144,8 @@
     safe_params = ['adminpw', 'admlogin', 'msgid', 'sender', 'details']
     params = cgidata.keys()
     if set(params) - set(safe_params):
-        csrf_checked = csrf_check(mlist, cgidata.getfirst('csrf_token'))
+        csrf_checked = csrf_check(mlist, cgidata.getfirst('csrf_token'),
+                                  'admindb')
     else:
         csrf_checked = True
     # if password is present, void cookie to force password authentication.

=== modified file 'Mailman/Cgi/edithtml.py'
--- old/Mailman/Cgi/edithtml.py	2018-07-11 06:52:22 +0000
+++ new/Mailman/Cgi/edithtml.py	2021-11-24 23:26:20 +0000
@@ -111,7 +111,8 @@
     safe_params = ['VARHELP', 'adminpw', 'admlogin']
     params = cgidata.keys()
     if set(params) - set(safe_params):
-        csrf_checked = csrf_check(mlist, cgidata.getfirst('csrf_token'))
+        csrf_checked = csrf_check(mlist, cgidata.getfirst('csrf_token'),
+                                  'admin')
     else:
         csrf_checked = True
     # if password is present, void cookie to force password authentication.

