cherry-picked commits from upstream to fix the issue reported
where root user language changes aren't honored

From 177509e9460b149ecbf85e75c930be2ea00b7d05 Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@redhat.com>
Date: Thu, 23 Mar 2017 16:59:11 -0400
Subject: [PATCH] daemon: make sure explicitly requested users aren't lost on
 reloads

Right now, a user proxy can suddenly become defunct if the
/etc/passwd file is updated or some other reason leads to a reload.

This commit makes sure that the objects associated with proxies
stick around across reloads.

https://bugs.freedesktop.org/show_bug.cgi?id=100422
---
 src/daemon.c | 74 +++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 67 insertions(+), 7 deletions(-)

diff --git a/src/daemon.c b/src/daemon.c
index 05b810c..312394a 100644
--- a/src/daemon.c
+++ b/src/daemon.c
@@ -62,6 +62,7 @@ struct DaemonPrivate {
         GDBusConnection *bus_connection;
 
         GHashTable *users;
+        GList *explicitly_requested_users;
 
         User *autologin;
 
@@ -78,7 +79,7 @@ struct DaemonPrivate {
         GHashTable *extension_ifaces;
 };
 
-typedef struct passwd * (* EntryGeneratorFunc) (GHashTable *, gpointer *, struct spwd **shadow_entry);
+typedef struct passwd * (* EntryGeneratorFunc) (Daemon *, GHashTable *, gpointer *, struct spwd **shadow_entry);
 
 static void daemon_accounts_accounts_iface_init (AccountsAccountsIface *iface);
 
@@ -140,7 +141,8 @@ error_get_type (void)
 #endif
 
 static struct passwd *
-entry_generator_fgetpwent (GHashTable   *users,
+entry_generator_fgetpwent (Daemon       *daemon,
+                           GHashTable   *users,
                            gpointer     *state,
                            struct spwd **spent)
 {
@@ -233,7 +235,8 @@ entry_generator_fgetpwent (GHashTable   *users,
 }
 
 static struct passwd *
-entry_generator_cachedir (GHashTable   *users,
+entry_generator_cachedir (Daemon       *daemon,
+                          GHashTable   *users,
                           gpointer     *state,
                           struct spwd **shadow_entry)
 {
@@ -305,9 +308,55 @@ entry_generator_cachedir (GHashTable   *users,
         return NULL;
 }
 
+static struct passwd *
+entry_generator_requested_users (Daemon       *daemon,
+                                 GHashTable   *users,
+                                 gpointer     *state,
+                                 struct spwd **shadow_entry)
+{
+        struct passwd *pwent;
+        GList *node;
+
+        /* First iteration */
+        if (*state == NULL) {
+                *state = daemon->priv->explicitly_requested_users;
+        }
+
+        /* Every iteration */
+
+        if (g_hash_table_size (users) < MAX_LOCAL_USERS) {
+                node = *state;
+                while (node != NULL) {
+                        const char *name;
+
+                        name = node->data;
+                        node = node->next;
+
+                        *state = node;
+
+                        if (!g_hash_table_lookup (users, name)) {
+                                pwent = getpwnam (name);
+                                if (pwent == NULL) {
+                                        g_debug ("user '%s' requested previously but not present on system", name);
+                                } else {
+                                        *shadow_entry = getspnam (pwent->pw_name);
+
+                                        return pwent;
+                                }
+                        }
+                }
+        }
+
+        /* Last iteration */
+
+        *state = NULL;
+        return NULL;
+}
+
 static void
 load_entries (Daemon             *daemon,
               GHashTable         *users,
+              gboolean            allow_system_users,
               EntryGeneratorFunc  entry_generator)
 {
         gpointer generator_state = NULL;
@@ -319,12 +368,12 @@ load_entries (Daemon             *daemon,
 
         for (;;) {
                 spent = NULL;
-                pwent = entry_generator (users, &generator_state, &spent);
+                pwent = entry_generator (daemon, users, &generator_state, &spent);
                 if (pwent == NULL)
                         break;
 
                 /* Skip system users... */
-                if (!user_classify_is_human (pwent->pw_uid, pwent->pw_name, pwent->pw_shell, spent? spent->sp_pwdp : NULL)) {
+                if (!allow_system_users && !user_classify_is_human (pwent->pw_uid, pwent->pw_name, pwent->pw_shell, spent? spent->sp_pwdp : NULL)) {
                         g_debug ("skipping user: %s", pwent->pw_name);
                         continue;
                 }
@@ -382,14 +431,17 @@ reload_users (Daemon *daemon)
          */
 
         /* Load the local users into our hash table */
-        load_entries (daemon, users, entry_generator_fgetpwent);
+        load_entries (daemon, users, FALSE, entry_generator_fgetpwent);
         local = g_hash_table_new (g_str_hash, g_str_equal);
         g_hash_table_iter_init (&iter, users);
         while (g_hash_table_iter_next (&iter, &name, NULL))
                 g_hash_table_add (local, name);
 
+        /* and add users to hash table that were explicitly requested  */
+        load_entries (daemon, users, TRUE, entry_generator_requested_users);
+
         /* Now add/update users from other sources, possibly non-local */
-        load_entries (daemon, users, entry_generator_cachedir);
+        load_entries (daemon, users, FALSE, entry_generator_cachedir);
 
         wtmp_helper_update_login_frequencies (users);
 
@@ -630,6 +682,8 @@ daemon_finalize (GObject *object)
         if (daemon->priv->bus_connection != NULL)
                 g_object_unref (daemon->priv->bus_connection);
 
+        g_list_free_full (daemon->priv->explicitly_requested_users, g_free);
+
         g_hash_table_destroy (daemon->priv->users);
 
         g_hash_table_unref (daemon->priv->extension_ifaces);
@@ -753,6 +807,9 @@ daemon_local_find_user_by_id (Daemon *daemon,
                 struct spwd *spent;
                 spent = getspnam (pwent->pw_name);
                 user = add_new_user_for_pwent (daemon, pwent, spent);
+
+                daemon->priv->explicitly_requested_users = g_list_append (daemon->priv->explicitly_requested_users,
+                                                                          g_strdup (pwent->pw_name));
         }
 
         return user;
@@ -777,6 +834,9 @@ daemon_local_find_user_by_name (Daemon      *daemon,
                 struct spwd *spent;
                 spent = getspnam (pwent->pw_name);
                 user = add_new_user_for_pwent (daemon, pwent, spent);
+
+                daemon->priv->explicitly_requested_users = g_list_append (daemon->priv->explicitly_requested_users,
+                                                                          g_strdup (pwent->pw_name));
         }
 
         return user;

From 60fb4c447fd9b350ca5bb4876ed35311d8cd1d99 Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@redhat.com>
Date: Mon, 27 Mar 2017 13:51:07 -0400
Subject: [PATCH] user: export password expiration numbers from shadow file

If the desktop wants to display a notification about pending password
expiration it needs some way to query that information from the user.

This commit reads those numbers from shadow and makes them available
to the caller.

https://bugs.freedesktop.org/show_bug.cgi?id=100421
---
 data/org.freedesktop.Accounts.User.xml | 10 +++++
 src/user.c                             | 62 ++++++++++++++++++++++++++
 2 files changed, 72 insertions(+)

diff --git a/data/org.freedesktop.Accounts.User.xml b/data/org.freedesktop.Accounts.User.xml
index a6a8b5e..4ab989a 100644
--- a/data/org.freedesktop.Accounts.User.xml
+++ b/data/org.freedesktop.Accounts.User.xml
@@ -568,6 +568,16 @@
     </doc:doc>
   </method>
 
+  <method name="GetPasswordExpirationPolicy">
+    <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
+    <arg name="expiration_time" direction="out" type="x"/>
+    <arg name="last_change_time" direction="out" type="x"/>
+    <arg name="min_days_between_changes" direction="out" type="x"/>
+    <arg name="max_days_between_changes" direction="out" type="x"/>
+    <arg name="days_to_warn" direction="out" type="x"/>
+    <arg name="days_after_expiration_until_lock" direction="out" type="x"/>
+  </method>
+
   <property name="Uid" type="t" access="read">
     <doc:doc>
       <doc:description>
diff --git a/src/user.c b/src/user.c
index b2ea4be..802d07a 100644
--- a/src/user.c
+++ b/src/user.c
@@ -97,6 +97,12 @@ struct User {
         gchar        *location;
         guint64       login_frequency;
         gint64        login_time;
+        gint64        expiration_time;
+        gint64        last_change_time;
+        gint64        min_days_between_changes;
+        gint64        max_days_between_changes;
+        gint64        days_to_warn;
+        gint64        days_after_expiration_until_lock;
         GVariant     *login_history;
         gchar        *icon_file;
         gchar        *default_icon_file;
@@ -274,6 +280,13 @@ user_update_from_pwent (User          *user,
                 if (spent->sp_lstchg == 0) {
                         mode = PASSWORD_MODE_SET_AT_LOGIN;
                 }
+
+                user->expiration_time = spent->sp_expire;
+                user->last_change_time  = spent->sp_lstchg;
+                user->min_days_between_changes = spent->sp_min;
+                user->max_days_between_changes = spent->sp_max;
+                user->days_to_warn  = spent->sp_warn;
+                user->days_after_expiration_until_lock = spent->sp_inact;
         }
 
         if (user->password_mode != mode) {
@@ -1144,6 +1157,54 @@ user_set_x_session (AccountsUser          *auser,
         return TRUE;
 }
 
+static void
+user_get_password_expiration_policy_authorized_cb (Daemon                *daemon,
+                                                   User                  *user,
+                                                   GDBusMethodInvocation *context,
+                                                   gpointer               data)
+
+{
+        accounts_user_complete_get_password_expiration_policy (ACCOUNTS_USER (user),
+                                                               context,
+                                                               user->expiration_time,
+                                                               user->last_change_time,
+                                                               user->min_days_between_changes,
+                                                               user->max_days_between_changes,
+                                                               user->days_to_warn,
+                                                               user->days_after_expiration_until_lock);
+}
+
+static gboolean
+user_get_password_expiration_policy (AccountsUser          *auser,
+                                     GDBusMethodInvocation *context)
+{
+        User *user = (User*)auser;
+        int uid;
+        const gchar *action_id;
+
+        if (!get_caller_uid (context, &uid)) {
+                throw_error (context, ERROR_FAILED, "identifying caller failed");
+                return FALSE;
+        }
+
+        if (user->uid == (uid_t) uid)
+                action_id = "org.freedesktop.accounts.change-own-user-data";
+        else
+                action_id = "org.freedesktop.accounts.user-administration";
+
+        daemon_local_check_auth (user->daemon,
+                                 user,
+                                 action_id,
+                                 TRUE,
+                                 user_get_password_expiration_policy_authorized_cb,
+                                 context,
+                                 NULL,
+                                 NULL);
+
+        return TRUE;
+}
+
+
 static void
 user_change_location_authorized_cb (Daemon                *daemon,
                                     User                  *user,
@@ -2317,6 +2378,7 @@ user_accounts_user_iface_init (AccountsUserIface *iface)
         iface->handle_set_shell = user_set_shell;
         iface->handle_set_user_name = user_set_user_name;
         iface->handle_set_xsession = user_set_x_session;
+        iface->handle_get_password_expiration_policy = user_get_password_expiration_policy;
         iface->get_uid = user_real_get_uid;
         iface->get_user_name = user_real_get_user_name;
         iface->get_real_name = user_real_get_real_name;

--- a/src/accounts-user-generated.h	2019-10-24 11:00:16.986423349 -0700
+++ b/src/accounts-user-generated.h	2019-10-24 11:02:06.248503931 -0700
@@ -29,6 +29,9 @@
   GTypeInterface parent_iface;
 
 
+  gboolean (*handle_get_password_expiration_policy) (
+    AccountsUser *object,
+    GDBusMethodInvocation *invocation);
 
   gboolean (*handle_set_account_type) (
     AccountsUser *object,
--- a/src/accounts-user-generated.c	2019-10-24 11:00:12.684557970 -0700
+++ b/src/accounts-user-generated.c	2019-10-24 11:01:44.879519052 -0700
@@ -1240,6 +1240,7 @@
 /**
  * AccountsUserIface:
  * @parent_iface: The parent interface.
+ * @handle_get_password_expiration_policy: Handler for the #AccountsUser::handle-get-password-expiration-policy signal.
  * @handle_set_account_type: Handler for the #AccountsUser::handle-set-account-type signal.
  * @handle_set_automatic_login: Handler for the #AccountsUser::handle-set-automatic-login signal.
  * @handle_set_email: Handler for the #AccountsUser::handle-set-email signal.
@@ -1633,6 +1634,29 @@
     2,
     G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_BOOLEAN);
 
+  /**
+   * AccountsUser::handle-get-password-expiration-policy:
+   * @object: A #AccountsUser.
+   * @invocation: A #GDBusMethodInvocation.
+   *
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-Accounts-User.GetPasswordExpirationPolicy">GetPasswordExpirationPolicy()</link> D-Bus method.
+   *
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call accounts_user_complete_get_password_expiration_policy() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   *
+   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
+   */
+  g_signal_new ("handle-get-password-expiration-policy",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (AccountsUserIface, handle_get_password_expiration_policy),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    1,
+    G_TYPE_DBUS_METHOD_INVOCATION);
+
+
   /* GObject signals for received D-Bus signals: */
   /**
    * AccountsUser::changed:
