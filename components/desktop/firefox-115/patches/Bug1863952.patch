Implement about:processes on Solaris

Replaces `firefox-02-environ.patch` and `firefox-90-environ-redux.patch`.

See https://bugzilla.mozilla.org/show_bug.cgi?id=1863952

diff --git a/toolkit/components/processtools/ProcInfo_bsd.cpp b/toolkit/components/processtools/ProcInfo_solaris.cpp
copy from toolkit/components/processtools/ProcInfo_bsd.cpp
copy to toolkit/components/processtools/ProcInfo_solaris.cpp
--- a/toolkit/components/processtools/ProcInfo_bsd.cpp
+++ b/toolkit/components/processtools/ProcInfo_solaris.cpp
@@ -10,17 +10,25 @@
 #include "mozilla/ScopeExit.h"
 #include "mozilla/ipc/GeckoChildProcessHost.h"
 #include "nsMemoryReporterManager.h"
 #include "nsWhitespaceTokenizer.h"
 
-#include <sys/types.h>
-#include <sys/sysctl.h>
 #include <cerrno>
 #include <cstdio>
 #include <cstring>
+#include <fcntl.h>
+#include <procfs.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <stdio.h>
 #include <unistd.h>
 
+// Maximal length on /proc filename
+//  "/proc/999999/lwp/999999/lwpsinfo"
+//  "/proc/999999/psinfo"
+#define FNMAX_PROCFS "/proc/999999/lwp/999999/lwpsinfo"
+
 namespace mozilla {
 
 int GetCycleTimeFrequencyMHz() { return 0; }
 
 nsresult GetCpuTimeSinceProcessStartInMs(uint64_t* aResult) {
@@ -47,63 +55,61 @@
   if (!gathered.reserve(aRequests.Length())) {
     result.SetReject(NS_ERROR_OUT_OF_MEMORY);
     return result;
   }
   for (const auto& request : aRequests) {
-    size_t size;
-    int mib[6];
-    mib[0] = CTL_KERN;
-    mib[1] = KERN_PROC;
-    mib[2] = KERN_PROC_PID | KERN_PROC_SHOW_THREADS;
-    mib[3] = request.pid;
-    mib[4] = sizeof(kinfo_proc);
-    mib[5] = 0;
-    if (sysctl(mib, 6, nullptr, &size, nullptr, 0) == -1) {
-      // Can't get info for this process. Skip it.
-      continue;
-    }
+    ProcInfo info;
 
-    mib[5] = size / sizeof(kinfo_proc);
-    auto procs = MakeUniqueFallible<kinfo_proc[]>(mib[5]);
-    if (!procs) {
-      result.SetReject(NS_ERROR_OUT_OF_MEMORY);
+    int fd;
+    char filename[sizeof(FNMAX_PROCFS) + 1];
+    psinfo_t psinfo;
+    snprintf(filename, sizeof(FNMAX_PROCFS), "/proc/%d/psinfo", request.pid);
+    if ((fd = open(filename, O_RDONLY)) == -1) {
+      result.SetReject(NS_ERROR_FAILURE);
       return result;
     }
-    if (sysctl(mib, 6, procs.get(), &size, nullptr, 0) == -1 &&
-        errno != ENOMEM) {
-      continue;
+    if (read(fd, &psinfo, sizeof(psinfo_t)) != sizeof(psinfo_t)) {
+      result.SetReject(NS_ERROR_FAILURE);
+      return result;
     }
+    close(fd);
+    info.cpuTime =
+        psinfo.pr_time.tv_sec * 1'000'000'000u + psinfo.pr_time.tv_nsec;
+    info.memory = psinfo.pr_rssize * 1024;
 
-    ProcInfo info;
+    // Extra info
     info.pid = request.pid;
     info.childId = request.childId;
     info.type = request.processType;
     info.origin = request.origin;
     info.windows = std::move(request.windowInfo);
     info.utilityActors = std::move(request.utilityInfo);
 
-    bool found = false;
-    for (size_t i = 0; i < size / sizeof(kinfo_proc); i++) {
-      const auto& p = procs[i];
-      if (p.p_tid == -1) {
-        // This is the process.
-        found = true;
-        info.cpuTime = uint64_t(p.p_rtime_sec) * 1'000'000'000u +
-                       uint64_t(p.p_rtime_usec) * 1'000u;
-        info.memory =
-            (p.p_vm_tsize + p.p_vm_dsize + p.p_vm_ssize) * getpagesize();
-      } else {
-        // This is one of its threads.
-        ThreadInfo threadInfo;
-        threadInfo.tid = p.p_tid;
-        threadInfo.cpuTime = uint64_t(p.p_rtime_sec) * 1'000'000'000u +
-                             uint64_t(p.p_rtime_usec) * 1'000u;
-        info.threads.AppendElement(threadInfo);
+    // Let's look at the threads
+    for (int lwp = 1, lwp_max = psinfo.pr_nlwp; lwp <= lwp_max; lwp++) {
+      lwpsinfo_t lwpsinfo;
+      snprintf(filename, sizeof(FNMAX_PROCFS), "/proc/%d/lwp/%d/lwpsinfo",
+               request.pid, lwp);
+      if ((fd = open(filename, O_RDONLY)) == -1) {
+        // Some LWPs might no longer exist. That just means that there are
+        // probably others with bigger LWP id. But we need to limit the search
+        // because of possible race condition.
+        if (lwp_max < 2 * psinfo.pr_nlwp) lwp_max++;
+        continue;
       }
+      if (read(fd, &lwpsinfo, sizeof(lwpsinfo_t)) != sizeof(lwpsinfo_t))
+        continue;
+      close(fd);
+      ThreadInfo threadInfo;
+      threadInfo.tid = lwpsinfo.pr_lwpid;
+      threadInfo.cpuTime =
+          lwpsinfo.pr_time.tv_sec * 1'000'000'000u + lwpsinfo.pr_time.tv_nsec;
+      threadInfo.name.AssignASCII(lwpsinfo.pr_name, strlen(lwpsinfo.pr_name));
+      info.threads.AppendElement(threadInfo);
     }
 
-    if (found && !gathered.put(request.pid, std::move(info))) {
+    if (!gathered.put(request.pid, std::move(info))) {
       result.SetReject(NS_ERROR_OUT_OF_MEMORY);
       return result;
     }
   }
 
diff --git a/toolkit/components/processtools/moz.build b/toolkit/components/processtools/moz.build
--- a/toolkit/components/processtools/moz.build
+++ b/toolkit/components/processtools/moz.build
@@ -39,10 +39,12 @@
 # Platform-specific implementations of `ProcInfo`.
 toolkit = CONFIG["MOZ_WIDGET_TOOLKIT"]
 if toolkit == "gtk" or toolkit == "android":
     if CONFIG["OS_TARGET"] == "OpenBSD":
         UNIFIED_SOURCES += ["ProcInfo_bsd.cpp"]
+    elif CONFIG["OS_TARGET"] == "SunOS":
+        UNIFIED_SOURCES += ["ProcInfo_solaris.cpp"]
     else:
         UNIFIED_SOURCES += ["ProcInfo_linux.cpp"]
 elif toolkit == "windows":
     UNIFIED_SOURCES += ["ProcInfo_win.cpp"]
 elif toolkit == "cocoa":

