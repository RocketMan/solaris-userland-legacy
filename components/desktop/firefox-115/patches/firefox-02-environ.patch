Subprocesses launched by firefox via modules/subprocess have an empty environment
due to incorrect assumptions about environ variable in the libc.

On Solaris, environ variable is not part of libc.so (weak binding only) and hence
loading it from libc yields only a null pointer. This workaround gets environ
variable directly from the firefox process.

Patch not suitable for upstream; the idea might be.

--- firefox-102.1.0/toolkit/modules/subprocess/subprocess_shared_unix.js
+++ firefox-102.1.0/toolkit/modules/subprocess/subprocess_shared_unix.js
@@ -39,6 +39,10 @@ return status & 0x7f;
   },
 };
 
+var libenv = new Library("libenv", ["a.out"], {
+  environ: [ctypes.char.ptr.ptr],
+})
+
 var libc = new Library("libc", LIBC_CHOICES, {
   environ: [ctypes.char.ptr.ptr],
 
--- firefox-115.0/toolkit/modules/subprocess/subprocess_unix.sys.mjs~	2023-06-29 16:59:10.000000000 +0000
+++ firefox-115.0/toolkit/modules/subprocess/subprocess_unix.sys.mjs	2023-07-01 14:53:39.675055926 +0000
@@ -108,7 +108,7 @@
     if (Services.appinfo.OS === "Darwin") {
       environ = libc._NSGetEnviron().contents;
     } else {
-      environ = libc.environ;
+      environ = libenv.environ;
     }
 
     const EQUAL = "=".charCodeAt(0);
