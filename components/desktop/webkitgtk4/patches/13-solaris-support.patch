Changes for the build to work on Solaris

Potentially suitable to send upstream

--- webkitgtk-2.28.2/Source/WTF/wtf/PlatformCPU.h	2020-05-04 15:11:26.079688193 +0000
+++ webkitgtk-2.28.2/Source/WTF/wtf/PlatformCPU.h	2020-05-04 15:10:37.429983685 +0000
@@ -89,6 +89,26 @@
 #define WTF_CPU_KNOWN 1
 #endif
 
+/* CPU(SPARC32) - SPARC 32-bit */
+#if defined(__sparc) && !defined(__arch64__) || defined(__sparcv8)
+#define WTF_CPU_SPARC32 1
+#define WTF_CPU_BIG_ENDIAN 1
+#define WTF_CPU_KNOWN 1
+#endif
+
+/* CPU(SPARC64) - SPARC 64-bit */
+#if defined(__sparc__) && defined(__arch64__) || defined (__sparcv9)
+#define WTF_CPU_SPARC64 1
+#define WTF_CPU_BIG_ENDIAN 1
+#define WTF_CPU_KNOWN 1
+#endif
+
+/* CPU(SPARC) - any SPARC, true for CPU(SPARC32) and CPU(SPARC64) */
+#if CPU(SPARC32) || CPU(SPARC64)
+#define WTF_CPU_SPARC 1
+#define WTF_CPU_KNOWN 1
+#endif
+
 /* CPU(X86) - i386 / x86 32-bit */
 #if   defined(__i386__) \
     || defined(i386)     \
@@ -281,7 +301,7 @@
 #define WTF_CPU_UNKNOWN 1
 #endif
 
-#if CPU(ARM) || CPU(MIPS) || CPU(UNKNOWN)
+#if CPU(ARM) || CPU(MIPS) || CPU(UNKNOWN) || CPU(SPARC)
 #define WTF_CPU_NEEDS_ALIGNED_ACCESS 1
 #endif
 
--- webkitgtk-2.28.2/Source/WTF/wtf/PlatformOS.h	2020-05-04 15:16:13.700197611 +0000
+++ webkitgtk-2.28.2/Source/WTF/wtf/PlatformOS.h	2020-05-04 15:13:50.446849339 +0000
@@ -114,6 +114,11 @@
 #define WTF_OS_OPENBSD 1
 #endif
 
+/* OS(SOLARIS) - Solaris */
+#if defined(sun) || defined(__sun)
+#define WTF_OS_SOLARIS 1
+#endif
+
 /* OS(WINDOWS) - Any version of Windows */
 #if defined(WIN32) || defined(_WIN32)
 #define WTF_OS_WINDOWS 1
@@ -129,6 +134,7 @@
     || OS(LINUX)            \
     || OS(NETBSD)           \
     || OS(OPENBSD)          \
+    || OS(SOLARIS)          \
     || defined(unix)        \
     || defined(__unix)      \
     || defined(__unix__)
--- webkitgtk-2.28.2/Source/WTF/wtf/PlatformHave.h	2020-05-04 15:16:32.512420774 +0000
+++ webkitgtk-2.28.2/Source/WTF/wtf/PlatformHave.h	2020-05-04 15:15:36.240964050 +0000
@@ -347,7 +347,7 @@
 #define HAVE_URL_FORMATTING 1
 #endif
 
-#if !OS(WINDOWS)
+#if !OS(WINDOWS) && !OS(SOLARIS)
 #define HAVE_STACK_BOUNDS_FOR_NEW_THREAD 1
 #endif
 
--- a/Source/WTF/wtf/NumberOfCores.cpp	2019-05-17 09:40:04.686265040 -0700
+++ b/Source/WTF/wtf/NumberOfCores.cpp	2019-05-17 09:40:42.200543875 -0700
@@ -34,7 +34,7 @@
 // data types defined in the former. See sysctl(3) and style(9).
 #include <sys/types.h>
 #include <sys/sysctl.h>
-#elif OS(LINUX) || OS(AIX) || OS(OPENBSD) || OS(NETBSD) || OS(FREEBSD)
+#elif OS(LINUX) || OS(AIX) || OS(SOLARIS) || OS(OPENBSD) || OS(NETBSD) || OS(FREEBSD)
 #include <unistd.h>
 #elif OS(WINDOWS)
 #include <windows.h>
@@ -69,7 +69,7 @@
     int sysctlResult = sysctl(name, sizeof(name) / sizeof(int), &result, &length, 0, 0);
 
     s_numberOfCores = sysctlResult < 0 ? defaultIfUnavailable : result;
-#elif OS(LINUX) || OS(AIX) || OS(OPENBSD) || OS(NETBSD) || OS(FREEBSD)
+#elif OS(LINUX) || OS(AIX) || OS(SOLARIS) || OS(OPENBSD) || OS(NETBSD) || OS(FREEBSD)
     long sysconfResult = sysconf(_SC_NPROCESSORS_ONLN);
 
     s_numberOfCores = sysconfResult < 0 ? defaultIfUnavailable : static_cast<int>(sysconfResult);
--- a/Source/WTF/wtf/StackBounds.cpp	2019-05-17 09:40:57.235341831 -0700
+++ b/Source/WTF/wtf/StackBounds.cpp	2019-05-17 09:41:49.997962267 -0700
@@ -33,6 +33,10 @@
 
 #include <windows.h>
 
+#elif OS(SOLARIS)
+
+#include <thread.h>
+
 #elif OS(UNIX)
 
 #include <pthread.h>
@@ -102,6 +106,17 @@
     return newThreadStackBounds(pthread_self());
 }
 
+#elif OS(SOLARIS)
+
+StackBounds StackBounds::currentThreadStackBoundsInternal()
+{
+    stack_t s;
+    thr_stksegment(&s);
+    void* origin = s.ss_sp;
+    void* bound = static_cast<char*>(origin) - s.ss_size;
+    return StackBounds { origin, bound };
+}
+
 #elif OS(UNIX)
 
 #if OS(OPENBSD)
--- webkitgtk-2.28.2/Source/WTF/wtf/CurrentTime.cpp	2020-05-04 15:33:00.151316952 +0000
+++ webkitgtk-2.28.2/Source/WTF/wtf/CurrentTime.cpp	2020-05-04 15:32:30.860465903 +0000
@@ -266,7 +266,7 @@ MonotonicTime MonotonicTime::now()
     return fromRawSeconds((mach_absolute_time() * timebaseInfo.numer) / (1.0e9 * timebaseInfo.denom));
 #elif OS(FUCHSIA)
     return fromRawSeconds(zx_clock_get_monotonic() / static_cast<double>(ZX_SEC(1)));
-#elif OS(LINUX) || OS(FREEBSD) || OS(OPENBSD) || OS(NETBSD)
+#elif OS(LINUX) || OS(FREEBSD) || OS(OPENBSD) || OS(SOLARIS) || OS(NETBSD)
     struct timespec ts { };
     clock_gettime(CLOCK_MONOTONIC, &ts);
     return fromRawSeconds(static_cast<double>(ts.tv_sec) + ts.tv_nsec / 1.0e9);
--- webkitgtk-2.28.2/Source/WebCore/inspector/InspectorFrontendHost.cpp	2020-05-04 15:34:43.528901116 +0000
+++ webkitgtk-2.28.2/Source/WebCore/inspector/InspectorFrontendHost.cpp	2020-05-04 15:34:14.749894025 +0000
@@ -333,6 +333,8 @@ String InspectorFrontendHost::platform()
     return "freebsd"_s;
 #elif OS(OPENBSD)
     return "openbsd"_s;
+#elif OS(SOLARIS)
+    return "solaris"_s;
 #else
     return "unknown"_s;
 #endif
--- webkitgtk-2.30.3/Source/WTF/wtf/PageBlock.h	2020-11-23 10:55:09.483546245 +0000
+++ webkitgtk-2.30.3/Source/WTF/wtf/PageBlock.h	2020-11-23 10:54:32.089522375 +0000
@@ -49,7 +49,7 @@ namespace WTF {
 // Use 64 KiB for any unknown CPUs to be conservative.
 #if OS(DARWIN) || PLATFORM(PLAYSTATION)
 constexpr size_t CeilingOnPageSize = 16 * KB;
-#elif USE(64KB_PAGE_BLOCK) || CPU(PPC) || CPU(PPC64) || CPU(PPC64LE) || CPU(UNKNOWN)
+#elif USE(64KB_PAGE_BLOCK) || CPU(PPC) || CPU(PPC64) || CPU(PPC64LE) || CPU(SPARC) || CPU(UNKNOWN)
 constexpr size_t CeilingOnPageSize = 64 * KB;
 #elif OS(WINDOWS) || CPU(MIPS) || CPU(MIPS64) || CPU(X86) || CPU(X86_64) || CPU(ARM) || CPU(ARM64)
 constexpr size_t CeilingOnPageSize = 4 * KB;
--- webkitgtk-2.30.3/Source/WTF/wtf/RAMSize.cpp	2020-11-25 10:54:48.421646735 +0000
+++ webkitgtk-2.30.3/Source/WTF/wtf/RAMSize.cpp	2020-11-25 10:53:53.995563075 +0000
@@ -34,6 +34,9 @@
 #if OS(LINUX)
 #include <sys/sysinfo.h>
 #endif // OS(LINUX)
+#if OS(SOLARIS)
+#include <unistd.h>
+#endif // OS(SOLARIS)
 #else
 #include <bmalloc/bmalloc.h>
 #endif
@@ -58,6 +61,13 @@ static size_t computeRAMSize()
     struct sysinfo si;
     sysinfo(&si);
     return si.totalram * si.mem_unit;
+#elif OS(SOLARIS)
+    size_t ramsize = 512 * MB;
+    long pagesize = sysconf(_SC_PAGESIZE);
+    long npages = sysconf(_SC_PHYS_PAGES);
+    if (pagesize != -1 && npages != -1)
+      ramsize = pagesize*npages;
+    return ramsize;
 #else
 #error "Missing a platform specific way of determining the available RAM"
 #endif // OS(LINUX) || OS(FREEBSD)
