gcc complains that these overloaded uses of pow and max are ambiguous.
Casts were used to for the selection of a specific version of the
overloaded function, but it is unclear whether they are correct or it is a
compiler bug.

file upstream bug to determine correct fix

--- a/Source/WebCore/rendering/shapes/BoxShape.cpp	2018-02-14 10:26:39.858520844 -0800
+++ b/Source/WebCore/rendering/shapes/BoxShape.cpp	2018-02-14 10:27:41.411967105 -0800
@@ -43,7 +43,7 @@
 
     LayoutUnit ratio = radius / margin;
     if (ratio < 1)
-        return radius + (margin * (1 + pow(ratio - 1, 3.0)));
+        return radius + (margin * (1 + pow(static_cast<double>(ratio) - 1, static_cast<int>(3.0))));
 
     return radius + margin;
 }
--- a/Source/WebCore/rendering/shapes/RasterShape.cpp	2018-02-14 10:26:44.417495148 -0800
+++ b/Source/WebCore/rendering/shapes/RasterShape.cpp	2018-02-14 10:29:12.954380092 -0800
@@ -142,7 +142,7 @@
         return *m_intervals;
 
     int shapeMarginInt = clampToPositiveInteger(ceil(shapeMargin()));
-    int maxShapeMarginInt = std::max(m_marginRectSize.width(), m_marginRectSize.height()) * sqrt(2);
+    int maxShapeMarginInt = std::max(m_marginRectSize.width(), m_marginRectSize.height()) * sqrt(static_cast<float>(2));
     if (!m_marginIntervals)
         m_marginIntervals = m_intervals->computeShapeMarginIntervals(std::min(shapeMarginInt, maxShapeMarginInt));
 
--- a/Source/JavaScriptCore/dfg/DFGOperations.cpp	2018-02-14 21:27:54.322665171 -0800
+++ a/Source/JavaScriptCore/dfg/DFGOperations.cpp	2018-02-14 21:29:06.968857287 -0800
@@ -2360,7 +2360,7 @@
 
 double JIT_OPERATION operationFModOnInts(int32_t a, int32_t b)
 {
-    return fmod(a, b);
+    return fmod(float(a), float(b));
 }
 
 #if USE(JSVALUE32_64)
+++ a/Source/JavaScriptCore/heap/MarkedSpace.cpp	2018-02-16 14:29:53.337181369 -0800
+++ b/Source/JavaScriptCore/heap/MarkedSpace.cpp	2018-02-16 14:29:53.337181369 -0800
@@ -76,7 +76,7 @@
                 dataLog("    Marked block payload size: ", static_cast<size_t>(MarkedSpace::blockPayload), "\n");
             
             for (unsigned i = 0; ; ++i) {
-                double approximateSize = MarkedSpace::preciseCutoff * pow(Options::sizeClassProgression(), i);
+                double approximateSize = MarkedSpace::preciseCutoff * pow(static_cast<double>(Options::sizeClassProgression()), static_cast<double>(i));
                 
                 if (Options::dumpSizeClasses())
                     dataLog("    Next size class as a double: ", approximateSize, "\n");
--- a/Source/WebKit/Platform/classifier/ResourceLoadStatisticsClassifier.cpp	2018-02-20 12:49:45.976890265 -0800
+++ b/Source/WebKit/Platform/classifier/ResourceLoadStatisticsClassifier.cpp	2018-02-20 12:51:03.695785092 -0800
@@ -58,7 +58,7 @@
 bool ResourceLoadStatisticsClassifier::classifyWithVectorThreshold(unsigned a, unsigned b, unsigned c)
 {
     LOG(ResourceLoadStatistics, "ResourceLoadStatisticsClassifier::classifyWithVectorThreshold(): Classified with threshold.");
-    return sqrt(a * a + b * b + c * c) > featureVectorLengthThreshold;
+    return sqrt(static_cast<float>(a * a + b * b + c * c)) > featureVectorLengthThreshold;
 }
     
 }
--- a/Source/JavaScriptCore/dfg/DFGStaticExecutionCountEstimationPhase.cpp
+++ b/Source/JavaScriptCore/dfg/DFGStaticExecutionCountEstimationPhase.cpp
@@ -53,7 +53,7 @@
             if (!block)
                 continue;
 
-            block->executionCount = pow(10, m_graph.m_cpsNaturalLoops->loopDepth(block));
+            block->executionCount = pow(static_cast<double>(10), static_cast<double>(m_graph.m_cpsNaturalLoops->loopDepth(block)));
         }
         
         // Estimate branch weights based on execution counts. This isn't quite correct. It'll
