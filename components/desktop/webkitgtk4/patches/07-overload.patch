gcc complains that these overloaded uses of pow and max are ambiguous.
Casts were used to for the selection of a specific version of the
overloaded function, but it is unclear whether they are correct or it is a
compiler bug.

file upstream bug to determine correct fix

--- a/Source/JavaScriptCore/dfg/DFGOperations.cpp	2020-01-28 11:44:32.082790621 -0800
+++ b/Source/JavaScriptCore/dfg/DFGOperations.cpp	2020-01-28 11:44:50.981534484 -0800
@@ -2677,7 +2677,7 @@
 
 double JIT_OPERATION operationFModOnInts(int32_t a, int32_t b)
 {
-    return fmod(a, b);
+    return fmod(float(a), float(b));
 }
 
 #if USE(JSVALUE32_64)
--- a/Source/WebCore/rendering/shapes/RasterShape.cpp	2020-01-28 11:45:15.079639404 -0800
+++ b/Source/WebCore/rendering/shapes/RasterShape.cpp	2020-01-28 11:45:45.572829747 -0800
@@ -142,7 +142,7 @@
         return *m_intervals;
 
     int shapeMarginInt = clampToPositiveInteger(ceil(shapeMargin()));
-    int maxShapeMarginInt = std::max(m_marginRectSize.width(), m_marginRectSize.height()) * sqrt(2);
+    int maxShapeMarginInt = std::max(m_marginRectSize.width(), m_marginRectSize.height()) * sqrt(static_cast<float>(2));
     if (!m_marginIntervals)
         m_marginIntervals = m_intervals->computeShapeMarginIntervals(std::min(shapeMarginInt, maxShapeMarginInt));
 
--- a/Source/WebCore/rendering/shapes/BoxShape.cpp	2020-01-28 11:46:09.490057546 -0800
+++ b/Source/WebCore/rendering/shapes/BoxShape.cpp	2020-01-28 11:46:25.148227681 -0800
@@ -43,7 +43,7 @@
 
     LayoutUnit ratio = radius / margin;
     if (ratio < 1)
-        return LayoutUnit(radius + (margin * (1 + pow(ratio - 1, 3.0))));
+        return LayoutUnit(radius + (margin * (1 + pow(static_cast<double>(ratio) - 1, 3.0))));
 
     return radius + margin;
 }
