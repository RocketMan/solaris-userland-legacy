Firefox 78ESR on SPARC dumps core early during start.

https://bugzilla.mozilla.org/show_bug.cgi?id=1691384

# HG changeset patch
# User Alexis Beingessner <a.beingessner@gmail.com>
# Date 1600104760 0
# Node ID b0fabcd604300d90544aa626daf1c60637148349
# Parent  e46501c82870a45105098c85bd933876a1cf56d2
Bug 1654807 - update thin-vec to 0.2.1 for potential endianess fix. r=froydnj

Differential Revision: https://phabricator.services.mozilla.com/D87019

diff --git a/third_party/rust/thin-vec/src/heap.rs b/third_party/rust/thin-vec/src/heap.rs
--- a/third_party/rust/thin-vec/src/heap.rs
+++ /dev/null
@@ -1,15 +0,0 @@
-extern crate libc;
-
-pub unsafe fn allocate(size: usize, align: usize) -> *mut u8 {
-    assert!(align <= 16);
-    libc::malloc(size) as *mut _
-}
-
-pub unsafe fn deallocate(ptr: *mut u8, _size: usize, _align: usize) {
-    libc::free(ptr as *mut _);
-}
-
-pub unsafe fn reallocate(ptr: *mut u8, _old_size: usize, size: usize, align: usize) -> *mut u8 {
-    assert!(align <= 16);
-    libc::realloc(ptr as *mut _, size) as *mut _
-}
diff --git a/third_party/rust/thin-vec/src/lib.rs b/third_party/rust/thin-vec/src/lib.rs
--- a/third_party/rust/thin-vec/src/lib.rs
+++ b/third_party/rust/thin-vec/src/lib.rs
@@ -1,98 +1,272 @@
-mod range;
+//! ThinVec is exactly the same as Vec, except that it stores its `len` and `capacity` in the buffer
+//! it allocates.
+//!
+//! This makes the memory footprint of ThinVecs lower; notably in cases where space is reserved for
+//! a non-existence ThinVec<T>. So `Vec<ThinVec<T>>` and `Option<ThinVec<T>>::None` will waste less
+//! space. Being pointer-sized also means it can be passed/stored in registers.
+//!
+//! Of course, any actually constructed ThinVec will theoretically have a bigger allocation, but
+//! the fuzzy nature of allocators means that might not actually be the case.
+//!
+//! Properties of Vec that are preserved:
+//! * `ThinVec::new()` doesn't allocate (it points to a statically allocated singleton)
+//! * reallocation can be done in place
+//! * `size_of::<ThinVec<T>>()` == `size_of::<Option<ThinVec<T>>>()`
+//!
+//! Properties of Vec that aren't preserved:
+//! * `ThinVec<T>` can't ever be zero-cost roundtripped to a `Box<[T]>`, `String`, or `*mut T`
+//! * `from_raw_parts` doesn't exist
+//! * ThinVec currently doesn't bother to not-allocate for Zero Sized Types (e.g. `ThinVec<()>`),
+//!   but it could be done if someone cared enough to implement it.
+//!
+//!
+//!
+//! # Gecko FFI
+//!
+//! If you enable the gecko-ffi feature, ThinVec will verbatim bridge with the nsTArray type in
+//! Gecko (Firefox). That is, ThinVec and nsTArray have identical layouts *but not ABIs*, 
+//! so nsTArrays/ThinVecs an be natively manipulated by C++ and Rust, and ownership can be 
+//! transferred across the FFI boundary (**IF YOU ARE CAREFUL, SEE BELOW!!**).
+//!
+//! While this feature is handy, it is also inherently dangerous to use because Rust and C++ do not
+//! know about eachother. Specifically, this can be an issue with non-POD types (types which
+//! have destructors, move constructors, or are `!Copy`).
+//!
+//! ## Do Not Pass By Value
+//!
+//! The biggest thing to keep in mind is that **FFI functions cannot pass ThinVec/nsTArray 
+//! by-value**. That is, these are busted APIs:
+//!
+//! ```rust,ignore
+//! // BAD WRONG
+//! extern fn process_data(data: ThinVec<u32>) { ... }
+//! // BAD WRONG
+//! extern fn get_data() -> ThinVec<u32> { ... }
+//! ```
+//!
+//! You must instead pass by-reference:
+//!
+//! ```rust
+//! # use thin_vec::*;
+//! # use std::mem;
+//!
+//! // Read-only access, ok!
+//! extern fn process_data(data: &ThinVec<u32>) {
+//!     for val in data {
+//!         println!("{}", val);
+//!     }
+//! }
+//! 
+//! // Replace with empty instance to take ownership, ok!
+//! extern fn consume_data(data: &mut ThinVec<u32>) {
+//!     let owned = mem::replace(data, ThinVec::new());
+//!     mem::drop(owned);
+//! }
+//! 
+//! // Mutate input, ok!
+//! extern fn add_data(dataset: &mut ThinVec<u32>) {
+//!     dataset.push(37);
+//!     dataset.push(12);
+//! }
+//! 
+//! // Return via out-param, usually ok!
+//! //
+//! // WARNING: output must be initialized! (Empty nsTArrays are free, so just do it!)
+//! extern fn get_data(output: &mut ThinVec<u32>) {
+//!     *output = thin_vec![1, 2, 3, 4, 5];
+//! }
+//! ```
+//!
+//! Ignorable Explanation For Those Who Really Want To Know Why:
+//!
+//! > The fundamental issue is that Rust and C++ can't currently communicate about destructors, and
+//! > the semantics of C++ require destructors of function arguments to be run when the function
+//! > returns. Whether the callee or caller is responsible for this is also platform-specific, so
+//! > trying to hack around it manually would be messy. 
+//! >
+//! > Also a type having a destructor changes its C++ ABI, because that type must actually exist 
+//! > in memory (unlike a trivial struct, which is often passed in registers). We don't currently
+//! > have a way to communicate to Rust that this is happening, so even if we worked out the
+//! > destructor issue with say, MaybeUninit, it would still be a non-starter without some RFCs
+//! > to add explicit rustc support.
+//! >
+//! > Realistically, the best answer here is to have a "heavier" bindgen that can secretly
+//! > generate FFI glue so we can pass things "by value" and have it generate by-reference code
+//! > behind our back (like the cxx crate does). This would muddy up debugging/searchfox though.
+//!
+//! ## Types Should Be Trivially Relocatable
+//!
+//! Types in Rust are always trivially relocatable (unless suitably borrowed/[pinned][]/hidden).
+//! This means all Rust types are legal to relocate with a bitwise copy, you cannot provide
+//! copy or move constructors to execute when this happens, and the old location won't have its
+//! destructor run. This will cause problems for types which have a significant location
+//! (types that intrusively point into themselves or have their location registered with a service).
+//!
+//! While relocations are generally predictable if you're very careful, **you should avoid using
+//! types with significant locations with Rust FFI**.
+//!
+//! Specifically, ThinVec will trivially relocate its contents whenever it needs to reallocate its
+//! buffer to change its capacity. This is the default reallocation strategy for nsTArray, and is
+//! suitable for the vast majority of types. Just be aware of this limitation!
+//!
+//! ## Auto Arrays Are Dangerous
+//!
+//! ThinVec has *some* support for handling auto arrays which store their buffer on the stack, 
+//! but this isn't well tested.
+//!
+//! Regardless of how much support we provide, Rust won't be aware of the buffer's limited lifetime,
+//! so standard auto array safety caveats apply about returning/storing them! ThinVec won't ever
+//! produce an auto array on its own, so this is only an issue for transferring an nsTArray into
+//! Rust.
+//!
+//! ## Other Issues
+//!
+//! Standard FFI caveats also apply: 
+//!
+//!  * Rust is more strict about POD types being initialized (use MaybeUninit if you must)
+//!  * `ThinVec<T>` has no idea if the C++ version of `T` has move/copy/assign/delete overloads
+//!  * `nsTArray<T>` has no idea if the Rust version of `T` has a Drop/Clone impl
+//!  * C++ can do all sorts of unsound things that Rust can't catch
+//!  * C++ and Rust don't agree on how zero-sized/empty types should be handled
+//!
+//! The gecko-ffi feature will not work if you aren't linking with code that has nsTArray
+//! defined. Specifically, we must share the symbol for nsTArray's empty singleton. You will get
+//! linking errors if that isn't defined.
+//!
+//! The gecko-ffi feature also limits ThinVec to the legacy behaviors of nsTArray. Most notably,
+//! nsTArray has a maximum capacity of i32::MAX (~2.1 billion items). Probably not an issue.
+//! Probably.
+//!
+//! [pinned]: https://doc.rust-lang.org/std/pin/index.html
 
 use std::{fmt, io, ptr, mem, slice};
 use std::collections::Bound;
 use std::iter::FromIterator;
 use std::slice::IterMut;
-use std::ops::{Deref, DerefMut};
+use std::ops::{Deref, DerefMut, RangeBounds};
 use std::marker::PhantomData;
+use std::alloc::*;
 use std::cmp::*;
 use std::hash::*;
 use std::borrow::*;
-use range::RangeArgument;
 use std::ptr::NonNull;
 
-// Heap shimming because reasons. This doesn't unfortunately match the heap api
-// right now because reasons.
-mod heap;
+use impl_details::*;
 
-#[cfg(not(feature = "gecko-ffi"))]
-type SizeType = usize;
-#[cfg(feature = "gecko-ffi")]
-type SizeType = u32;
-
-#[cfg(feature = "gecko-ffi")]
-const AUTO_MASK: u32 = 1 << 31;
-#[cfg(feature = "gecko-ffi")]
-const CAP_MASK: u32 = !AUTO_MASK;
+// modules: a simple way to cfg a whole bunch of impl details at once
 
 #[cfg(not(feature = "gecko-ffi"))]
-const MAX_CAP: usize = !0;
-#[cfg(feature = "gecko-ffi")]
-const MAX_CAP: usize = i32::max_value() as usize;
+mod impl_details {
+    pub type SizeType = usize;
+    pub const MAX_CAP: usize = !0;
 
-#[cfg(not(feature = "gecko-ffi"))]
-#[inline(always)]
-fn assert_size(x: usize) -> SizeType { x }
+    #[inline(always)]
+    pub fn assert_size(x: usize) -> SizeType { x }
+}
 
 #[cfg(feature = "gecko-ffi")]
-#[inline]
-fn assert_size(x: usize) -> SizeType {
-    if x > MAX_CAP as usize {
-        panic!("nsTArray size may not exceed the capacity of a 32-bit sized int");
+mod impl_details {
+    // Support for briding a gecko nsTArray verbatim into a ThinVec.
+    //
+    // ThinVec can't see copy/move/delete implementations
+    // from C++
+    //
+    // The actual layout of an nsTArray is:
+    //
+    // ```cpp
+    // struct {
+    //   uint32_t mLength;
+    //   uint32_t mCapacity: 31;
+    //   uint32_t mIsAutoArray: 1;
+    // }
+    // ```
+    //
+    // Rust doesn't natively support bit-fields, so we manually mask
+    // and shift the bit. When the "auto" bit is set, the header and buffer
+    // are actually on the stack, meaning the ThinVec pointer-to-header
+    // is essentially an "owned borrow", and therefore dangerous to handle.
+    // There are no safety guards for this situation.
+    //
+    // On little-endian platforms, the auto bit will be the high-bit of
+    // our capacity u32. On big-endian platforms, it will be the low bit.
+    // Hence we need some platform-specific CFGs for the necessary masking/shifting.
+    // 
+    // ThinVec won't ever construct an auto array. They only happen when
+    // bridging from C++. This means we don't need to ever set/preserve the bit.
+    // We just need to be able to read and handle it if it happens to be there.
+    //
+    // Handling the auto bit mostly just means not freeing/reallocating the buffer.
+
+    pub type SizeType = u32;
+
+    pub const MAX_CAP: usize = i32::max_value() as usize;
+
+    // Little endian: the auto bit is the high bit, and the capacity is
+    // verbatim. So we just need to mask off the high bit. Note that
+    // this masking is unnecessary when packing, because assert_size
+    // guards against the high bit being set.
+    #[cfg(target_endian = "little")]
+    pub fn pack_capacity(cap: SizeType) -> SizeType {
+        cap as SizeType
     }
-    x as SizeType
+    #[cfg(target_endian = "little")]
+    pub fn unpack_capacity(cap: SizeType) -> usize {
+        (cap as usize) & !(1 << 31)
+    }
+    #[cfg(target_endian = "little")]
+    pub fn is_auto(cap: SizeType) -> bool {
+        (cap & (1 << 31)) != 0
+    }
+
+    // Big endian: the auto bit is the low bit, and the capacity is
+    // shifted up one bit. Masking out the auto bit is unnecessary,
+    // as rust shifts always shift in 0's for unsigned integers.
+    #[cfg(target_endian = "big")]
+    pub fn pack_capacity(cap: SizeType) -> SizeType {
+        (cap as SizeType) << 1
+    }
+    #[cfg(target_endian = "big")]
+    pub fn unpack_capacity(cap: SizeType) -> usize {
+        (cap >> 1) as usize
+    }
+    #[cfg(target_endian = "big")]
+    pub fn is_auto(cap: SizeType) -> bool {
+        (cap & 1) != 0
+    }
+
+    #[inline]
+    pub fn assert_size(x: usize) -> SizeType {
+        if x > MAX_CAP as usize {
+            panic!("nsTArray size may not exceed the capacity of a 32-bit sized int");
+        }
+        x as SizeType
+    }
+
 }
 
-/// The header of a ThinVec
+/// The header of a ThinVec.
+///
+/// The _cap can be a bitfield, so use accessors to avoid trouble.
 #[repr(C)]
 struct Header {
     _len: SizeType,
     _cap: SizeType,
 }
 
 impl Header {
     fn len(&self) -> usize {
         self._len as usize
     }
 
-    #[cfg(feature = "gecko-ffi")]
-    fn cap(&self) -> usize {
-        (self._cap & CAP_MASK) as usize
-    }
-
-    #[cfg(not(feature = "gecko-ffi"))]
-    fn cap(&self) -> usize {
-        self._cap as usize
-    }
-
     fn set_len(&mut self, len: usize) {
         self._len = assert_size(len);
     }
 
-    #[cfg(feature = "gecko-ffi")]
-    fn set_cap(&mut self, cap: usize) {
-        debug_assert!(cap & (CAP_MASK as usize) == cap);
-        // FIXME: this is busted because it reads uninit memory
-        // debug_assert!(!self.uses_stack_allocated_buffer());
-        self._cap = assert_size(cap) & CAP_MASK;
-    }
-
-    #[cfg(feature = "gecko-ffi")]
-    fn uses_stack_allocated_buffer(&self) -> bool {
-        self._cap & AUTO_MASK != 0
-    }
-
-    #[cfg(not(feature = "gecko-ffi"))]
-    fn set_cap(&mut self, cap: usize) {
-        self._cap = assert_size(cap);
-    }
-
     fn data<T>(&self) -> *mut T {
         let header_size = mem::size_of::<Header>();
         let padding = padding::<T>();
 
         let ptr = self as *const Header as *mut Header as *mut u8;
 
         unsafe {
             if padding > 0 && self.len() == 0 {
@@ -100,35 +274,68 @@ impl Header {
                 NonNull::dangling().as_ptr()
             } else {
                 ptr.offset(header_size as isize) as *mut T
             }
         }
     }
 }
 
+
+#[cfg(feature = "gecko-ffi")]
+impl Header {
+    fn cap(&self) -> usize {
+        unpack_capacity(self._cap)
+    }
+
+    fn set_cap(&mut self, cap: usize) {
+        // debug check that our packing is working
+        debug_assert_eq!(unpack_capacity(pack_capacity(cap as SizeType)), cap);
+        // FIXME: this assert is busted because it reads uninit memory
+        // debug_assert!(!self.uses_stack_allocated_buffer());
+
+        // NOTE: this always stores a cleared auto bit, because set_cap
+        // is only invoked by Rust, and Rust doesn't create auto arrays.
+        self._cap = pack_capacity(assert_size(cap));
+    }
+
+    fn uses_stack_allocated_buffer(&self) -> bool {
+        is_auto(self._cap)
+    }
+}
+
+#[cfg(not(feature = "gecko-ffi"))]
+impl Header {
+    fn cap(&self) -> usize {
+        self._cap as usize
+    }
+
+    fn set_cap(&mut self, cap: usize) {
+        self._cap = assert_size(cap);
+    }
+}
+
+
 /// Singleton that all empty collections share.
 /// Note: can't store non-zero ZSTs, we allocate in that case. We could
 /// optimize everything to not do that (basically, make ptr == len and branch
 /// on size == 0 in every method), but it's a bunch of work for something that
 /// doesn't matter much.
 #[cfg(any(not(feature = "gecko-ffi"), test))]
 static EMPTY_HEADER: Header = Header { _len: 0, _cap: 0 };
 
 #[cfg(all(feature = "gecko-ffi", not(test)))]
 extern {
     #[link_name = "sEmptyTArrayHeader"]
     static EMPTY_HEADER: Header;
 }
 
 // TODO: overflow checks everywhere
 
-// Utils
-
-fn oom() -> ! { std::process::abort() }
+// Utils for computing layouts of allocations
 
 fn alloc_size<T>(cap: usize) -> usize {
     // Compute "real" header size with pointer math
     let header_size = mem::size_of::<Header>();
     let elem_size = mem::size_of::<T>();
     let padding = padding::<T>();
 
     // TODO: care about isize::MAX overflow?
@@ -151,58 +358,45 @@ fn padding<T>() -> usize {
         0
     }
 }
 
 fn alloc_align<T>() -> usize {
     max(mem::align_of::<T>(), mem::align_of::<Header>())
 }
 
+fn layout<T>(cap: usize) -> Layout {
+    unsafe {
+        Layout::from_size_align_unchecked(
+            alloc_size::<T>(cap),
+            alloc_align::<T>(),
+        )
+    }
+}
+
 fn header_with_capacity<T>(cap: usize) -> NonNull<Header> {
     debug_assert!(cap > 0);
     unsafe {
-        let header = heap::allocate(
-            alloc_size::<T>(cap),
-            alloc_align::<T>(),
-        ) as *mut Header;
+        let layout = layout::<T>(cap);
+        let header = alloc(layout) as *mut Header;
 
-        if header.is_null() { oom() }
+        if header.is_null() { handle_alloc_error(layout) }
 
         // "Infinite" capacity for zero-sized types:
         (*header).set_cap(if mem::size_of::<T>() == 0 { MAX_CAP } else { cap });
         (*header).set_len(0);
 
         NonNull::new_unchecked(header)
     }
 }
 
 
 
-/// ThinVec is exactly the same as Vec, except that it stores its `len` and `capacity` in the buffer
-/// it allocates.
-///
-/// This makes the memory footprint of ThinVecs lower; notably in cases where space is reserved for
-/// a non-existence ThinVec<T>. So `Vec<ThinVec<T>>` and `Option<ThinVec<T>>::None` will waste less
-/// space. Being pointer-sized also means it can be passed/stored in registers.
-///
-/// Of course, any actually constructed ThinVec will theoretically have a bigger allocation, but
-/// the fuzzy nature of allocators means that might not actually be the case.
-///
-/// Properties of Vec that are preserved:
-/// * `ThinVec::new()` doesn't allocate (it points to a statically allocated singleton)
-/// * reallocation can be done in place
-/// * `size_of::<ThinVec<T>>()` == `size_of::<Option<ThinVec<T>>>()`
-///   * NOTE: This is only possible when the `unstable` feature is used.
-///
-/// Properties of Vec that aren't preserved:
-/// * `ThinVec<T>` can't ever be zero-cost roundtripped to a `Box<[T]>`, `String`, or `*mut T`
-/// * `from_raw_parts` doesn't exist
-/// * ThinVec currently doesn't bother to not-allocate for Zero Sized Types (e.g. `ThinVec<()>`),
-///   but it could be done if someone cared enough to implement it.
-#[cfg_attr(feature = "gecko-ffi", repr(C))]
+/// See the crate's top level documentation for a description of this type.
+#[repr(C)]
 pub struct ThinVec<T> {
     ptr: NonNull<Header>,
     boo: PhantomData<T>,
 }
 
 
 /// Creates a `ThinVec` containing the arguments.
 ///
@@ -622,25 +816,25 @@ impl<T> ThinVec<T> {
         }
     }
 
     pub fn append(&mut self, other: &mut ThinVec<T>) {
         self.extend(other.drain(..))
     }
 
     pub fn drain<R>(&mut self, range: R) -> Drain<T>
-        where R: RangeArgument<usize>
+        where R: RangeBounds<usize>
     {
         let len = self.len();
-        let start = match range.start() {
+        let start = match range.start_bound() {
             Bound::Included(&n) => n,
             Bound::Excluded(&n) => n + 1,
             Bound::Unbounded => 0,
         };
-        let end = match range.end() {
+        let end = match range.end_bound() {
             Bound::Included(&n) => n + 1,
             Bound::Excluded(&n) => n,
             Bound::Unbounded => len,
         };
         assert!(start <= end);
         assert!(end <= len);
 
         unsafe {
@@ -661,37 +855,59 @@ impl<T> ThinVec<T> {
                 end: end,
                 tail: len - end,
             }
         }
     }
 
     unsafe fn deallocate(&mut self) {
         if self.has_allocation() {
-            heap::deallocate(self.ptr() as *mut u8,
-                alloc_size::<T>(self.capacity()),
-                alloc_align::<T>());
+            dealloc(
+                self.ptr() as *mut u8,
+                layout::<T>(self.capacity()),
+            )
         }
     }
 
     /// Resize the buffer and update its capacity, without changing the length.
     /// Unsafe because it can cause length to be greater than capacity.
     unsafe fn reallocate(&mut self, new_cap: usize) {
         debug_assert!(new_cap > 0);
         if self.has_allocation() {
             let old_cap = self.capacity();
-            let ptr = heap::reallocate(self.ptr() as *mut u8,
-                                       alloc_size::<T>(old_cap),
-                                       alloc_size::<T>(new_cap),
-                                       alloc_align::<T>()) as *mut Header;
-            if ptr.is_null() { oom() }
+            let ptr = realloc(
+                self.ptr() as *mut u8,
+                layout::<T>(old_cap),
+                alloc_size::<T>(new_cap),
+            ) as *mut Header;
+
+            if ptr.is_null() { handle_alloc_error(layout::<T>(new_cap)) }
             (*ptr).set_cap(new_cap);
             self.ptr = NonNull::new_unchecked(ptr);
         } else {
-            self.ptr = header_with_capacity::<T>(new_cap);
+            let mut new_header = header_with_capacity::<T>(new_cap);
+
+            // If we get here and have a non-zero len, then we must be handling
+            // a gecko auto array, and we have items in a stack buffer. We shouldn't
+            // free it, but we should memcopy the contents out of it and mark it as empty.
+            //
+            // T is assumed to be trivially relocatable, as this is ~required
+            // for Rust compatibility anyway. Furthermore, we assume C++ won't try
+            // to unconditionally destroy the contents of the stack allocated buffer
+            // (i.e. it's obfuscated behind a union).
+            //
+            // In effect, we are partially reimplementing the auto array move constructor
+            // by leaving behind a valid empty instance.
+            let len = self.len();
+            if cfg!(feature = "gecko-ffi") && len > 0 {
+                new_header.as_mut().data::<T>().copy_from_nonoverlapping(self.data_raw(), len);
+                self.set_len(0);
+            }
+            
+            self.ptr = new_header;
         }
     }
 
     #[cfg(feature = "gecko-ffi")]
     #[inline]
     fn has_allocation(&self) -> bool {
         unsafe {
             self.ptr.as_ptr() as *const Header != &EMPTY_HEADER &&
@@ -1082,20 +1298,17 @@ impl io::Write for ThinVec<u8> {
 mod tests {
     use super::{ThinVec, MAX_CAP};
 
     #[test]
     fn test_size_of() {
         use std::mem::size_of;
         assert_eq!(size_of::<ThinVec<u8>>(), size_of::<&u8>());
 
-        // We don't perform the null-pointer optimization on stable rust.
-        if cfg!(feature = "unstable") {
-            assert_eq!(size_of::<Option<ThinVec<u8>>>(), size_of::<&u8>());
-        }
+        assert_eq!(size_of::<Option<ThinVec<u8>>>(), size_of::<&u8>());
     }
 
     #[test]
     fn test_drop_empty() {
         ThinVec::<u8>::new();
     }
 
     #[test]
@@ -1720,17 +1933,16 @@ mod std_tests {
         assert_eq!(v, &[1.to_string(), 5.to_string()]);
 
         let mut v: ThinVec<_> = thin_vec![(); 5];
         for _ in v.drain(1..4).rev() {
         }
         assert_eq!(v, &[(), ()]);
     }
 
-/* TODO: support inclusive ranges
     #[test]
     fn test_drain_inclusive_range() {
         let mut v = thin_vec!['a', 'b', 'c', 'd', 'e'];
         for _ in v.drain(1..=3) {
         }
         assert_eq!(v, &['a', 'e']);
 
         let mut v: ThinVec<_> = (0..=5).map(|x| x.to_string()).collect();
@@ -1750,16 +1962,17 @@ mod std_tests {
 
         let mut v: ThinVec<_> = (0..=1).map(|x| x.to_string()).collect();
         for _ in v.drain(..=0) {
         }
         assert_eq!(v, &["1".to_string()]);
     }
 
     #[test]
+    #[cfg(not(feature = "gecko-ffi"))]
     fn test_drain_max_vec_size() {
         let mut v = ThinVec::<()>::with_capacity(usize::max_value());
         unsafe { v.set_len(usize::max_value()); }
         for _ in v.drain(usize::max_value() - 1..) {
         }
         assert_eq!(v.len(), usize::max_value() - 1);
 
         let mut v = ThinVec::<()>::with_capacity(usize::max_value());
@@ -1770,17 +1983,16 @@ mod std_tests {
     }
 
     #[test]
     #[should_panic]
     fn test_drain_inclusive_out_of_bounds() {
         let mut v = thin_vec![1, 2, 3, 4, 5];
         v.drain(5..=5);
     }
-*/
 
 /* TODO: implement splice?
     #[test]
     fn test_splice() {
         let mut v = thin_vec![1, 2, 3, 4, 5];
         let a = [10, 11, 12];
         v.splice(2..4, a.iter().cloned());
         assert_eq!(v, &[1, 2, 10, 11, 12, 5]);
@@ -2176,17 +2388,17 @@ mod std_tests {
         assert!(v.capacity() >= 32);
 
         v.push(16);
 
         v.reserve_exact(16);
         assert!(v.capacity() >= 33)
     }
 
-/* TODO: implement try_reserve 
+/* TODO: implement try_reserve
     #[test]
     fn test_try_reserve() {
 
         // These are the interesting cases:
         // * exactly isize::MAX should never trigger a CapacityOverflow (can be OOM)
         // * > isize::MAX should always fail
         //    * On 16/32-bit should CapacityOverflow
         //    * On 64-bit should OOM
diff --git a/third_party/rust/thin-vec/src/range.rs b/third_party/rust/thin-vec/src/range.rs
deleted file mode 100644
--- a/third_party/rust/thin-vec/src/range.rs
+++ /dev/null
@@ -1,102 +0,0 @@
-use std::ops::{RangeFull, Range, RangeTo, RangeFrom};
-use std::collections::Bound::{self, Excluded, Included, Unbounded};
-
-/// `RangeArgument` is implemented by Rust's built-in range types, produced
-/// by range syntax like `..`, `a..`, `..b` or `c..d`.
-pub trait RangeArgument<T: ?Sized> {
-    /// Start index bound.
-    ///
-    /// Returns the start value as a `Bound`.
-    fn start(&self) -> Bound<&T>;
-
-    /// End index bound.
-    ///
-    /// Returns the end value as a `Bound`.
-    fn end(&self) -> Bound<&T>;
-}
-
-// FIXME add inclusive ranges to RangeArgument
-
-impl<T: ?Sized> RangeArgument<T> for RangeFull {
-    fn start(&self) -> Bound<&T> {
-        Unbounded
-    }
-    fn end(&self) -> Bound<&T> {
-        Unbounded
-    }
-}
-
-impl<T> RangeArgument<T> for RangeFrom<T> {
-    fn start(&self) -> Bound<&T> {
-        Included(&self.start)
-    }
-    fn end(&self) -> Bound<&T> {
-        Unbounded
-    }
-}
-
-impl<T> RangeArgument<T> for RangeTo<T> {
-    fn start(&self) -> Bound<&T> {
-        Unbounded
-    }
-    fn end(&self) -> Bound<&T> {
-        Excluded(&self.end)
-    }
-}
-
-impl<T> RangeArgument<T> for Range<T> {
-    fn start(&self) -> Bound<&T> {
-        Included(&self.start)
-    }
-    fn end(&self) -> Bound<&T> {
-        Excluded(&self.end)
-    }
-}
-
-/* ~one day~
-impl<T> RangeArgument<T> for RangeToInclusive<T> {
-    fn start(&self) -> Bound<&T> {
-        Unbounded
-    }
-    fn end(&self) -> Bound<&T> {
-        Included(&self.end)
-    }
-}
-
-impl<T> RangeArgument<T> for RangeInclusive<T> {
-    fn start(&self) -> Bound<&T> {
-        Included(&self.start)
-    }
-    fn end(&self) -> Bound<&T> {
-        Included(&self.end)
-    }
-}
-*/
-
-impl<T> RangeArgument<T> for (Bound<T>, Bound<T>) {
-    fn start(&self) -> Bound<&T> {
-        match *self {
-            (Included(ref start), _) => Included(start),
-            (Excluded(ref start), _) => Excluded(start),
-            (Unbounded, _)           => Unbounded,
-        }
-    }
-
-    fn end(&self) -> Bound<&T> {
-        match *self {
-            (_, Included(ref end)) => Included(end),
-            (_, Excluded(ref end)) => Excluded(end),
-            (_, Unbounded)         => Unbounded,
-        }
-    }
-}
-
-impl<'a, T: ?Sized + 'a> RangeArgument<T> for (Bound<&'a T>, Bound<&'a T>) {
-    fn start(&self) -> Bound<&T> {
-        self.0
-    }
-
-    fn end(&self) -> Bound<&T> {
-        self.1
-    }
-}
diff --git a/third_party/rust/thin-vec/.cargo-checksum.json b/third_party/rust/thin-vec/.cargo-checksum.json
--- a/third_party/rust/thin-vec/.cargo-checksum.json
+++ b/third_party/rust/thin-vec/.cargo-checksum.json
@@ -1 +1 @@
-{"files":{"Cargo.toml":"fb96cad605ae48215811808c1cc1b9a50248f2b14542058094b23983e2f8d8a0","README.md":"c26d7101e3031e7dd8890ce938e50cad7a1e6adf7fc2f2b0d3c36b03afe68c0b","src/heap.rs":"fe84a4ff433568d5713685456d87597ac5dcdb9d5190061a3da8074240ba1bc3","src/lib.rs":"ce36db8e3464dddade7c1ddbe3ee1f5e525af5be492ea51a0d8a0776c1adfc28","src/range.rs":"bac59bcb6230367a39c7e28ac15263e4526f966cd8c72015873017f17c115aaa"},"package":"73fdf4b84c65a85168477b7fb6c498e0716bc9487fba24623389ea7f51708044"}
\ No newline at end of file
+{"files":{"Cargo.toml":"fb96cad605ae48215811808c1cc1b9a50248f2b14542058094b23983e2f8d8a0","README.md":"c26d7101e3031e7dd8890ce938e50cad7a1e6adf7fc2f2b0d3c36b03afe68c0b","src/lib.rs":"627c6094c3f0286dba25bc73f5672c06c5061c25b01c513d213cbdda100673a2"},"package":"73fdf4b84c65a85168477b7fb6c498e0716bc9487fba24623389ea7f51708044"}
