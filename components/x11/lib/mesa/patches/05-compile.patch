Changes to get a clean build on Solaris.  

--- a/src/util/disk_cache.c	2019-02-04 21:34:02.715853526 -0800
+++ b/src/util/disk_cache.c	2019-02-04 21:34:38.078921802 -0800
@@ -896,7 +896,15 @@
     * open with the flock held. So just let that file be responsible
     * for writing the file.
     */
-   err = flock(fd, LOCK_EX | LOCK_NB);
+
+   struct flock lock_data;
+   lock_data.l_start = 0;
+   lock_data.l_len = 0;
+   lock_data.l_whence = SEEK_SET;
+   lock_data.l_type = F_WRLCK;
+
+   err = fcntl(fd, F_SETLKW, &lock_data);
+
    if (err == -1)
       goto done;
 
--- a/src/mesa/drivers/dri/i965/brw_performance_query.c	2019-02-04 21:35:22.667990622 -0800
+++ b/src/mesa/drivers/dri/i965/brw_performance_query.c	2019-02-04 21:37:21.025772989 -0800
@@ -88,6 +88,13 @@
 #define I915_PERF_OA_SAMPLE_SIZE (8 +   /* drm_i915_perf_record_header */ \
                                   256)  /* OA counter report */
 
+#if __sun
+/* map struct stat.st_mode to directoryEntryType values */
+#define ST_MODE_TO_DT_TYPE(mode)   (((mode) & S_IFMT) >> 12)
+#define DT_DIR                     ST_MODE_TO_DT_TYPE(S_IFDIR)
+#define DT_LNK                     ST_MODE_TO_DT_TYPE(S_IFLNK)
+#endif
+
 /**
  * Periodic OA samples are read() into these buffer structures via the
  * i915 perf kernel interface and appended to the
@@ -1813,9 +1820,19 @@
    while ((metric_entry = readdir(metricsdir))) {
       struct hash_entry *entry;
 
+#if __sun
+      struct stat st;
+
+      lstat(metric_entry->d_name, &st);
+
+      if ((!S_ISDIR(st.st_mode) && !S_ISLNK(st.st_mode)) ||
+          metric_entry->d_name[0] == '.')
+#else
+
       if ((metric_entry->d_type != DT_DIR &&
            metric_entry->d_type != DT_LNK) ||
           metric_entry->d_name[0] == '.')
+#endif
          continue;
 
       DBG("metric set: %s\n", metric_entry->d_name);
@@ -2087,9 +2104,16 @@
    }
 
    while ((drm_entry = readdir(drmdir))) {
+#if __sun
+      struct stat st;
+      lstat(drm_entry->d_name, &st);
+      if ((!S_ISDIR(st.st_mode) || !S_ISLNK(st.st_mode)) &&
+       strncmp(drm_entry->d_name, "card", 4) == 0)
+#else
       if ((drm_entry->d_type == DT_DIR ||
            drm_entry->d_type == DT_LNK) &&
           strncmp(drm_entry->d_name, "card", 4) == 0)
+#endif
       {
          len = snprintf(brw->perfquery.sysfs_dev_dir,
                         sizeof(brw->perfquery.sysfs_dev_dir),
--- a/src/util/u_atomic.h	2019-02-04 21:43:37.131435225 -0800
+++ b/src/util/u_atomic.h	2019-02-04 21:44:14.675788086 -0800
@@ -180,7 +180,7 @@
    sizeof(*v) == sizeof(uint16_t) ? atomic_inc_16((uint16_t *)(v)) : \
    sizeof(*v) == sizeof(uint32_t) ? atomic_inc_32((uint32_t *)(v)) : \
    sizeof(*v) == sizeof(uint64_t) ? atomic_inc_64((uint64_t *)(v)) : \
-                                    (assert(!"should not get here"), 0))
+                                    (assert(!"should not get here"), (void)0))
 
 #define p_atomic_inc_return(v) ((__typeof(*v)) \
    sizeof(*v) == sizeof(uint8_t)  ? atomic_inc_8_nv ((uint8_t  *)(v)) : \
--- a/src/util/u_atomic.h	2019-02-04 21:48:28.777667744 -0800
+++ b/src/util/u_atomic.h	2019-02-04 21:49:08.809668785 -0800
@@ -203,7 +203,7 @@
    sizeof(*v) == sizeof(uint64_t) ? atomic_dec_64_nv((uint64_t *)(v)) : \
                                     (assert(!"should not get here"), 0))
 
-#define p_atomic_add(v, i) ((void)				     \
+#define p_atomic_add(v, i) ((__typeof(*v))				     \
    sizeof(*v) == sizeof(uint8_t)  ? atomic_add_8 ((uint8_t  *)(v), (i)) : \
    sizeof(*v) == sizeof(uint16_t) ? atomic_add_16((uint16_t *)(v), (i)) : \
    sizeof(*v) == sizeof(uint32_t) ? atomic_add_32((uint32_t *)(v), (i)) : \
