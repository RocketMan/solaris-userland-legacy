Unpacking and packing code used here is not ready for SPARC CPUs
as it is working with 32bit integers on odd addresses. This fix
reverts some 'optimizations' which broke this code on SPARC.

This should be offered upstream.

--- Pillow-5.1.0/src/libImaging/Pack.c
+++ Pillow-5.1.0/src/libImaging/Pack.c
@@ -251,6 +251,15 @@ ImagingPackRGB(UINT8* out, const UINT8*
 {
     int i = 0;
     /* RGB triplets */
+#ifdef __sparc
+    /* SPARC CPUs cannot read integers from nonaligned addresses. */
+    for (; i < pixels; i++) {
+        out[0] = in[R];
+        out[1] = in[G];
+        out[2] = in[B];
+        out += 3; in += 4;
+    }
+#else
     for (; i < pixels-1; i++) {
         ((UINT32*)out)[0] = ((UINT32*)in)[i];
         out += 3;
@@ -261,6 +270,7 @@ ImagingPackRGB(UINT8* out, const UINT8*
         out[2] = in[i*4+B];
         out += 3;
     }
+#endif
 }
 
 void
--- Pillow-5.1.0/src/libImaging/Unpack.c
+++ Pillow-5.1.0/src/libImaging/Unpack.c
@@ -482,6 +482,16 @@ void
 ImagingUnpackRGB(UINT8* _out, const UINT8* in, int pixels)
 {
     int i = 0;
+#ifdef __sparc
+    /* SPARC CPUs cannot read integers from nonaligned addresses. */
+    for (; i < pixels; i++) {
+        _out[R] = in[0];
+        _out[G] = in[1];
+        _out[B] = in[2];
+        _out[A] = 255;
+        _out += 4; in += 3;
+    }
+#else
     UINT32* out = (UINT32*) _out;
     /* RGB triplets */
     for (; i < pixels-1; i++) {
@@ -492,6 +502,7 @@ ImagingUnpackRGB(UINT8* _out, const UINT
         out[i] = MAKE_UINT32(in[0], in[1], in[2], 255);
         in += 3;
     }
+#endif
 }
 
 void
@@ -1045,22 +1056,44 @@ static void
 copy4skip1(UINT8* _out, const UINT8* in, int pixels)
 {
     int i;
+#ifdef __sparc
+    /* SPARC CPUs cannot read integers from nonaligned addresses. */
+    for (i = 0; i < pixels; i++) {
+        _out[0] = in[0];
+        _out[1] = in[1];
+        _out[2] = in[2];
+        _out[3] = in[3];
+        _out += 4; in += 5;
+    }
+#else
     UINT32* out = (UINT32*) _out;
     for (i = 0; i < pixels; i++) {
         out[i] = *(UINT32*)&in[0];
         in += 5;
     }
+#endif
 }
 
 static void
 copy4skip2(UINT8* _out, const UINT8* in, int pixels)
 {
     int i;
+#ifdef __sparc
+    /* SPARC CPUs cannot read integers from nonaligned addresses. */
+    for (i = 0; i < pixels; i++) {
+        _out[0] = in[0];
+        _out[1] = in[1];
+        _out[2] = in[2];
+        _out[3] = in[3];
+        _out += 4; in += 6;
+    }
+#else
     UINT32* out = (UINT32*) _out;
     for (i = 0; i < pixels; i++) {
         out[i] = *(UINT32*)&in[0];
         in += 6;
     }
+#endif
 }
 
 
