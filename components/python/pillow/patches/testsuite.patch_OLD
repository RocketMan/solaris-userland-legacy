Several tests are not working correctly on big-endian systems. This code
is from newer Pillow releases.

Also, freetype 2.10 is not accounted for.

--- Pillow-5.1.0/Tests/test_file_jpeg2k.py
+++ Pillow-5.1.0/Tests/test_file_jpeg2k.py
@@ -3,6 +3,9 @@ from helper import unittest, PillowTestC
 from PIL import Image, Jpeg2KImagePlugin
 from io import BytesIO
 
+import sys
+import pytest
+
 codecs = dir(Image.core)
 
 test_card = Image.open('Tests/images/test-card.png')
@@ -146,12 +149,14 @@ class TestFileJpeg2k(PillowTestCase):
         self.assertEqual(j2k.mode, 'I;16')
         self.assertEqual(jp2.mode, 'I;16')
 
+    @pytest.mark.xfail(sys.byteorder == "big", reason="Fails on big-endian")
     def test_16bit_monchrome_jp2_like_tiff(self):
 
         tiff_16bit = Image.open('Tests/images/16bit.cropped.tif')
         jp2 = Image.open('Tests/images/16bit.cropped.jp2')
         self.assert_image_similar(jp2, tiff_16bit, 1e-3)
 
+    @pytest.mark.xfail(sys.byteorder == "big", reason="Fails on big-endian")
     def test_16bit_monchrome_j2k_like_tiff(self):
 
         tiff_16bit = Image.open('Tests/images/16bit.cropped.tif')
--- Pillow-5.1.0/Tests/test_file_webp_animated.py
+++ Pillow-5.1.0/Tests/test_file_webp_animated.py
@@ -2,6 +2,9 @@ from helper import unittest, PillowTestC
 
 from PIL import Image
 
+import sys
+import pytest
+
 try:
     from PIL import _webp
     HAVE_WEBP = True
@@ -34,6 +37,7 @@ class TestFileWebpAnimation(PillowTestCa
         self.assertEqual(im.n_frames, 42)
         self.assertTrue(im.is_animated)
 
+    @pytest.mark.xfail(sys.byteorder == "big", reason="Fails on big-endian")
     def test_write_animation_L(self):
         """
         Convert an animated GIF to animated WebP, then compare the
@@ -59,6 +63,7 @@ class TestFileWebpAnimation(PillowTestCa
         im.load()
         self.assert_image_similar(im, orig.convert("RGBA"), 25.0)
 
+    @pytest.mark.xfail(sys.byteorder == "big", reason="Fails on big-endian")
     def test_write_animation_RGB(self):
         """
         Write an animated WebP from RGB frames, and ensure the frames
--- Pillow-5.1.0/Tests/test_file_png.py
+++ Pillow-5.1.0/Tests/test_file_png.py
@@ -5,6 +5,8 @@ from io import BytesIO
 import zlib
 import sys
 
+import pytest
+
 codecs = dir(Image.core)
 
 
@@ -273,6 +275,7 @@ class TestFilePng(PillowTestCase):
         # image has 876 transparent pixels
         self.assertEqual(im.getchannel('A').getcolors()[0][0], 876)
 
+    @pytest.mark.xfail(sys.byteorder == "big", reason="Doesn't work on Solaris SPARC")
     def test_save_p_transparent_black(self):
         # check if solid black image with full transparency
         # is supported (check for #1838)
--- Pillow-5.1.0/Tests/test_file_eps.py
+++ Pillow-5.1.0/Tests/test_file_eps.py
@@ -3,6 +3,9 @@ from helper import unittest, PillowTestC
 from PIL import Image, EpsImagePlugin
 import io
 
+import sys
+import pytest
+
 # Our two EPS test files (they are identical except for their bounding boxes)
 file1 = "Tests/images/zero_bb.eps"
 file2 = "Tests/images/non_zero_bb.eps"
@@ -57,6 +60,7 @@ class TestFileEps(PillowTestCase):
         self.assertRaises(SyntaxError,
                           EpsImagePlugin.EpsImageFile, invalid_file)
 
+    @pytest.mark.xfail(sys.byteorder == "big", reason="Fails on SPARC Solaris")
     def test_cmyk(self):
         cmyk_image = Image.open("Tests/images/pil_sample_cmyk.eps")
 
--- Pillow-5.1.0/Tests/test_imagefont.py
+++ Pillow-5.1.0/Tests/test_imagefont.py
@@ -61,6 +61,9 @@ class TestImageFont(PillowTestCase):
                 ('2', '9'): {'multiline': 6.2,
                              'textsize': 2.5,
                              'getters': (12, 16)},
+                ('2', '10'): {'multiline': 6.2,
+                             'textsize': 2.5,
+                             'getters': (12, 16)},
                 'Default': {'multiline': 0.5,
                             'textsize': 0.5,
                             'getters': (12, 16)},
