Fixes CVE-2021-27921, CVE-2021-27922, CVE-2021-27923 and one more
similar security found later (and without CVE).

Upstream commits:
https://github.com/python-pillow/Pillow/commit/480f6819b592d7f07b9a9a52a7656c10bbe07442
https://github.com/python-pillow/Pillow/pull/5377/commits/ba65f0b08ee8b93195c3f3277820771f5b62aa52

--- Pillow-5.1.0/src/PIL/BlpImagePlugin.py
+++ Pillow-5.1.0/src/PIL/BlpImagePlugin.py
@@ -362,6 +362,7 @@ class BLP1Decoder(_BLPBaseDecoder):
         data = jpeg_header + data
         data = BytesIO(data)
         image = JpegImageFile(data)
+        Image._decompression_bomb_check(image.size)
         self.tile = image.tile  # :/
         self.fd = image.fp
         self.mode = image.mode
--- Pillow-5.1.0/src/PIL/IcnsImagePlugin.py
+++ Pillow-5.1.0/src/PIL/IcnsImagePlugin.py
@@ -110,6 +110,7 @@ def read_png_or_jpeg2000(fobj, start_len
     if sig[:8] == b'\x89PNG\x0d\x0a\x1a\x0a':
         fobj.seek(start)
         im = PngImagePlugin.PngImageFile(fobj)
+        Image._decompression_bomb_check(im.size)
         return {"RGBA": im}
     elif sig[:4] == b'\xff\x4f\xff\x51' \
             or sig[:4] == b'\x0d\x0a\x87\x0a' \
@@ -122,6 +123,7 @@ def read_png_or_jpeg2000(fobj, start_len
         jp2kstream = fobj.read(length)
         f = io.BytesIO(jp2kstream)
         im = Jpeg2KImagePlugin.Jpeg2KImageFile(f)
+        Image._decompression_bomb_check(im.size)
         if im.mode != 'RGBA':
             im = im.convert('RGBA')
         return {"RGBA": im}
--- Pillow-5.1.0/src/PIL/IcoImagePlugin.py
+++ Pillow-5.1.0/src/PIL/IcoImagePlugin.py
@@ -164,6 +164,7 @@
         if data[:8] == PngImagePlugin._MAGIC:
             # png frame
             im = PngImagePlugin.PngImageFile(self.buf)
+            Image._decompression_bomb_check(im.size)
         else:
             # XOR + AND mask bmp frame
             im = BmpImagePlugin.DibImageFile(self.buf)
--- Pillow-5.1.0/src/PIL/ImageFont.py
+++ Pillow-5.1.0/src/PIL/ImageFont.py
@@ -165,6 +165,7 @@ class FreeTypeFont(object):
 
     def getmask2(self, text, mode="", fill=Image.core.fill, direction=None, features=None, *args, **kwargs):
         size, offset = self.font.getsize(text, direction, features)
+        Image._decompression_bomb_check(size)
         im = fill("L", size, 0)
         self.font.render(text, im.id, mode == "1", direction, features)
         return im, offset
