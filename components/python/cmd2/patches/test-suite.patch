Some tests must be disabled, most of them due to missing pytest-mock package.

Not intended for upstream.

--- cmd2-0.9.13/tests/test_cmd2.py
+++ cmd2-0.9.13/tests/test_cmd2.py
@@ -2029,6 +2029,7 @@ def test_colors_default():
     app = ColorsApp()
     assert app.colors == cmd2.constants.COLORS_TERMINAL
 
+@pytest.mark.skip(reason="We don't have pytest-mock on Solaris")
 def test_colors_pouterr_always_tty(mocker, capsys):
     app = ColorsApp()
     app.colors = cmd2.constants.COLORS_ALWAYS
@@ -2051,6 +2052,7 @@ def test_colors_pouterr_always_tty(mocke
     assert len(err) > len('oopsie\n')
     assert 'oopsie' in err
 
+@pytest.mark.skip(reason="We don't have pytest-mock on Solaris")
 def test_colors_pouterr_always_notty(mocker, capsys):
     app = ColorsApp()
     app.colors = cmd2.constants.COLORS_ALWAYS
@@ -2073,6 +2075,7 @@ def test_colors_pouterr_always_notty(moc
     assert len(err) > len('oopsie\n')
     assert 'oopsie' in err
 
+@pytest.mark.skip(reason="We don't have pytest-mock on Solaris")
 def test_colors_terminal_tty(mocker, capsys):
     app = ColorsApp()
     app.colors = cmd2.constants.COLORS_TERMINAL
@@ -2094,6 +2097,7 @@ def test_colors_terminal_tty(mocker, cap
     assert len(err) > len('oopsie\n')
     assert 'oopsie' in err
 
+@pytest.mark.skip(reason="We don't have pytest-mock on Solaris")
 def test_colors_terminal_notty(mocker, capsys):
     app = ColorsApp()
     app.colors = cmd2.constants.COLORS_TERMINAL
@@ -2108,6 +2112,7 @@ def test_colors_terminal_notty(mocker, c
     out, err = capsys.readouterr()
     assert out == err == 'oopsie\n'
 
+@pytest.mark.skip(reason="We don't have pytest-mock on Solaris")
 def test_colors_never_tty(mocker, capsys):
     app = ColorsApp()
     app.colors = cmd2.constants.COLORS_NEVER
@@ -2122,6 +2127,7 @@ def test_colors_never_tty(mocker, capsys
     out, err = capsys.readouterr()
     assert out == err == 'oopsie\n'
 
+@pytest.mark.skip(reason="We don't have pytest-mock on Solaris")
 def test_colors_never_notty(mocker, capsys):
     app = ColorsApp()
     app.colors = cmd2.constants.COLORS_NEVER
--- cmd2-0.9.13/tests/test_history.py
+++ cmd2-0.9.13/tests/test_history.py
@@ -620,6 +620,7 @@ def test_history_file_is_directory(capsy
         _, err = capsys.readouterr()
         assert 'is a directory' in err
 
+@pytest.mark.skip(reason="We don't have pytest-mock on Solaris")
 def test_history_file_permission_error(mocker, capsys):
     mock_open = mocker.patch('builtins.open')
     mock_open.side_effect = PermissionError
@@ -694,6 +695,7 @@ def test_persist_history_ensure_no_error
     assert not out
     assert not err
 
+@pytest.mark.skip(reason="We don't have pytest-mock on Solaris")
 def test_persist_history_permission_error(hist_file, mocker, capsys):
     app = cmd2.Cmd(persistent_history_file=hist_file)
     run_cmd(app, 'help')
--- cmd2-0.9.13/tests/test_completion.py
+++ cmd2-0.9.13/tests/test_completion.py
@@ -458,6 +458,7 @@ def test_path_completion_doesnt_match_wi
     # Currently path completion doesn't accept wildcards, so will always return empty results
     assert cmd2_app.path_complete(text, line, begidx, endidx) == []
 
+@pytest.mark.skip(reason="Home directory browsing does not work on our build machines")
 @pytest.mark.skipif(sys.platform == 'win32', reason="getpass.getuser() does not work on Windows in AppVeyor because "
                                                     "no user name environment variables are set")
 def test_path_completion_complete_user(cmd2_app):
--- cmd2-0.9.13/tests/test_utils.py
+++ cmd2-0.9.13/tests/test_utils.py
@@ -235,7 +235,7 @@ def pr_none():
     pr = cu.ProcReader(proc, None, None)
     return pr
 
-@pytest.mark.skipif(sys.platform == 'linux', reason="Test doesn't work correctly on TravisCI")
+@pytest.mark.skipif(sys.platform == 'sunos5', reason="Test doesn't work correctly on Solaris")
 def test_proc_reader_send_sigint(pr_none):
     assert pr_none._proc.poll() is None
     pr_none.send_sigint()
@@ -246,7 +246,7 @@ def test_proc_reader_send_sigint(pr_none
     else:
         assert ret_code == -signal.SIGINT
 
-@pytest.mark.skipif(sys.platform == 'linux', reason="Test doesn't work correctly on TravisCI")
+@pytest.mark.skipif(sys.platform == 'sunos5', reason="Test doesn't work correctly on Solaris")
 def test_proc_reader_terminate(pr_none):
     assert pr_none._proc.poll() is None
     pr_none.terminate()
@@ -257,7 +257,7 @@ def test_proc_reader_terminate(pr_none):
     else:
         assert ret_code == -signal.SIGTERM
 
-@pytest.mark.skipif(sys.platform == 'linux', reason="Test doesn't work correctly on TravisCI")
+@pytest.mark.skipif(sys.platform == 'sunos5', reason="Test doesn't work correctly on Solaris")
 def test_proc_reader_wait(pr_none):
     assert pr_none._proc.poll() is None
     pr_none.wait()
