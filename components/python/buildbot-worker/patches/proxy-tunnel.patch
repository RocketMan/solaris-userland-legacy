This patch adds functionality to natively tunnel the worker through the HTTP proxy.

Patch was offered to upstream:
https://github.com/buildbot/buildbot/pull/5999

--- buildbot-worker-2.10.0/buildbot_worker/pb.py
+++ buildbot-worker-2.10.0/buildbot_worker/pb.py
@@ -37,6 +37,8 @@ from buildbot_worker.base import WorkerF
 from buildbot_worker.compat import unicode2bytes
 from buildbot_worker.pbutil import AutoLoginPBFactory
 
+from buildbot_worker.tunnel import HTTPTunnelEndpoint
+
 
 class UnknownCommand(pb.Error):
     pass
@@ -212,17 +214,38 @@ class Worker(WorkerBase, service.MultiSe
         bf = self.bf = BotFactory(buildmaster_host, port, keepalive, maxdelay)
         bf.startLogin(
             credentials.UsernamePassword(name, passwd), client=self.bot)
-        if connection_string is None:
+
+        def get_connection_string(host, port):
             if useTls:
                 connection_type = 'tls'
             else:
                 connection_type = 'tcp'
 
-            connection_string = '{}:host={}:port={}'.format(
+            return '{}:host={}:port={}'.format(
                 connection_type,
-                buildmaster_host.replace(':', r'\:'),  # escape ipv6 addresses
+                host.replace(':', r'\:'),  # escape ipv6 addresses
                 port)
-        endpoint = clientFromString(reactor, connection_string)
+
+        http_tunnel = (os.environ.get('BUILDBOT_USE_PROXY') is not None)
+        assert not (http_tunnel and connection_string), (
+            "http tunneling doesn't work with connection strings")
+
+        if http_tunnel:
+            log.msg("Using http tunnel to connect")
+            try:
+                proxy_host = os.environ['BUILDBOT_PROXY_HOST']
+                proxy_port = os.environ['BUILDBOT_PROXY_PORT']
+            except KeyError:
+                raise ValueError("HTTP proxy needs both BUILDBOT_PROXY_HOST "
+                                 "and BUILDBOT_PROXY_PORT environment variables set")
+
+            connection_string = get_connection_string(proxy_host, proxy_port)
+            proxy_endpoint = clientFromString(reactor, connection_string)
+            endpoint = HTTPTunnelEndpoint(buildmaster_host, port, proxy_endpoint)
+        else:
+            if connection_string is None:
+                connection_string = get_connection_string(buildmaster_host, port)
+            endpoint = clientFromString(reactor, connection_string)
 
         def policy(attempt):
             if maxRetries and attempt >= maxRetries:
--- buildbot-worker-2.10.0/buildbot_worker/tunnel.py
+++ buildbot-worker-2.10.0/buildbot_worker/tunnel.py
@@ -0,0 +1,88 @@
+
+from twisted.internet import defer, interfaces, protocol
+from zope.interface import implementer
+
+
+class HTTPTunnelClient(protocol.Protocol):
+
+    def __init__(self, connectedDeferred):
+        # this gets set once the tunnel is ready
+        self._proxyWrappedProtocol = None
+        self._connectedDeferred = connectedDeferred
+
+    def connectionMade(self):
+        request = "CONNECT {}:{} HTTP/1.1\r\n\r\n".format(
+            self.factory.host, self.factory.port)
+        self.transport.write(request.encode())
+
+    def connectionLost(self, reason):
+        if self._proxyWrappedProtocol:
+            # Proxy connectionLost to the wrapped protocol
+            return self._proxyWrappedProtocol.connectionLost(reason)
+
+    def dataReceived(self, data):
+        if self._proxyWrappedProtocol is not None:
+            # If tunnel is already established, proxy dataReceived()
+            # calls to the wrapped protocol
+            return self._proxyWrappedProtocol.dataReceived(data)
+
+        # process data from the proxy server
+        _, status, _ = data.split(b"\r\n")[0].split(b" ", 2)
+        if status != b"200":
+            return self.transport.loseConnection()
+
+        self._proxyWrappedProtocol = (
+            self.factory._proxyWrappedFactory.buildProtocol(
+                self.transport.getPeer()))
+        self._proxyWrappedProtocol.makeConnection(self.transport)
+        self._connectedDeferred.callback(self._proxyWrappedProtocol)
+
+        # forward all trafic directly to the wrapped protocol
+        self.transport.protocol = self._proxyWrappedProtocol
+
+
+class HTTPTunnelFactory(protocol.ClientFactory):
+    protocol = HTTPTunnelClient
+
+    def __init__(self, host, port, wrappedFactory):
+        self.host = host
+        self.port = port
+
+        self._proxyWrappedFactory = wrappedFactory
+        self._onConnection = defer.Deferred()
+
+    def doStart(self):
+        super().doStart()
+        # forward start notifications through to the wrapped factory.
+        self._proxyWrappedFactory.doStart()
+
+    def doStop(self):
+        # forward stop notifications through to the wrapped factory.
+        self._proxyWrappedFactory.doStop()
+        super().doStop()
+
+    def buildProtocol(self, addr):
+        proto = self.protocol(self._onConnection)
+        proto.factory = self
+        return proto
+
+    def clientConnectionFailed(self, connector, reason):
+        if not self._onConnection.called:
+            self._onConnection.errback(reason)
+
+
+@implementer(interfaces.IStreamClientEndpoint)
+class HTTPTunnelEndpoint(object):
+
+    def __init__(self, host, port, proxyEndpoint):
+        self.host = host
+        self.port = port
+        self.proxyEndpoint = proxyEndpoint
+
+    def connect(self, protocolFactory):
+        tunnel = HTTPTunnelFactory(self.host, self.port, protocolFactory)
+        d = self.proxyEndpoint.connect(tunnel)
+        # once tunnel connection is established,
+        # defer the subsequent server connection
+        d.addCallback(lambda result: tunnel._onConnection)
+        return d
