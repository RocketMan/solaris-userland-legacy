When certain locales are being used, __Pyx_CreateCodeObjectForTraceback can
ultimately call PyObject_Call that (as the documentation states) must not be
called with an exception set. This can result in an exception being cleared
in between being caught and handled, resulting in segmentation faults
in generated Cython code.

This patch saves the exception for the duration of this 'dangerous' call and
restores it afterward.

This was reported and accepted upstream:
https://github.com/cython/cython/issues/4722

--- lxml-4.7.1/src/lxml/etree.c
+++ lxml-4.7.1/src/lxml/etree.c
@@ -267787,14 +267787,26 @@
     PyCodeObject *py_code = 0;
     PyFrameObject *py_frame = 0;
     PyThreadState *tstate = __Pyx_PyThreadState_Current;
+    PyObject *ptype, *pvalue, *ptraceback;
     if (c_line) {
         c_line = __Pyx_CLineForTraceback(tstate, c_line);
     }
     py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
     if (!py_code) {
+        /* __Pyx_CreateCodeObjectForTraceback can in some cases subsequently
+           call functions that cannot be called with set exceptions */
+        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
         py_code = __Pyx_CreateCodeObjectForTraceback(
             funcname, c_line, py_line, filename);
-        if (!py_code) goto bad;
+        if (!py_code) {
+            /* If the code object creation fails, then we should clear the
+               fetched exception references and propagate the new exception */
+            Py_XDECREF(ptype);
+            Py_XDECREF(pvalue);
+            Py_XDECREF(ptraceback);
+            goto bad;
+        }
+        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
         __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
     }
     py_frame = PyFrame_New(
