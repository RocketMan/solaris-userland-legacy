There are several issues with the internal test suite.

Two tests are failing, because they do expect higher privileges than
we get on our build machines.

Also, our pytest incorrectly assumes that TestAPI_UseIPv4Sockets,
TestAPI_UseIPv6Sockets and TestAPI_UseUnixSockets are runnable. In
reality, they should be subclassed and ran only after that. This is
fixed by renaming them to not start with "Test".

Not intended for upstream.

--- waitress-1.4.3/waitress/tests/test_functional.py
+++ waitress-1.4.3/waitress/tests/test_functional.py
@@ -133,6 +133,7 @@ class SleepyThreadTests(TcpTests, unitte
     def tearDown(self):
         self.stop_subprocess()
 
+    @unittest.skip("Failing due to the need for elevated privileges")
     def test_it(self):
         getline = os.path.join(here, "fixtureapps", "getline.py")
         cmds = (
--- waitress-1.4.3/waitress/tests/test_wasyncore.py
+++ waitress-1.4.3/waitress/tests/test_wasyncore.py
@@ -1105,19 +1106,19 @@ class BaseTestAPI:
             join_thread(t, timeout=TIMEOUT)
 
 
-class TestAPI_UseIPv4Sockets(BaseTestAPI):
+class xTestAPI_UseIPv4Sockets(BaseTestAPI):
     family = socket.AF_INET
     addr = (HOST, 0)
 
 
 @unittest.skipUnless(IPV6_ENABLED, "IPv6 support required")
-class TestAPI_UseIPv6Sockets(BaseTestAPI):
+class xTestAPI_UseIPv6Sockets(BaseTestAPI):
     family = socket.AF_INET6
     addr = (HOSTv6, 0)
 
 
 @unittest.skipUnless(HAS_UNIX_SOCKETS, "Unix sockets required")
-class TestAPI_UseUnixSockets(BaseTestAPI):
+class xTestAPI_UseUnixSockets(BaseTestAPI):
     if HAS_UNIX_SOCKETS:
         family = socket.AF_UNIX
     addr = TESTFN
@@ -1127,30 +1128,30 @@ class TestAPI_UseUnixSockets(BaseTestAPI
         BaseTestAPI.tearDown(self)
 
 
-class TestAPI_UseIPv4Select(TestAPI_UseIPv4Sockets, unittest.TestCase):
+class TestAPI_UseIPv4Select(xTestAPI_UseIPv4Sockets, unittest.TestCase):
     use_poll = False
 
 
 @unittest.skipUnless(hasattr(select, "poll"), "select.poll required")
-class TestAPI_UseIPv4Poll(TestAPI_UseIPv4Sockets, unittest.TestCase):
+class TestAPI_UseIPv4Poll(xTestAPI_UseIPv4Sockets, unittest.TestCase):
     use_poll = True
 
 
-class TestAPI_UseIPv6Select(TestAPI_UseIPv6Sockets, unittest.TestCase):
+class TestAPI_UseIPv6Select(xTestAPI_UseIPv6Sockets, unittest.TestCase):
     use_poll = False
 
 
 @unittest.skipUnless(hasattr(select, "poll"), "select.poll required")
-class TestAPI_UseIPv6Poll(TestAPI_UseIPv6Sockets, unittest.TestCase):
+class TestAPI_UseIPv6Poll(xTestAPI_UseIPv6Sockets, unittest.TestCase):
     use_poll = True
 
 
-class TestAPI_UseUnixSocketsSelect(TestAPI_UseUnixSockets, unittest.TestCase):
+class TestAPI_UseUnixSocketsSelect(xTestAPI_UseUnixSockets, unittest.TestCase):
     use_poll = False
 
 
 @unittest.skipUnless(hasattr(select, "poll"), "select.poll required")
-class TestAPI_UseUnixSocketsPoll(TestAPI_UseUnixSockets, unittest.TestCase):
+class TestAPI_UseUnixSocketsPoll(xTestAPI_UseUnixSockets, unittest.TestCase):
     use_poll = True
 
 
@@ -1160,6 +1161,7 @@ class Test__strerror(unittest.TestCase):
 
         return _strerror(err)
 
+    @unittest.skip("Failing due to the need for elevated privileges")
     def test_gardenpath(self):
         self.assertEqual(self._callFUT(1), "Operation not permitted")
 
