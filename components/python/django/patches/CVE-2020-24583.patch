Fixes CVE-2020-24583.
Desc:
  A flaw was found in django. The `FILE_UPLOAD_DIRECTORY_PERMISSIONS` mode was
  not applied to intermediate-level directories created when uploading files or
  to intermediate-level collected static directories when using the
  `collectstatic` management command. The highest threat from this
  vulnerability is to data confidentiality.

Backported from Django master:
https://github.com/django/django/commit/8d7271578d7b153435b40fe40236ebec43cbf1b9

--- Django-1.11.29/django/core/files/storage.py
+++ Django-1.11.29/django/core/files/storage.py
@@ -310,9 +310,9 @@ class FileSystemStorage(Storage):
         if not os.path.exists(directory):
             try:
                 if self.directory_permissions_mode is not None:
-                    # os.makedirs applies the global umask, so we reset it,
-                    # for consistency with file_permissions_mode behavior.
-                    old_umask = os.umask(0)
+                    # Set the umask because os.makedirs() doesn't apply the "mode"
+                    # argument to intermediate-level directories.
+                    old_umask = os.umask(0o777 & ~self.directory_permissions_mode)
                     try:
                         os.makedirs(directory, self.directory_permissions_mode)
                     finally:
--- Django-1.11.29/tests/file_storage/tests.py
+++ Django-1.11.29/tests/file_storage/tests.py
@@ -928,16 +928,21 @@ def test_file_upload_default_permissions(self):
     @override_settings(FILE_UPLOAD_DIRECTORY_PERMISSIONS=0o765)
     def test_file_upload_directory_permissions(self):
         self.storage = FileSystemStorage(self.storage_dir)
-        name = self.storage.save("the_directory/the_file", ContentFile("data"))
-        dir_mode = os.stat(os.path.dirname(self.storage.path(name)))[0] & 0o777
-        self.assertEqual(dir_mode, 0o765)
+        name = self.storage.save('the_directory/subdir/the_file', ContentFile('data'))
+        parent = os.path.dirname(self.storage.path(name))
+        grandparent = os.path.dirname(os.path.dirname(self.storage.path(name)))
+        self.assertEqual(os.stat(parent).st_mode & 0o777, 0o765)
+        self.assertEqual(os.stat(grandparent).st_mode & 0o777, 0o765)
 
     @override_settings(FILE_UPLOAD_DIRECTORY_PERMISSIONS=None)
     def test_file_upload_directory_default_permissions(self):
         self.storage = FileSystemStorage(self.storage_dir)
-        name = self.storage.save("the_directory/the_file", ContentFile("data"))
-        dir_mode = os.stat(os.path.dirname(self.storage.path(name)))[0] & 0o777
-        self.assertEqual(dir_mode, 0o777 & ~self.umask)
+        name = self.storage.save('the_directory/subdir/the_file', ContentFile('data'))
+        parent = os.path.dirname(self.storage.path(name))
+        grandparent = os.path.dirname(os.path.dirname(self.storage.path(name)))
+        expected_mode = 0o777 & ~self.umask
+        self.assertEqual(os.stat(parent).st_mode & 0o777, expected_mode)
+        self.assertEqual(os.stat(grandparent).st_mode & 0o777, expected_mode)
 
 
 class FileStoragePathParsing(SimpleTestCase):
--- /dev/null
+++ Django-1.11.29/tests/staticfiles_tests/project/documents/nested/css/base.css
@@ -0,0 +1 @@
+html {height: 100%;}
--- Django-1.11.29/tests/staticfiles_tests/test_storage.py
+++ Django-1.11.29/tests/staticfiles_tests/test_storage.py
@@ -509,12 +509,18 @@ class TestStaticFilePermissions(Collecti
     )
     def test_collect_static_files_permissions(self):
         call_command('collectstatic', **self.command_params)
-        test_file = os.path.join(settings.STATIC_ROOT, "test.txt")
-        test_dir = os.path.join(settings.STATIC_ROOT, "subdir")
-        file_mode = os.stat(test_file)[0] & 0o777
-        dir_mode = os.stat(test_dir)[0] & 0o777
+        static_root = settings.STATIC_ROOT
+        test_file = os.path.join(static_root, 'test.txt')
+        file_mode = os.stat(test_file).st_mode & 0o777
         self.assertEqual(file_mode, 0o655)
-        self.assertEqual(dir_mode, 0o765)
+        tests = [
+            os.path.join(static_root, 'subdir'),
+            os.path.join(static_root, 'nested'),
+            os.path.join(static_root, 'nested', 'css'),
+        ]
+        for directory in tests:
+            dir_mode = os.stat(directory).st_mode & 0o777
+            self.assertEqual(dir_mode, 0o765)
 
     @override_settings(
         FILE_UPLOAD_PERMISSIONS=None,
@@ -522,12 +528,18 @@ class TestStaticFilePermissions(Collecti
     )
     def test_collect_static_files_default_permissions(self):
         call_command('collectstatic', **self.command_params)
-        test_file = os.path.join(settings.STATIC_ROOT, "test.txt")
-        test_dir = os.path.join(settings.STATIC_ROOT, "subdir")
-        file_mode = os.stat(test_file)[0] & 0o777
-        dir_mode = os.stat(test_dir)[0] & 0o777
+        static_root = settings.STATIC_ROOT
+        test_file = os.path.join(static_root, 'test.txt')
+        file_mode = os.stat(test_file).st_mode & 0o777
         self.assertEqual(file_mode, 0o666 & ~self.umask)
-        self.assertEqual(dir_mode, 0o777 & ~self.umask)
+        tests = [
+            os.path.join(static_root, 'subdir'),
+            os.path.join(static_root, 'nested'),
+            os.path.join(static_root, 'nested', 'css'),
+        ]
+        for directory in tests:
+            dir_mode = os.stat(directory).st_mode & 0o777
+            self.assertEqual(dir_mode, 0o777 & ~self.umask)
 
     @override_settings(
         FILE_UPLOAD_PERMISSIONS=0o655,
@@ -536,12 +548,18 @@ class TestStaticFilePermissions(Collecti
     )
     def test_collect_static_files_subclass_of_static_storage(self):
         call_command('collectstatic', **self.command_params)
-        test_file = os.path.join(settings.STATIC_ROOT, "test.txt")
-        test_dir = os.path.join(settings.STATIC_ROOT, "subdir")
-        file_mode = os.stat(test_file)[0] & 0o777
-        dir_mode = os.stat(test_dir)[0] & 0o777
+        static_root = settings.STATIC_ROOT
+        test_file = os.path.join(static_root, 'test.txt')
+        file_mode = os.stat(test_file).st_mode & 0o777
         self.assertEqual(file_mode, 0o640)
-        self.assertEqual(dir_mode, 0o740)
+        tests = [
+            os.path.join(static_root, 'subdir'),
+            os.path.join(static_root, 'nested'),
+            os.path.join(static_root, 'nested', 'css'),
+        ]
+        for directory in tests:
+            dir_mode = os.stat(directory).st_mode & 0o777
+            self.assertEqual(dir_mode, 0o740)
 
 
 @override_settings(
