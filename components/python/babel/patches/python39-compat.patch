From 4fa749b918810b52a63b312d82e4003e24db0406 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Miro=20Hron=C4=8Dok?= <miro@hroncok.cz>
Date: Mon, 6 Jan 2020 00:37:39 +0100
Subject: [PATCH] Replace usage of parser.suite with ast.parse

Replaced usage of the long-superseded "parser.suite" module in the
mako.util package for parsing the python magic encoding comment with the
"ast.parse" function introduced many years ago in Python 2.5, as
"parser.suite" is emitting deprecation warnings in Python 3.9.

======

From 7bdaa28a55e8d8228d5434effa4b1473ab7b3669 Mon Sep 17 00:00:00 2001
From: Felix Schwarz <felix.schwarz@oss.schwarz.eu>
Date: Tue, 5 May 2020 08:05:56 +0000
Subject: [PATCH] fix tests when using Python 3.9a6

In Python 3.9a6 integer values for future flags were changed to prevent
collision with compiler flags. We need to retrieve these at runtime so
the test suite works with Python <= 3.8 as well as Python 3.9.

--- a/babel/util.py
+++ b/babel/util.py
@@ -68,8 +68,8 @@ def parse_encoding(fp):
         m = PYTHON_MAGIC_COMMENT_re.match(line1)
         if not m:
             try:
-                import parser
-                parser.suite(line1.decode('latin-1'))
+                import ast
+                ast.parse(line1.decode('latin-1'))
             except (ImportError, SyntaxError, UnicodeEncodeError):
                 # Either it's a real syntax error, in which case the source is
                 # not valid python source, or line2 is a continuation of line1,
--- a/tests/test_util.py
+++ b/tests/test_util.py
@@ -11,6 +11,7 @@
 # individuals. For the exact contribution history, see the revision
 # history and logs, available at http://babel.edgewall.org/log/.
 
+import __future__
 import unittest
 
 import pytest
@@ -20,6 +21,12 @@
 from babel.util import parse_future_flags
 
 
+class _FF:
+    division         = __future__.division.compiler_flag
+    print_function   = __future__.print_function.compiler_flag
+    with_statement   = __future__.with_statement.compiler_flag
+    unicode_literals = __future__.unicode_literals.compiler_flag
+
 def test_distinct():
     assert list(util.distinct([1, 2, 1, 3, 4, 4])) == [1, 2, 3, 4]
     assert list(util.distinct('foobar')) == ['f', 'o', 'b', 'a', 'r']
@@ -70,25 +77,25 @@ def test_parse_encoding_non_ascii():
 from __future__ import print_function,
     division, with_statement,
     unicode_literals
-''', 0x10000 | 0x2000 | 0x8000 | 0x20000),
+''', _FF.print_function | _FF.division | _FF.with_statement | _FF.unicode_literals),
     ('''
 from __future__ import print_function, division
 print('hello')
-''', 0x10000 | 0x2000),
+''', _FF.print_function | _FF.division),
     ('''
 from __future__ import print_function, division, unknown,,,,,
 print 'hello'
-''', 0x10000 | 0x2000),
+''', _FF.print_function | _FF.division),
     ('''
 from __future__ import (
     print_function,
     division)
-''', 0x10000 | 0x2000),
+''', _FF.print_function | _FF.division),
     ('''
 from __future__ import \\
     print_function, \\
     division
-''', 0x10000 | 0x2000),
+''', _FF.print_function | _FF.division),
 ])
 def test_parse_future(source, result):
     fp = BytesIO(source.encode('latin-1'))
