Pathlib2 uses test package which should be part of the Python itself but for
some reason is not delivered.  Following changes remove anything from the test
package.

Missing test package should be investigated

Not suitable for upstream

--- pathlib2-2.3.3/tests/test_pathlib2.py
+++ pathlib2-2.3.3/tests/test_pathlib2.py
@@ -6,8 +6,10 @@
 import io
 import os
 import errno
+import importlib
 import pathlib2 as pathlib
 import pickle
+import shutil
 import six
 import socket
 import stat
@@ -39,20 +41,9 @@ else:
 if sys.version_info < (3, 2):
     unittest.TestCase.assertRaisesRegex = unittest.TestCase.assertRaisesRegexp
 
-try:
-    from test import support
-except ImportError:
-    from test import test_support as support
-
-android_not_root = getattr(support, "android_not_root", False)
-
-TESTFN = support.TESTFN
-
-# work around broken support.rmtree on Python 3.3 on Windows
-if (os.name == 'nt'
-        and sys.version_info >= (3, 0) and sys.version_info < (3, 4)):
-    import shutil
-    support.rmtree = shutil.rmtree
+# Disambiguate TESTFN for parallel testing, while letting it remain a valid
+# module name.
+TESTFN = "@test_{}_tmp".format(os.getpid())
 
 try:
     import grp
@@ -60,18 +51,65 @@ try:
 except ImportError:
     grp = pwd = None
 
-# support.can_symlink is missing prior to Python 3
-if six.PY2:
-
-    def support_can_symlink():
-        return pathlib.supports_symlinks
+def support_can_symlink():
+    return pathlib.supports_symlinks
 
-    support_skip_unless_symlink = unittest.skipIf(
-        not pathlib.supports_symlinks,
-        "symlinks not supported on this platform")
-else:
-    support_can_symlink = support.can_symlink
-    support_skip_unless_symlink = support.skip_unless_symlink
+support_skip_unless_symlink = unittest.skipIf(
+    not pathlib.supports_symlinks,
+    "symlinks not supported on this platform")
+
+# Diretly from the test module
+class EnvironmentVarGuard(collections_abc.MutableMapping):
+
+    """Class to help protect the environment variable properly.  Can be used as
+    a context manager."""
+
+    def __init__(self):
+        self._environ = os.environ
+        self._changed = {}
+
+    def __getitem__(self, envvar):
+        return self._environ[envvar]
+
+    def __setitem__(self, envvar, value):
+        # Remember the initial value on the first access
+        if envvar not in self._changed:
+            self._changed[envvar] = self._environ.get(envvar)
+        self._environ[envvar] = value
+
+    def __delitem__(self, envvar):
+        # Remember the initial value on the first access
+        if envvar not in self._changed:
+            self._changed[envvar] = self._environ.get(envvar)
+        if envvar in self._environ:
+            del self._environ[envvar]
+
+    def keys(self):
+        return self._environ.keys()
+
+    def __iter__(self):
+        return iter(self._environ)
+
+    def __len__(self):
+        return len(self._environ)
+
+    def set(self, envvar, value):
+        self[envvar] = value
+
+    def unset(self, envvar):
+        del self[envvar]
+
+    def __enter__(self):
+        return self
+
+    def __exit__(self, *ignore_exc):
+        for (k, v) in self._changed.items():
+            if v is None:
+                if k in self._environ:
+                    del self._environ[k]
+            else:
+                self._environ[k] = v
+        os.environ = self._environ
 
 
 # Backported from 3.4
@@ -93,9 +131,6 @@ def fs_is_case_insensitive(directory):
         os.unlink(base_path)
 
 
-support.fs_is_case_insensitive = fs_is_case_insensitive
-
-
 class _BaseFlavourTest(object):
 
     def _check_parse_parts(self, arg, expected):
@@ -1350,7 +1385,7 @@ class _BasePathTest(object):
     def setUp(self):
         def cleanup():
             os.chmod(join('dirE'), 0o777)
-            support.rmtree(BASE)
+            shutil.rmtree(BASE)
         self.addCleanup(cleanup)
         os.mkdir(BASE)
         os.mkdir(join('dirA'))
@@ -1678,7 +1713,7 @@ class _BasePathTest(object):
                 p, P(BASE, 'foo', 'in', 'spam'), False)
         # Now create absolute symlinks
         d = tempfile.mkdtemp(suffix='-dirD')
-        self.addCleanup(support.rmtree, d)
+        self.addCleanup(shutil.rmtree, d)
         os.symlink(os.path.join(d), join('dirA', 'linkX'))
         os.symlink(join('dirB'), os.path.join(d, 'linkY'))
         p = P(BASE, 'dirA', 'linkX', 'linkY', 'fileB')
@@ -2052,15 +2087,6 @@ class _BasePathTest(object):
         self.assertFalse((P / 'non-existing').is_fifo())
         self.assertFalse((P / 'fileA' / 'bah').is_fifo())
 
-    @unittest.skipUnless(hasattr(os, "mkfifo"), "os.mkfifo() required")
-    @unittest.skipIf(android_not_root, "mkfifo not allowed, non root user")
-    def test_is_fifo_true(self):
-        P = self.cls(BASE, 'myfifo')
-        os.mkfifo(str(P))
-        self.assertTrue(P.is_fifo())
-        self.assertFalse(P.is_socket())
-        self.assertFalse(P.is_file())
-
     def test_is_socket_false(self):
         P = self.cls(BASE)
         self.assertFalse((P / 'fileA').is_socket())
@@ -2265,7 +2291,7 @@ class PosixPathTest(_BasePathTest, unitt
         P = self.cls
         p = P(BASE)
         given = set(p.glob("FILEa"))
-        expect = set() if not support.fs_is_case_insensitive(BASE) else given
+        expect = set() if not fs_is_case_insensitive(BASE) else given
         self.assertEqual(given, expect)
         self.assertEqual(set(p.glob("FILEa*")), set())
 
@@ -2273,7 +2299,7 @@ class PosixPathTest(_BasePathTest, unitt
         P = self.cls
         p = P(BASE, "dirC")
         given = set(p.rglob("FILEd"))
-        expect = set() if not support.fs_is_case_insensitive(BASE) else given
+        expect = set() if not fs_is_case_insensitive(BASE) else given
         self.assertEqual(given, expect)
         self.assertEqual(set(p.rglob("FILEd*")), set())
 
@@ -2281,18 +2307,17 @@ class PosixPathTest(_BasePathTest, unitt
                          'pwd module does not expose getpwall()')
     def test_expanduser(self):
         P = self.cls
-        support.import_module('pwd')
+        importlib.import_module('pwd')
         import pwd
         pwdent = pwd.getpwuid(os.getuid())
         username = pwdent.pw_name
         userhome = pwdent.pw_dir.rstrip('/') or '/'
         # find arbitrary different user (if exists)
-        for pwdent in pwd.getpwall():
-            othername = pwdent.pw_name
-            otherhome = pwdent.pw_dir.rstrip('/')
-            if othername != username and otherhome:
-                break
 
+        pwdent = pwd.getpwnam('root')
+        othername = pwdent.pw_name
+        otherhome = pwdent.pw_dir.rstrip('/')
+    
         p1 = P('~/Documents')
         p2 = P('~' + username + '/Documents')
         p3 = P('~' + othername + '/Documents')
@@ -2301,7 +2326,7 @@ class PosixPathTest(_BasePathTest, unitt
         p6 = P('')
         p7 = P('~fakeuser/Documents')
 
-        with support.EnvironmentVarGuard() as env:
+        with EnvironmentVarGuard() as env:
             env.unset('HOME')
 
             self.assertEqual(p1.expanduser(), P(userhome) / 'Documents')
@@ -2339,7 +2364,7 @@ class WindowsPathTest(_BasePathTest, uni
 
     def test_expanduser(self):
         P = self.cls
-        with support.EnvironmentVarGuard() as env:
+        with EnvironmentVarGuard() as env:
             env.unset('HOME')
             env.unset('USERPROFILE')
             env.unset('HOMEPATH')
