Fixes CVE-2019-10160.
Desc:
  A security regression of CVE-2019-9636 was discovered in python since commit
  d537ab0ff9767ef024f26246899728f0116b1ec3 affecting versions 2.7, 3.5, 3.6,
  3.7 and from v3.8.0a4 through v3.8.0b1, which still allows an attacker to
  exploit CVE-2019-9636 by abusing the user and password parts of a URL. When
  an application parses user-supplied URLs to store cookies, authentication
  credentials, or other kind of information, it is possible for an attacker to
  provide specially crafted URLs to make the application locate host-related
  information (e.g. cookies, authentication data) and send them to a different
  host than where it should, unlike if the URLs had been correctly parsed. The
  result of an attack may vary based on the application.

Upstream bug: https://bugs.python.org/issue36742

Backported from upstream:
https://github.com/python/cpython/commit/4d723e76e1ad17e9e7d5e828e59bb47e76f2174b
https://github.com/python/cpython/commit/250b62acc59921d399f0db47db3b462cd6037e09


--- Python-3.4.10/Lib/urllib/parse.py
+++ Python-3.4.10/Lib/urllib/parse.py
@@ -322,13 +322,16 @@ def _checknetloc(netloc):
     # looking for characters like \u2100 that expand to 'a/c'
     # IDNA uses NFKC equivalence, so normalize for this check
     import unicodedata
-    netloc2 = unicodedata.normalize('NFKC', netloc)
-    if netloc == netloc2:
+    n = netloc.replace('@', '')   # ignore characters already included
+    n = n.replace(':', '')        # but not the surrounding text
+    n = n.replace('#', '')
+    n = n.replace('?', '')
+    netloc2 = unicodedata.normalize('NFKC', n)
+    if n == netloc2:
         return
-    _, _, netloc = netloc.rpartition('@') # anything to the left of '@' is okay
     for c in '/?#@:':
         if c in netloc2:
-            raise ValueError("netloc '" + netloc2 + "' contains invalid " +
+            raise ValueError("netloc '" + netloc + "' contains invalid " +
                              "characters under NFKC normalization")
 
 def urlsplit(url, scheme='', allow_fragments=True):
--- Python-3.4.10/Lib/test/test_urlparse.py
+++ Python-3.4.10/Lib/test/test_urlparse.py
@@ -885,12 +885,19 @@ class UrlParseTestCase(unittest.TestCase
         self.assertIn('\u2100', denorm_chars)
         self.assertIn('\uFF03', denorm_chars)
 
+        # bpo-36742: Verify port separators are ignored when they
+        # existed prior to decomposition
+        urllib.parse.urlsplit('http://\u30d5\u309a:80')
+        with self.assertRaises(ValueError):
+            urllib.parse.urlsplit('http://\u30d5\u309a\ufe1380')
+
         for scheme in ["http", "https", "ftp"]:
-            for c in denorm_chars:
-                url = "{}://netloc{}false.netloc/path".format(scheme, c)
-                with self.subTest(url=url, char='{:04X}'.format(ord(c))):
-                    with self.assertRaises(ValueError):
-                        urllib.parse.urlsplit(url)
+            for netloc in ["netloc{}false.netloc", "n{}user@netloc"]:
+                for c in denorm_chars:
+                    url = "{}://{}/path".format(scheme, netloc.format(c))
+                    with self.subTest(url=url, char='{:04X}'.format(ord(c))):
+                        with self.assertRaises(ValueError):
+                            urllib.parse.urlsplit(url)
 
 class Utility_Tests(unittest.TestCase):
     """Testcase to test the various utility functions in the urllib."""
