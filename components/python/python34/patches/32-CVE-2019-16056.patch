Fixes CVE-2019-16056.
Desc:
  An issue was discovered in Python through 2.7.16, 3.x through 3.5.7, 3.6.x
  through 3.6.9, and 3.7.x through 3.7.4. The email module wrongly parses
  email addresses that contain multiple @ characters. An application that
  uses the email module and implements some kind of checks on the From/To
  headers of a message could be tricked into accepting an email address that
  should be denied. An attack may be the same as in CVE-2019-11340; however,
  this CVE applies to Python more generally.

Upstream bug: https://bugs.python.org/issue34155

Upstream commit:
https://github.com/python/cpython/commit/8cb65d1381b027f0b09ee36bfed7f35bb4dec9a9

--- Python-3.4.10/Lib/email/_header_value_parser.py
+++ Python-3.4.10/Lib/email/_header_value_parser.py
@@ -1963,6 +1963,8 @@ def get_domain(value):
         token, value = get_dot_atom(value)
     except errors.HeaderParseError:
         token, value = get_atom(value)
+    if value and value[0] == '@':
+        raise errors.HeaderParseError('Invalid Domain')
     if leader is not None:
         token[:0] = [leader]
     domain.append(token)
--- Python-3.4.10/Lib/email/_parseaddr.py
+++ Python-3.4.10/Lib/email/_parseaddr.py
@@ -379,7 +379,12 @@ class AddrlistClass:
         aslist.append('@')
         self.pos += 1
         self.gotonext()
-        return EMPTYSTRING.join(aslist) + self.getdomain()
+        domain = self.getdomain()
+        if not domain:
+            # Invalid domain, return an empty address instead of returning a
+            # local part to denote failed parsing.
+            return EMPTYSTRING
+        return EMPTYSTRING.join(aslist) + domain
 
     def getdomain(self):
         """Get the complete domain name from an address."""
@@ -394,6 +399,10 @@ class AddrlistClass:
             elif self.field[self.pos] == '.':
                 self.pos += 1
                 sdlist.append('.')
+            elif self.field[self.pos] == '@':
+                # bpo-34155: Don't parse domains with two `@` like
+                # `a@malicious.org@important.com`.
+                return EMPTYSTRING
             elif self.field[self.pos] in self.atomends:
                 break
             else:
--- Python-3.4.10/Lib/test/test_email/test__header_value_parser.py
+++ Python-3.4.10/Lib/test/test_email/test__header_value_parser.py
@@ -1418,6 +1418,16 @@ class TestParser(TestParserMixin, TestEm
         self.assertEqual(addr_spec.domain, 'example.com')
         self.assertEqual(addr_spec.addr_spec, 'star.a.star@example.com')
 
+    def test_get_addr_spec_multiple_domains(self):
+        with self.assertRaises(errors.HeaderParseError):
+            parser.get_addr_spec('star@a.star@example.com')
+
+        with self.assertRaises(errors.HeaderParseError):
+            parser.get_addr_spec('star@a@example.com')
+
+        with self.assertRaises(errors.HeaderParseError):
+            parser.get_addr_spec('star@172.17.0.1@example.com')
+
     # get_obs_route
 
     def test_get_obs_route_simple(self):
--- Python-3.4.10/Lib/test/test_email/test_email.py
+++ Python-3.4.10/Lib/test/test_email/test_email.py
@@ -2984,6 +2984,20 @@ class TestMiscellaneous(TestEmailBase):
         self.assertEqual(utils.parseaddr('<>'), ('', ''))
         self.assertEqual(utils.formataddr(utils.parseaddr('<>')), '')
 
+    def test_parseaddr_multiple_domains(self):
+        self.assertEqual(
+            utils.parseaddr('a@b@c'),
+            ('', '')
+        )
+        self.assertEqual(
+            utils.parseaddr('a@b.c@c'),
+            ('', '')
+        )
+        self.assertEqual(
+            utils.parseaddr('a@172.17.0.1@c'),
+            ('', '')
+        )
+
     def test_noquote_dump(self):
         self.assertEqual(
             utils.formataddr(('A Silly Person', 'person@dom.ain')),
