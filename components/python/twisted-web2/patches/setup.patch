Recently introduced Twisted 18.9 has removed twisted.python.dist, which was
used to install python plugins. This patch reintroduces those parts necessary
for correct build.

--- TwistedWeb2-8.1.0/setup.py
+++ TwistedWeb2-8.1.0/setup.py
@@ -1,14 +1,182 @@
-import sys
+import fnmatch
+import os
+
+from distutils import core
 
 try:
-    from twisted.python import dist
+    pass
 except ImportError:
     raise SystemExit("twisted.python.dist module not found.  Make sure you "
                      "have installed the Twisted core package before "
                      "attempting to install any other Twisted projects.")
 
+
+def setup(**kw):
+    """
+    An alternative to distutils' setup() which is specially designed
+    for Twisted subprojects.
+
+    Pass twisted_subproject=projname if you want package and data
+    files to automatically be found for you.
+
+    @param conditionalExtensions: Extensions to optionally build.
+    @type conditionalExtensions: C{list} of L{ConditionalExtension}
+    """
+    return core.setup(**get_setup_args(**kw))
+
+def get_setup_args(**kw):
+    if 'twisted_subproject' in kw:
+        if 'twisted' not in os.listdir('.'):
+            raise RuntimeError("Sorry, you need to run setup.py from the "
+                               "toplevel source directory.")
+        projname = kw['twisted_subproject']
+        projdir = os.path.join('twisted', projname)
+
+        kw['packages'] = getPackages(projdir, parent='twisted')
+        kw['version'] = getVersion(projname)
+
+        plugin = "twisted/plugins/twisted_" + projname + ".py"
+        if os.path.exists(plugin):
+            kw.setdefault('py_modules', []).append(
+                plugin.replace("/", ".")[:-3])
+
+        kw['data_files'] = getDataFiles(projdir, parent='twisted')
+
+        del kw['twisted_subproject']
+
+    return kw
+
+def getVersion(proj, base="twisted"):
+    """
+    Extract the version number for a given project.
+
+    @param proj: the name of the project. Examples are "core",
+    "conch", "words", "mail".
+
+    @rtype: str
+    @returns: The version number of the project, as a string like
+    "2.0.0".
+    """
+    if proj == 'core':
+        vfile = os.path.join(base, '_version.py')
+    else:
+        vfile = os.path.join(base, proj, '_version.py')
+    ns = {'__name__': 'Nothing to see here'}
+    execfile(vfile, ns)
+    return ns['version'].base()
+
+
+# Names that are exluded from globbing results:
+EXCLUDE_NAMES = ["{arch}", "CVS", ".cvsignore", "_darcs",
+                 "RCS", "SCCS", ".svn"]
+EXCLUDE_PATTERNS = ["*.py[cdo]", "*.s[ol]", ".#*", "*~", "*.py"]
+
+def _filterNames(names):
+    """Given a list of file names, return those names that should be copied.
+    """
+    names = [n for n in names
+             if n not in EXCLUDE_NAMES]
+    # This is needed when building a distro from a working
+    # copy (likely a checkout) rather than a pristine export:
+    for pattern in EXCLUDE_PATTERNS:
+        names = [n for n in names
+                 if (not fnmatch.fnmatch(n, pattern))
+                 and (not n.endswith('.py'))]
+    return names
+
+def relativeTo(base, relativee):
+    """
+    Gets 'relativee' relative to 'basepath'.
+
+    i.e.,
+
+    >>> relativeTo('/home/', '/home/radix/')
+    'radix'
+    >>> relativeTo('.', '/home/radix/Projects/Twisted') # curdir is /home/radix
+    'Projects/Twisted'
+
+    The 'relativee' must be a child of 'basepath'.
+    """
+    basepath = os.path.abspath(base)
+    relativee = os.path.abspath(relativee)
+    if relativee.startswith(basepath):
+        relative = relativee[len(basepath):]
+        if relative.startswith(os.sep):
+            relative = relative[1:]
+        return os.path.join(base, relative)
+    raise ValueError("%s is not a subpath of %s" % (relativee, basepath))
+
+
+def getDataFiles(dname, ignore=None, parent=None):
+    """
+    Get all the data files that should be included in this distutils Project.
+
+    'dname' should be the path to the package that you're distributing.
+
+    'ignore' is a list of sub-packages to ignore.  This facilitates
+    disparate package hierarchies.  That's a fancy way of saying that
+    the 'twisted' package doesn't want to include the 'twisted.conch'
+    package, so it will pass ['conch'] as the value.
+
+    'parent' is necessary if you're distributing a subpackage like
+    twisted.conch.  'dname' should point to 'twisted/conch' and 'parent'
+    should point to 'twisted'.  This ensures that your data_files are
+    generated correctly, only using relative paths for the first element
+    of the tuple ('twisted/conch/*').
+    The default 'parent' is the current working directory.
+    """
+    parent = parent or "."
+    ignore = ignore or []
+    result = []
+    for directory, subdirectories, filenames in os.walk(dname):
+        resultfiles = []
+        for exname in EXCLUDE_NAMES:
+            if exname in subdirectories:
+                subdirectories.remove(exname)
+        for ig in ignore:
+            if ig in subdirectories:
+                subdirectories.remove(ig)
+        for filename in _filterNames(filenames):
+            resultfiles.append(filename)
+        if resultfiles:
+            result.append((relativeTo(parent, directory),
+                           [relativeTo(parent,
+                                       os.path.join(directory, filename))
+                            for filename in resultfiles]))
+    return result
+
+def getPackages(dname, pkgname=None, results=None, ignore=None, parent=None):
+    """
+    Get all packages which are under dname. This is necessary for
+    Python 2.2's distutils. Pretty similar arguments to getDataFiles,
+    including 'parent'.
+    """
+    parent = parent or ""
+    prefix = []
+    if parent:
+        prefix = [parent]
+    bname = os.path.basename(dname)
+    ignore = ignore or []
+    if bname in ignore:
+        return []
+    if results is None:
+        results = []
+    if pkgname is None:
+        pkgname = []
+    subfiles = os.listdir(dname)
+    abssubfiles = [os.path.join(dname, x) for x in subfiles]
+    if '__init__.py' in subfiles:
+        results.append(prefix + pkgname + [bname])
+        for subdir in filter(os.path.isdir, abssubfiles):
+            getPackages(subdir, pkgname=pkgname + [bname],
+                        results=results, ignore=ignore,
+                        parent=parent)
+    res = ['.'.join(result) for result in results]
+    return res
+
+
 if __name__ == '__main__':
-    dist.setup(
+    setup(
         twisted_subproject="web2",
         # metadata
         name="Twisted Web2",
