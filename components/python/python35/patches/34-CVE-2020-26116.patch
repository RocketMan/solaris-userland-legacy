Fixes CVE-2020-26116.
Desc:
  http.client in Python 3.x before 3.5.10, 3.6.x before 3.6.12, 3.7.x before
  3.7.9, and 3.8.x before 3.8.5 allows CRLF injection if the attacker controls
  the HTTP request method, as demonstrated by inserting CR and LF control
  characters in the first argument of HTTPConnection.request.

Upstream bug: https://bugs.python.org/issue39603

Upstream commit:
https://github.com/python/cpython/commit/524b8de630036a29ca340bc2ae6fd6dc7dda8f40

--- Python-3.5.9/Lib/http/client.py
+++ Python-3.5.9/Lib/http/client.py
@@ -151,6 +151,10 @@
 #  _is_allowed_url_pchars_re = re.compile(r"^[/!$&'()*+,;=:@%a-zA-Z0-9._~-]+$")
 # We are more lenient for assumed real world compatibility purposes.
 
+# These characters are not allowed within HTTP method names
+# to prevent http header injection.
+_contains_disallowed_method_pchar_re = re.compile('[\x00-\x1f]')
+
 # We always set the Content-Length header for these methods because some
 # servers will otherwise respond with a 411
 _METHODS_EXPECTING_BODY = {'PATCH', 'POST', 'PUT'}
@@ -986,6 +990,8 @@ def putrequest(self, method, url, skip_host=False,
         else:
             raise CannotSendRequest(self.__state)
 
+        self._validate_method(method)
+
         # Save the method for use later in the response phase
         self._method = method
 
@@ -1076,6 +1082,16 @@ def _encode_request(self, request):
         # ASCII also helps prevent CVE-2019-9740.
         return request.encode('ascii')
 
+    def _validate_method(self, method):
+        """Validate a method name for putrequest."""
+        # prevent http header injection
+        match = _contains_disallowed_method_pchar_re.search(method)
+        if match:
+            raise ValueError(
+                    "method can't contain control characters. %r "
+                    "(found at least %r)"
+                    % (method, match.group()))
+
     def _validate_path(self, url):
         """Validate a url for putrequest."""
         # Prevent CVE-2019-9740.
--- Python-3.5.9/Lib/test/test_httplib.py
+++ Python-3.5.9/Lib/test/test_httplib.py
@@ -344,6 +344,28 @@ def test_invalid_headers(self):
                     conn.putheader(name, value)
 
 
+class HttpMethodTests(TestCase):
+    def test_invalid_method_names(self):
+        methods = (
+            'GET\r',
+            'POST\n',
+            'PUT\n\r',
+            'POST\nValue',
+            'POST\nHOST:abc',
+            'GET\nrHost:abc\n',
+            'POST\rRemainder:\r',
+            'GET\rHOST:\n',
+            '\nPUT'
+        )
+
+        for method in methods:
+            with self.assertRaisesRegex(
+                    ValueError, "method can't contain control characters"):
+                conn = client.HTTPConnection('example.com')
+                conn.sock = FakeSocket(None)
+                conn.request(method=method, url="/")
+
+
 class BasicTest(TestCase):
     def test_status_lines(self):
         # Test HTTP status lines
@@ -1783,8 +1805,8 @@ def test_tunnel_debuglog(self):
 
 @support.reap_threads
 def test_main(verbose=None):
-    support.run_unittest(HeaderTests, OfflineTest, BasicTest, TimeoutTest,
-                         PersistenceTest,
+    support.run_unittest(HeaderTests, OfflineTest, HttpMethodTests,
+                         BasicTest, TimeoutTest, PersistenceTest,
                          HTTPSTest, RequestBodyTest, SourceAddressTest,
                          HTTPResponseTest, ExtendedReadTest,
                          ExtendedReadTestChunked, TunnelTests)
