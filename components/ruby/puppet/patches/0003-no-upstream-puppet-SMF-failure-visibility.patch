From 6894d7edb0c62b4d2daf08968ad934bd9a474b52 Mon Sep 17 00:00:00 2001
From: Shawn Ferry <sferry@gmail.com>
Date: Mon, 17 Jul 2017 14:47:36 -0400
Subject: [PATCH 3/5] (no upstream) puppet SMF failure visibility

24680838 puppet agent failures should be visible to administrator via
    SMF interfaces
26444488 puppet agent/master smf integration is noisy

    Patch could be submitted but is unlikely to be accepted by upstream.
    The default behavior is as expected by Puppet.

--- puppet-7.21.0/lib/puppet/defaults.rb
+++ puppet-7.21.0/lib/puppet/defaults.rb
@@ -187,6 +187,12 @@ module Puppet
         into one message associated with the class.
         ",
     },
+    :degrade_smf_on_error => {
+        :default  => true,
+        :type     => :boolean,
+        :desc     => "Whether the SMF service for puppet should be degraded when an error
+          is logged.",
+    },
     :strict => {
       :default    => :warning,
       :type       => :symbolic_enum,
--- puppet-7.21.0/lib/puppet/util/log.rb
+++ puppet-7.21.0/lib/puppet/util/log.rb
@@ -15,6 +15,7 @@ class Puppet::Util::Log
 
   @levels = [:debug,:info,:notice,:warning,:err,:alert,:emerg,:crit]
   @loglevel = 2
+  @degraded = false
 
   @desttypes = {}
 
@@ -51,6 +52,19 @@ class Puppet::Util::Log
   # Reset log to basics.  Basically just flushes and closes files and
   # undefs other objects.
   def Log.close(destination)
+    if Puppet[:degrade_smf_on_error]
+      if !@degraded
+        # Clear the appropriate service state
+        # The SMF team reports this as a near zero cost operation
+        # Therefore we just send the clear every time instead of checking first
+        if Puppet.run_mode.agent?
+          system '/usr/sbin/svcadm clear puppet:agent > /dev/null 2>&1'
+        elsif Puppet.run_mode.master?
+          system '/usr/sbin/svcadm clear puppet:master > /dev/null 2>&1'
+        end
+      end
+    end
+
     if @destinations.include?(destination)
       @destinations[destination].flush if @destinations[destination].respond_to?(:flush)
       @destinations[destination].close if @destinations[destination].respond_to?(:close)
@@ -189,6 +203,18 @@ class Puppet::Util::Log
   # a potential for a loop here, if the machine somehow gets the destination set as
   # itself.
   def Log.newmessage(msg)
+    if Puppet[:degrade_smf_on_error]
+      if [:err,:alert,:emerg,:crit].include? msg.level and !@degraded
+        # Mark the appropriate puppet service as degraded
+        @degraded = true
+        if Puppet.run_mode.agent?
+          system '/usr/sbin/svcadm mark -s degraded puppet:agent'
+        elsif Puppet.run_mode.master?
+          system '/usr/sbin/svcadm mark -s degraded puppet:master'
+        end
+      end
+    end
+
     return if @levels.index(msg.level) < @loglevel
 
     msg.message = coerce_string(msg.message)
--- puppet-7.21.0/spec/unit/confine/variable_spec.rb
+++ puppet-7.21.0/spec/unit/confine/variable_spec.rb
@@ -26,6 +26,7 @@
     end
 
     it "should use settings if the variable name is a valid setting" do
+      expect(Puppet.settings).to receive(:value?).with(:degrade_smf_on_error).and_return(nil)
       expect(Puppet.settings).to receive(:valid?).with(:myvar).and_return(true)
       expect(Puppet.settings).to receive(:value).with(:myvar).and_return("foo")
       @confine.valid?
--- puppet-7.21.0/spec/unit/util/logging_spec.rb
+++ puppet-7.21.0/spec/unit/util/logging_spec.rb
@@ -191,6 +191,7 @@
 
   describe "when sending a deprecation warning" do
     it "does not log a message when deprecation warnings are disabled" do
+      expect(Puppet).to receive(:[]).with(:degrade_smf_on_error).and_return(nil)
       expect(Puppet).to receive(:[]).with(:disable_warnings).and_return(%w[deprecations])
       expect(@logger).not_to receive(:warning)
       @logger.deprecation_warning 'foo'
