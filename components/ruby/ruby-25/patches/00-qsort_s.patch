Ruby requires a GNU compatible qsort_r() function, and util.c contains
code to provide it if the platform does not provide one. This code has
2 problems:

    (1)	If qsort_s() is present, it will attempt to use that, but, it
	expects the Microsoft version of qsort_s(), which has a different
	argument order than C11 compliant systems. That results in miniruby
	segfaulting during the compilation.

    (2) It does not expect a platform to provide both a GNU compliant
	qsort_r() and qsort_s(), and it attempts to use qsort_s()
	even though doing nothing would be the correct response.

Newer versions of Solaris 11.4 provide a GNU compatible qsort_r().
This patch updates util.c to build properly with or without it.

This is related to a known issue upstream:
    https://bugs.ruby-lang.org/issues/15091.

--- ruby-2.5.3/util.c	2018-11-05 01:24:29.551519992 +0000
+++ ruby-2.5.3/util.c	2018-11-05 01:24:18.755616043 +0000
@@ -195,12 +195,30 @@
 #   define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
 #endif
 
+#ifndef HAVE_GNU_QSORT_R
 #if !defined HAVE_BSD_QSORT_R && defined HAVE_QSORT_S
 # define qsort_r(base, nel, size, arg, cmp) qsort_s(base, nel, size, cmp, arg)
 # define cmp_bsd_qsort cmp_ms_qsort
 # define HAVE_BSD_QSORT_R 1
 #endif
-#if defined HAVE_BSD_QSORT_R
+
+#if defined HAVE_QSORT_S
+/* this is a Solaris specific part */
+typedef int (cmpfunc_t)(const void*, const void*, void*);
+
+void
+ruby_qsort(void* base, const size_t nel, const size_t size, cmpfunc_t *cmp, void *d)
+{
+    if (!nel || !size) return;  /* nothing to sort */
+
+    /* get rid of runtime-constraints handler for MT-safeness */
+    if (!base || !cmp) return;
+    if (nel > RSIZE_MAX || size > RSIZE_MAX) return;
+
+    qsort_s(base, nel, size, cmp, d);
+}
+
+#elif defined HAVE_BSD_QSORT_R
 typedef int (cmpfunc_t)(const void*, const void*, void*);
 
 struct bsd_qsort_r_args {
@@ -223,7 +241,7 @@
     args.arg = d;
     qsort_r(base, nel, size, &args, cmp_bsd_qsort);
 }
-#elif !defined HAVE_GNU_QSORT_R
+#else  /* !HAVE_BSD_QSORT_R */
 /* mm.c */
 
 #define mmtype long
@@ -490,7 +508,8 @@
     else goto nxt;                         /* need not to sort both sides */
   }
 }
-#endif /* HAVE_GNU_QSORT_R */
+#endif	/* !HAVE_BSD_QSORT_R */
+#endif	/* !HAVE_GNU_QSORT_R */
 
 char *
 ruby_strdup(const char *str)
