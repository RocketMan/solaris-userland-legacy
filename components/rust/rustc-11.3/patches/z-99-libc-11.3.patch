--- rustc-1.64.0-src/vendor/rustix/src/imp/libc/offset.rs.~1~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/imp/libc/offset.rs	2022-11-28 18:14:08.642990928 +0000
@@ -176,6 +176,7 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
 )))]
 pub(super) use c::posix_fadvise as libc_posix_fadvise;
 #[cfg(any(
@@ -292,6 +293,7 @@
     target_os = "linux",
     target_os = "macos",
     target_os = "redox",
+    target_os = "solaris",
 )))]
 pub(super) use c::{preadv as libc_preadv, pwritev as libc_pwritev};
 #[cfg(target_os = "android")]
@@ -335,6 +337,7 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
 )))]
 pub(super) use c::posix_fallocate as libc_posix_fallocate;
 #[cfg(any(target_os = "l4re"))]
@@ -348,6 +351,7 @@
     target_os = "l4re",
     target_os = "netbsd",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))]
 pub(super) use {c::fstatfs as libc_fstatfs, c::statfs as libc_statfs};
--- rustc-1.64.0-src/vendor/rustix/src/imp/libc/fs/dir.rs~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/imp/libc/fs/dir.rs	2022-11-28 18:11:49.443278649 +0000
@@ -1,6 +1,6 @@
 use super::super::c;
 use super::super::conv::owned_fd;
-#[cfg(not(target_os = "illumos"))]
+#[cfg(not(any(target_os = "illumos", target_os = "solaris")))]
 use super::types::FileType;
 use crate::fd::{AsFd, BorrowedFd};
 use crate::ffi::CStr;
@@ -11,6 +11,7 @@
     target_os = "illumos",
     target_os = "netbsd",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))] // not implemented in libc for netbsd yet
 use crate::fs::{fstatfs, StatFs};
@@ -132,6 +133,7 @@
         target_os = "illumos",
         target_os = "netbsd",
         target_os = "redox",
+        target_os = "solaris",
         target_os = "wasi",
     )))] // not implemented in libc for netbsd yet
     #[inline]
@@ -151,7 +153,7 @@
 // struct, as the name is NUL-terminated and memory may not be allocated for
 // the full extent of the struct. Copy the fields one at a time.
 unsafe fn read_dirent(input: &libc_dirent) -> libc_dirent {
-    #[cfg(not(target_os = "illumos"))]
+    #[cfg(not(any(target_os = "illumos", target_os = "solaris")))]
     let d_type = input.d_type;
 
     #[cfg(not(any(
@@ -195,7 +197,7 @@
     // whole `d_name` field, which may not be entirely allocated.
     #[cfg_attr(target_os = "wasi", allow(unused_mut))]
     let mut dirent = libc_dirent {
-        #[cfg(not(target_os = "illumos"))]
+        #[cfg(not(any(target_os = "illumos", target_os = "solaris")))]
         d_type,
         #[cfg(not(any(
             target_os = "dragonfly",
@@ -306,7 +308,7 @@
     }
 
     /// Returns the type of this directory entry.
-    #[cfg(not(target_os = "illumos"))]
+    #[cfg(not(any(target_os = "illumos", target_os = "solaris")))]
     #[inline]
     pub fn file_type(&self) -> FileType {
         FileType::from_dirent_d_type(self.dirent.d_type)
--- rustc-1.64.0-src/vendor/rustix/src/imp/libc/fs/makedev.rs~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/imp/libc/fs/makedev.rs	2022-11-28 18:18:26.980566888 +0000
@@ -2,7 +2,7 @@
 use super::super::c;
 use crate::fs::Dev;
 
-#[cfg(not(any(target_os = "android", target_os = "emscripten")))]
+#[cfg(not(any(target_os = "android", target_os = "emscripten", target_os = "solaris")))]
 #[inline]
 pub(crate) fn makedev(maj: u32, min: u32) -> Dev {
     unsafe { c::makedev(maj, min) }
@@ -33,7 +33,7 @@
     Dev::from(unsafe { c::makedev(maj, min) })
 }
 
-#[cfg(not(any(target_os = "android", target_os = "emscripten")))]
+#[cfg(not(any(target_os = "android", target_os = "emscripten", target_os = "solaris")))]
 #[inline]
 pub(crate) fn major(dev: Dev) -> u32 {
     unsafe { c::major(dev) }
@@ -61,7 +61,7 @@
     unsafe { c::major(dev as u32) }
 }
 
-#[cfg(not(any(target_os = "android", target_os = "emscripten")))]
+#[cfg(not(any(target_os = "android", target_os = "emscripten", target_os = "solaris")))]
 #[inline]
 pub(crate) fn minor(dev: Dev) -> u32 {
     unsafe { c::minor(dev) }
--- rustc-1.64.0-src/vendor/rustix/src/imp/libc/fs/syscalls.rs.~1~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/imp/libc/fs/syscalls.rs	2022-11-29 11:53:22.461744246 +0000
@@ -16,6 +16,7 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
 )))]
 use super::super::offset::libc_posix_fadvise;
 #[cfg(not(any(
@@ -29,6 +30,7 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
 )))]
 use super::super::offset::libc_posix_fallocate;
 use super::super::offset::{libc_fstat, libc_fstatat, libc_ftruncate, libc_lseek, libc_off_t};
@@ -36,6 +38,7 @@
     target_os = "illumos",
     target_os = "netbsd",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))]
 use super::super::offset::{libc_fstatfs, libc_statfs};
@@ -60,6 +63,7 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
 )))]
 use crate::fs::Advice;
 #[cfg(not(any(
@@ -68,6 +72,7 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
 )))]
 use crate::fs::FallocateFlags;
 #[cfg(not(target_os = "wasi"))]
@@ -85,6 +90,7 @@
     target_os = "illumos",
     target_os = "netbsd",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))]
 // not implemented in libc for netbsd yet
@@ -199,6 +205,7 @@
     target_os = "illumos",
     target_os = "netbsd",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))]
 #[inline]
@@ -390,7 +397,7 @@
     }
 }
 
-#[cfg(not(any(target_os = "emscripten", target_os = "illumos", target_os = "redox")))]
+#[cfg(not(any(target_os = "emscripten", target_os = "illumos", target_os = "redox", target_os = "solaris")))]
 pub(crate) fn accessat(
     dirfd: BorrowedFd<'_>,
     path: &CStr,
@@ -763,6 +770,7 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
 )))]
 pub(crate) fn fadvise(fd: BorrowedFd<'_>, offset: u64, len: u64, advice: Advice) -> io::Result<()> {
     let offset = offset as i64;
@@ -946,6 +954,7 @@
     target_os = "illumos",
     target_os = "netbsd",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))] // not implemented in libc for netbsd yet
 pub(crate) fn fstatfs(fd: BorrowedFd<'_>) -> io::Result<StatFs> {
@@ -1065,6 +1074,7 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
 )))]
 pub(crate) fn fallocate(
     fd: BorrowedFd<'_>,
--- rustc-1.64.0-src/vendor/rustix/src/imp/libc/fs/types.rs~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/imp/libc/fs/types.rs	2022-11-28 14:43:40.544147390 +0000
@@ -438,7 +438,7 @@
     }
 
     /// Construct a `FileType` from the `d_type` field of a `c::dirent`.
-    #[cfg(not(any(target_os = "illumos", target_os = "redox")))]
+    #[cfg(not(any(target_os = "illumos", target_os = "redox", target_os = "solaris")))]
     pub(crate) const fn from_dirent_d_type(d_type: u8) -> Self {
         match d_type {
             c::DT_REG => Self::RegularFile,
@@ -467,6 +467,7 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
 )))]
 #[derive(Debug, Copy, Clone, Eq, PartialEq)]
 #[repr(u32)]
@@ -685,6 +686,7 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
 )))]
 bitflags! {
     /// `FALLOC_FL_*` constants for use with [`fallocate`].
@@ -869,6 +871,7 @@
     target_os = "l4re",
     target_os = "netbsd",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))]
 #[allow(clippy::module_name_repetitions)]
--- rustc-1.64.0-src/vendor/rustix/src/imp/libc/io/errno.rs~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/imp/libc/io/errno.rs	2022-11-28 14:42:02.102948446 +0000
@@ -216,6 +216,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
         target_os = "wasi",
     )))]
     pub const DOTDOT: Self = Self(c::EDOTDOT);
@@ -257,6 +258,7 @@
         target_os = "netbsd",
         target_os = "openbsd",
         target_os = "redox",
+        target_os = "solaris",
         target_os = "wasi",
     )))]
     pub const HWPOISON: Self = Self(c::EHWPOISON);
@@ -301,6 +303,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
         target_os = "wasi",
     )))]
     pub const ISNAM: Self = Self(c::EISNAM);
@@ -314,6 +317,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
         target_os = "wasi",
     )))]
     pub const KEYEXPIRED: Self = Self(c::EKEYEXPIRED);
@@ -327,6 +331,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
         target_os = "wasi",
     )))]
     pub const KEYREJECTED: Self = Self(c::EKEYREJECTED);
@@ -340,6 +345,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
         target_os = "wasi",
     )))]
     pub const KEYREVOKED: Self = Self(c::EKEYREVOKED);
@@ -475,6 +481,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
         target_os = "wasi",
     )))]
     pub const MEDIUMTYPE: Self = Self(c::EMEDIUMTYPE);
@@ -500,6 +507,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
         target_os = "wasi",
     )))]
     pub const NAVAIL: Self = Self(c::ENAVAIL);
@@ -586,6 +594,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
         target_os = "wasi",
     )))]
     pub const NOKEY: Self = Self(c::ENOKEY);
@@ -605,6 +614,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
         target_os = "wasi",
     )))]
     pub const NOMEDIUM: Self = Self(c::ENOMEDIUM);
@@ -690,6 +700,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
         target_os = "wasi",
     )))]
     pub const NOTNAM: Self = Self(c::ENOTNAM);
@@ -817,6 +828,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
         target_os = "wasi",
     )))]
     pub const REMOTEIO: Self = Self(c::EREMOTEIO);
@@ -844,6 +856,7 @@
         target_os = "netbsd",
         target_os = "openbsd",
         target_os = "redox",
+        target_os = "solaris",
         target_os = "wasi",
     )))]
     pub const RFKILL: Self = Self(c::ERFKILL);
@@ -929,6 +942,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
         target_os = "wasi",
     )))]
     pub const UCLEAN: Self = Self(c::EUCLEAN);
--- rustc-1.64.0-src/vendor/rustix/src/imp/libc/io/syscalls.rs.~1~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/imp/libc/io/syscalls.rs	2022-11-28 18:47:55.381401898 +0000
@@ -7,14 +7,14 @@
     borrowed_fd, ret, ret_c_int, ret_discarded_fd, ret_owned_fd, ret_ssize_t,
 };
 use super::super::offset::{libc_pread, libc_pwrite};
-#[cfg(not(target_os = "redox"))]
+#[cfg(not(any(target_os = "redox", target_os = "solaris")))]
 use super::super::offset::{libc_preadv, libc_pwritev};
 #[cfg(all(target_os = "linux", target_env = "gnu"))]
 use super::super::offset::{libc_preadv2, libc_pwritev2};
 use crate::fd::{AsFd, BorrowedFd, RawFd};
 #[cfg(not(target_os = "wasi"))]
 use crate::io::DupFlags;
-#[cfg(not(any(target_os = "ios", target_os = "macos", target_os = "wasi")))]
+#[cfg(not(any(target_os = "ios", target_os = "macos", target_os = "wasi", target_os = "solaris")))]
 use crate::io::PipeFlags;
 use crate::io::{self, IoSlice, IoSliceMut, OwnedFd, PollFd};
 #[cfg(any(target_os = "android", target_os = "linux"))]
@@ -103,7 +103,7 @@
     Ok(nwritten as usize)
 }
 
-#[cfg(not(target_os = "redox"))]
+#[cfg(not(any(target_os = "redox", target_os = "solaris")))]
 pub(crate) fn preadv(
     fd: BorrowedFd<'_>,
     bufs: &mut [IoSliceMut],
@@ -122,7 +122,7 @@
     Ok(nread as usize)
 }
 
-#[cfg(not(target_os = "redox"))]
+#[cfg(not(any(target_os = "redox", target_os = "solaris")))]
 pub(crate) fn pwritev(fd: BorrowedFd<'_>, bufs: &[IoSlice], offset: u64) -> io::Result<usize> {
     // Silently cast; we'll get `EINVAL` if the value is negative.
     let offset = offset as i64;
@@ -382,6 +382,7 @@
     target_os = "ios",
     target_os = "macos",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))]
 pub(crate) fn dup3(fd: BorrowedFd<'_>, new: &mut OwnedFd, flags: DupFlags) -> io::Result<()> {
@@ -400,6 +401,7 @@
     target_os = "ios",
     target_os = "macos",
     target_os = "redox",
+    target_os = "solaris",
 ))]
 pub(crate) fn dup3(fd: BorrowedFd<'_>, new: &mut OwnedFd, _flags: DupFlags) -> io::Result<()> {
     // Android 5.0 has `dup3`, but libc doesn't have bindings. Emulate it
@@ -434,7 +436,7 @@
     }
 }
 
-#[cfg(not(any(target_os = "ios", target_os = "macos", target_os = "wasi")))]
+#[cfg(not(any(target_os = "ios", target_os = "macos", target_os = "wasi", target_os = "solaris")))]
 pub(crate) fn pipe_with(flags: PipeFlags) -> io::Result<(OwnedFd, OwnedFd)> {
     unsafe {
         let mut result = MaybeUninit::<[OwnedFd; 2]>::uninit();
--- rustc-1.64.0-src/vendor/rustix/src/imp/libc/io/types.rs~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/imp/libc/io/types.rs	2022-11-28 14:36:32.709068076 +0000
@@ -53,7 +53,7 @@
         /// `O_CLOEXEC`
         const CLOEXEC = c::O_CLOEXEC;
         /// `O_DIRECT`
-        #[cfg(not(any(target_os = "illumos", target_os = "openbsd", target_os = "redox")))]
+        #[cfg(not(any(target_os = "illumos", target_os = "openbsd", target_os = "redox", target_os = "solaris")))]
         const DIRECT = c::O_DIRECT;
         /// `O_NONBLOCK`
         const NONBLOCK = c::O_NONBLOCK;
@@ -76,7 +76,7 @@
 }
 
 /// `PIPE_BUF`—The maximum size of a write to a pipe guaranteed to be atomic.
-#[cfg(not(any(target_os = "illumos", target_os = "redox", target_os = "wasi")))]
+#[cfg(not(any(target_os = "illumos", target_os = "redox", target_os = "solaris", target_os = "wasi")))]
 pub const PIPE_BUF: usize = c::PIPE_BUF;
 
 #[cfg(not(any(windows, target_os = "redox")))]
--- rustc-1.64.0-src/vendor/rustix/src/imp/libc/process/types.rs~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/imp/libc/process/types.rs	2022-11-28 14:28:28.461668155 +0000
@@ -56,15 +56,15 @@
     /// `RLIMIT_CORE`
     Core = c::RLIMIT_CORE as c::c_int,
     /// `RLIMIT_RSS`
-    #[cfg(not(any(target_os = "illumos", target_os = "ios", target_os = "macos")))]
+    #[cfg(not(any(target_os = "illumos", target_os = "ios", target_os = "macos", target_os = "solaris")))]
     Rss = c::RLIMIT_RSS as c::c_int,
     /// `RLIMIT_NPROC`
-    #[cfg(not(target_os = "illumos"))]
+    #[cfg(not(any(target_os = "illumos", target_os = "solaris")))]
     Nproc = c::RLIMIT_NPROC as c::c_int,
     /// `RLIMIT_NOFILE`
     Nofile = c::RLIMIT_NOFILE as c::c_int,
     /// `RLIMIT_MEMLOCK`
-    #[cfg(not(target_os = "illumos"))]
+    #[cfg(not(any(target_os = "illumos", target_os = "solaris")))]
     Memlock = c::RLIMIT_MEMLOCK as c::c_int,
     /// `RLIMIT_AS`
     #[cfg(not(target_os = "openbsd"))]
@@ -78,6 +78,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
     )))]
     Locks = c::RLIMIT_LOCKS as c::c_int,
     /// `RLIMIT_SIGPENDING`
@@ -89,6 +90,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
     )))]
     Sigpending = c::RLIMIT_SIGPENDING as c::c_int,
     /// `RLIMIT_MSGQUEUE`
@@ -100,6 +102,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
     )))]
     Msgqueue = c::RLIMIT_MSGQUEUE as c::c_int,
     /// `RLIMIT_NICE`
@@ -111,6 +114,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
     )))]
     Nice = c::RLIMIT_NICE as c::c_int,
     /// `RLIMIT_RTPRIO`
@@ -122,6 +126,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
     )))]
     Rtprio = c::RLIMIT_RTPRIO as c::c_int,
     /// `RLIMIT_RTTIME`
@@ -135,6 +140,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
     )))]
     Rttime = c::RLIMIT_RTTIME as c::c_int,
 }
@@ -197,6 +203,7 @@
         target_os = "macos",
         target_os = "netbsd",
         target_os = "openbsd",
+        target_os = "solaris",
         all(
             any(target_os = "android", target_os = "linux"),
             any(target_arch = "mips", target_arch = "mips64"),
@@ -274,6 +281,7 @@
                 target_os = "macos",
                 target_os = "netbsd",
                 target_os = "openbsd",
+                target_os = "solaris",
                 all(
                     any(target_os = "android", target_os = "linux"),
                     any(target_arch = "mips", target_arch = "mips64"),
--- rustc-1.64.0-src/vendor/rustix/src/imp/libc/time/types.rs~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/imp/libc/time/types.rs	2022-11-28 14:38:02.867349052 +0000
@@ -132,6 +132,7 @@
         target_os = "netbsd",
         target_os = "openbsd",
         target_os = "redox",
+        target_os = "solaris",
     )))]
     ProcessCPUTime = c::CLOCK_PROCESS_CPUTIME_ID,
 
@@ -141,6 +142,7 @@
         target_os = "netbsd",
         target_os = "openbsd",
         target_os = "redox",
+        target_os = "solaris",
     )))]
     ThreadCPUTime = c::CLOCK_THREAD_CPUTIME_ID,
 
--- rustc-1.64.0-src/vendor/rustix/src/io/mod.rs.~1~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/io/mod.rs	2022-11-28 18:46:46.596887884 +0000
@@ -52,17 +52,18 @@
     windows,
     target_os = "illumos",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))]
 pub use pipe::PIPE_BUF;
-#[cfg(not(any(windows, target_os = "ios", target_os = "macos", target_os = "wasi")))]
+#[cfg(not(any(windows, target_os = "ios", target_os = "macos", target_os = "wasi", target_os = "solaris")))]
 pub use pipe::{pipe_with, PipeFlags};
 pub use poll::{poll, PollFd, PollFlags};
 #[cfg(all(feature = "procfs", any(target_os = "android", target_os = "linux")))]
 pub use procfs::{proc_self_fd, proc_self_fdinfo_fd, proc_self_maps, proc_self_pagemap};
 #[cfg(not(windows))]
 pub use read_write::{pread, pwrite, read, readv, write, writev, IoSlice, IoSliceMut};
-#[cfg(not(any(windows, target_os = "redox")))]
+#[cfg(not(any(windows, target_os = "redox", target_os = "solaris")))]
 pub use read_write::{preadv, pwritev};
 #[cfg(any(target_os = "android", target_os = "linux"))]
 pub use read_write::{preadv2, pwritev2, ReadWriteFlags};
--- rustc-1.64.0-src/vendor/rustix/src/io/pipe.rs.~1~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/io/pipe.rs	2022-11-28 18:34:51.945408245 +0000
@@ -16,6 +16,7 @@
     windows,
     target_os = "illumos",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))]
 pub const PIPE_BUF: usize = imp::io::types::PIPE_BUF;
@@ -45,7 +46,7 @@
 ///  - [Linux]
 ///
 /// [Linux]: https://man7.org/linux/man-pages/man2/pipe2.2.html
-#[cfg(not(any(target_os = "ios", target_os = "macos")))]
+#[cfg(not(any(target_os = "ios", target_os = "macos", target_os = "solaris")))]
 #[inline]
 #[doc(alias = "pipe2")]
 pub fn pipe_with(flags: PipeFlags) -> io::Result<(OwnedFd, OwnedFd)> {
--- rustc-1.64.0-src/vendor/rustix/src/io/read_write.rs~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/io/read_write.rs	2022-11-28 18:23:23.799471072 +0000
@@ -112,7 +112,7 @@
 ///  - [Linux]
 ///
 /// [Linux]: https://man7.org/linux/man-pages/man2/preadv.2.html
-#[cfg(not(target_os = "redox"))]
+#[cfg(not(any(target_os = "redox", target_os = "solaris")))]
 #[inline]
 pub fn preadv<Fd: AsFd>(fd: Fd, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {
     imp::io::syscalls::preadv(fd.as_fd(), bufs, offset)
@@ -125,7 +125,7 @@
 ///  - [Linux]
 ///
 /// [Linux]: https://man7.org/linux/man-pages/man2/pwritev.2.html
-#[cfg(not(target_os = "redox"))]
+#[cfg(not(any(target_os = "redox", target_os = "solaris")))]
 #[inline]
 pub fn pwritev<Fd: AsFd>(fd: Fd, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {
     imp::io::syscalls::pwritev(fd.as_fd(), bufs, offset)
--- rustc-1.64.0-src/vendor/rustix/src/fs/abs.rs~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/fs/abs.rs	2022-11-28 14:49:40.394172159 +0000
@@ -4,6 +4,7 @@
     target_os = "illumos",
     target_os = "netbsd",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))]
 use crate::fs::StatFs;
@@ -11,6 +12,7 @@
     target_os = "illumos",
     target_os = "netbsd",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))]
 use crate::{imp, io, path};
@@ -25,6 +27,7 @@
     target_os = "illumos",
     target_os = "netbsd",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))]
 #[inline]
--- rustc-1.64.0-src/vendor/rustix/src/fs/at.rs~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/fs/at.rs	2022-11-28 18:21:54.113087944 +0000
@@ -6,7 +6,7 @@
 //! [`cwd`]: crate::fs::cwd
 
 use crate::ffi::{CStr, CString};
-#[cfg(not(target_os = "illumos"))]
+#[cfg(not(any(target_os = "illumos", target_os = "solaris")))]
 use crate::fs::Access;
 #[cfg(any(target_os = "ios", target_os = "macos"))]
 use crate::fs::CloneFlags;
@@ -264,7 +264,7 @@
 ///
 /// [POSIX]: https://pubs.opengroup.org/onlinepubs/9699919799/functions/faccessat.html
 /// [Linux]: https://man7.org/linux/man-pages/man2/faccessat.2.html
-#[cfg(not(target_os = "illumos"))]
+#[cfg(not(any(target_os = "illumos", target_os = "solaris")))]
 #[inline]
 #[doc(alias = "faccessat")]
 pub fn accessat<P: path::Arg, Fd: AsFd>(
--- rustc-1.64.0-src/vendor/rustix/src/fs/fd.rs.~1~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/fs/fd.rs	2022-11-28 18:52:22.458947462 +0000
@@ -17,6 +17,7 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
 )))]
 pub use imp::fs::types::FallocateFlags;
 
@@ -26,6 +27,7 @@
     target_os = "illumos",
     target_os = "netbsd",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))]
 pub use imp::fs::types::StatFs;
@@ -154,6 +156,7 @@
     target_os = "illumos",
     target_os = "netbsd",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))] // not implemented in libc for netbsd yet
 #[inline]
@@ -195,6 +198,7 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
 )))] // not implemented in libc for netbsd yet
 #[inline]
 #[doc(alias = "posix_fallocate")]
--- rustc-1.64.0-src/vendor/rustix/src/fs/mod.rs.~1~	2022-09-19 16:35:02.000000000 +0000
+++ rustc-1.64.0-src/vendor/rustix/src/fs/mod.rs	2022-11-28 19:08:26.884037916 +0000
@@ -21,6 +21,7 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
 )))]
 mod fadvise;
 pub(crate) mod fcntl;
@@ -41,6 +42,7 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))]
 mod makedev;
@@ -58,11 +60,12 @@
     target_os = "illumos",
     target_os = "netbsd",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))]
 #[cfg(feature = "fs")]
 pub use abs::statfs;
-#[cfg(not(any(target_os = "illumos", target_os = "redox")))]
+#[cfg(not(any(target_os = "illumos", target_os = "redox", target_os = "solaris")))]
 #[cfg(feature = "fs")]
 pub use at::accessat;
 #[cfg(any(target_os = "ios", target_os = "macos"))]
@@ -115,6 +118,7 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
 )))]
 pub use fadvise::{fadvise, Advice};
 #[cfg(not(target_os = "wasi"))]
@@ -147,15 +151,17 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
 )))]
 pub use fd::{fallocate, FallocateFlags};
 #[cfg(not(target_os = "wasi"))]
 pub use fd::{fchmod, fchown, flock, FlockOperation};
 pub use fd::{fstat, fsync, ftruncate, futimens, is_file_read_write, seek, tell, Stat, Timestamps};
 #[cfg(not(any(
     target_os = "illumos",
     target_os = "netbsd",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))]
 // not implemented in libc for netbsd yet
@@ -174,6 +180,7 @@
     target_os = "netbsd",
     target_os = "openbsd",
     target_os = "redox",
+    target_os = "solaris",
     target_os = "wasi",
 )))]
 pub use makedev::{major, makedev, minor};
