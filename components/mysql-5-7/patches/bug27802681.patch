Author: Tor Didriksen <tor.didriksen@oracle.com>
Date:   Wed Apr 4 11:09:07 2018 +0200

    Bug#27802681 ADD SUPPORT FOR NATIVE GCC ON SOLARIS
    
    In the past we have been using misc gcc compilers on Solaris. These
    compilers are no longer able to build the server, so we switched to
    Oracle Studio. There is now a port of gcc 7 available as a native
    compiler in Solaris, both for Intel and Sparc.
    
    Remove obsolete/wrong cmake code for gcc on Solaris, use:
      /usr/bin/g++ --version
      g++ (GCC) 7.3.0
    which has proper library support on Solaris 11.4
    
    The patch also removes obsolete cmake code for "dual" build where we used to:
    - build the server with a non-native version of gcc
    - build the client libraries with Oracle Studio.
    
    ================
    client/dump/CMakeLists.txt
    
    Remove disabling of mysqlpunp when using Studio compiler. This was
    disabled earlier due to missing features in older versions of Studio.
    
    Remove obsolete cmake code for silencing warnings from Boost. Boost header
    files are now #included as "system" so no warnings are generated.
    
    Remove property RUNTIME_OUTPUT_DIRECTORY for the mysqlpump executable.
    This was used earlier for the "dual" build, building the server with gcc,
    client with Studio.
    ================
    cmake/build_configurations/compiler_options.cmake
    
    Remove obsolete version checks for Studio compiler. Add explicit -std=c++03
    
    ================
    cmake/build_configurations/mysql_release.cmake
    
    Remove obsolete cmake code for dual gcc/Studio build.
    
    ================
    cmake/os/SunOS.cmake
    
    Raise minimum compiler version for both gcc and Studio.
    
    ================
    configure.cmake
    
    Remove obsolete cmake code for supporting older C++ libraries.
    We now only support -std=c++03
    
    Remove obsolete cmake code for supporting non-native gcc compilers.
    
    ================
    scripts/CMakeLists.txt
    
    Remove obsolete cmake code for dual gcc/Studio build.
    
    ================
    unittest/gunit/CMakeLists.txt
    
    Remove obsolete check for unsupported version of Studio.
    

diff --git a/client/dump/CMakeLists.txt b/client/dump/CMakeLists.txt
index a218050..40bc3bb 100644
--- a/client/dump/CMakeLists.txt
+++ b/client/dump/CMakeLists.txt
@@ -13,23 +13,11 @@
 # along with this program; if not, write to the Free Software
 # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 
-# If we are building client-only (-DWITHOUT_SERVER=ON) with Solaris Studio,
-# we skip building the mysqlpump tool. The server, and mysqlpump, will be built
-# using gcc.
-
 INCLUDE_DIRECTORIES(
   ${CMAKE_SOURCE_DIR}/dump
 )
 
-IF (CMAKE_CXX_COMPILER_ID STREQUAL "SunPro")
-  IF (WITHOUT_SERVER)
-    MESSAGE(STATUS "Not building mysqlpump")
-    RETURN()
-  ENDIF()
-ENDIF()
-
-# Prevent Boost from including external precompiled Boost libraries, use
-# threading (not implemented for older Solaris Studio compilers)
+# Prevent Boost from including external precompiled Boost libraries,
 # and turn off unused functionality.
 IF(USING_LOCAL_BOOST)
   ADD_DEFINITIONS(
@@ -143,30 +131,6 @@ ADD_CONVENIENCE_LIBRARY(mysqlpump_lib ${MYSQLPUMP_LIB_SOURCES})
 TARGET_LINK_LIBRARIES(mysqlpump_lib
    client_base ${LZ4_LIBRARY})
 
-# Files that use Boost sources that trigger compilation warnings
-SET(MYSQLPUMP_BOOST_SOURCES
-  abstract_crawler.cc
-  abstract_mysql_chain_element_extension.cc
-  abstract_progress_watcher.cc
-  mysql_chain_element_options.cc
-  mysql_object_reader.cc
-  mysqldump_tool_chain_maker.cc
-  mysqldump_tool_chain_maker_options.cc
-  object_filter.cc
-  object_queue.cc
-  program.cc
-  standard_progress_watcher.cc
-  sql_formatter.cc
-  table.cc
-)
-
-# Boost source has unused local typedefs.
-MY_CHECK_CXX_COMPILER_FLAG("-Wunused-local-typedefs" HAVE_UNUSED_TYPEDEFS)
-IF(HAVE_UNUSED_TYPEDEFS)
-  ADD_COMPILE_FLAGS(${MYSQLPUMP_BOOST_SOURCES}
-    COMPILE_FLAGS "-Wno-unused-local-typedefs")
-ENDIF()
-
 ADD_COMPILE_FLAGS(
   compression_writer.cc
   mysqldump_tool_chain_maker.cc
@@ -181,12 +145,3 @@ IF(USING_SYSTEM_BOOST)
 ENDIF()
 
 SET_TARGET_PROPERTIES(mysqlpump PROPERTIES HAS_CXX TRUE)
-
-# Store the executable in our parent directory.
-# Why? In pushbuild we do 'touch client/mysql*' to prevent rebuild,
-#      in the case where we have a separate build of libmysqlclient.so
-IF (NOT WIN32)
-  SET_TARGET_PROPERTIES(mysqlpump
-    PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/client)
-ENDIF()
-
diff --git a/cmake/build_configurations/compiler_options.cmake b/cmake/build_configurations/compiler_options.cmake
index f607508..17bd5ae 100644
--- a/cmake/build_configurations/compiler_options.cmake
+++ b/cmake/build_configurations/compiler_options.cmake
@@ -1,4 +1,4 @@
-# Copyright (c) 2012, 2017, Oracle and/or its affiliates. All rights reserved.
+# Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
 # 
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -118,23 +118,21 @@ IF(UNIX)
     ENDIF()
 
     IF(CMAKE_C_COMPILER_ID MATCHES "SunPro")
-      IF(DEFINED CC_MINOR_VERSION AND CC_MINOR_VERSION GREATER 12)
-        SET(SUNPRO_FLAGS     "-xdebuginfo=no%decl")
-      ENDIF()
+      SET(SUNPRO_FLAGS     "-xdebuginfo=no%decl")
       SET(SUNPRO_FLAGS     "${SUNPRO_FLAGS} -xbuiltin=%all")
       SET(SUNPRO_FLAGS     "${SUNPRO_FLAGS} -xlibmil")
       # Link with the libatomic library in /usr/lib
       # This prevents dependencies on libstatomic
       # This was introduced with developerstudio12.5
-      IF(CC_MINOR_VERSION GREATER 13)
-        SET(SUNPRO_FLAGS   "${SUNPRO_FLAGS} -xatomic=gcc")
-      ENDIF()
+      SET(SUNPRO_FLAGS     "${SUNPRO_FLAGS} -xatomic=gcc")
+
       IF(CMAKE_SYSTEM_PROCESSOR MATCHES "i386")
         SET(SUNPRO_FLAGS   "${SUNPRO_FLAGS} -nofstore")
       ENDIF()
 
       SET(COMMON_C_FLAGS            "-g ${SUNPRO_FLAGS}")
       SET(COMMON_CXX_FLAGS          "-g0 ${SUNPRO_FLAGS}")
+      SET(COMMON_CXX_FLAGS          "${COMMON_CXX_FLAGS} -std=c++03")
       SET(CMAKE_C_FLAGS_DEBUG       "${COMMON_C_FLAGS}")
       SET(CMAKE_CXX_FLAGS_DEBUG     "${COMMON_CXX_FLAGS}")
       SET(CMAKE_C_FLAGS_RELWITHDEBINFO   "-xO3 ${COMMON_C_FLAGS}")
diff --git a/cmake/build_configurations/mysql_release.cmake b/cmake/build_configurations/mysql_release.cmake
index d371c29..b629445 100644
--- a/cmake/build_configurations/mysql_release.cmake
+++ b/cmake/build_configurations/mysql_release.cmake
@@ -1,4 +1,4 @@
-# Copyright (c) 2010, 2017, Oracle and/or its affiliates. All rights reserved.
+# Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
 # 
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -51,13 +51,3 @@ IF(UNIX)
 
 ENDIF()
 
-# Release builds on Solaris need to do an extra build to compile the
-# client libraries with Sun Studio. The release build script will replace
-# those libraries and the corresponding mysql_config before making the
-# final package.
-# But *this* mysql_config is still relevant for the embedded library
-# which will not be rebuilt, so we ensure we make a copy of it.
-
-IF(CMAKE_SYSTEM_NAME MATCHES "SunOS" AND CMAKE_COMPILER_IS_GNUCC)
-  SET(COPY_MYSQL_CONFIG 1 CACHE BOOL "")
-ENDIF()
diff --git a/cmake/os/SunOS.cmake b/cmake/os/SunOS.cmake
index ded3095..52015af 100644
--- a/cmake/os/SunOS.cmake
+++ b/cmake/os/SunOS.cmake
@@ -1,4 +1,4 @@
-# Copyright (c) 2010, 2017, Oracle and/or its affiliates. All rights reserved.
+# Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
 # 
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -18,13 +18,13 @@ INCLUDE(CheckCSourceRuns)
 INCLUDE(CheckCSourceCompiles) 
 INCLUDE(CheckCXXSourceCompiles)
 
-# We require at least GCC 4.4 or SunStudio 12u2 (CC 5.11)
+# We require at least GCC 7.3 or SunStudio 12.2 (CC 5.14)
 IF(NOT FORCE_UNSUPPORTED_COMPILER)
   IF(CMAKE_COMPILER_IS_GNUCC)
     EXECUTE_PROCESS(COMMAND ${CMAKE_C_COMPILER} -dumpversion
                     OUTPUT_VARIABLE GCC_VERSION)
-    IF(GCC_VERSION VERSION_LESS 4.4)
-      MESSAGE(FATAL_ERROR "GCC 4.4 or newer is required!")
+    IF(GCC_VERSION VERSION_LESS 7.3)
+      MESSAGE(FATAL_ERROR "GCC 7.3 or newer is required!")
     ENDIF()
   ELSEIF(CMAKE_C_COMPILER_ID MATCHES "SunPro")
     # CC -V yields
@@ -44,8 +44,8 @@ IF(NOT FORCE_UNSUPPORTED_COMPILER)
         VERSION_STRING ${stderr})
     ENDIF()
     SET(CC_MINOR_VERSION ${CMAKE_MATCH_1})
-    IF(${CC_MINOR_VERSION} LESS 11)
-      MESSAGE(FATAL_ERROR "SunStudio 12u2 or newer is required!")
+    IF(${CC_MINOR_VERSION} LESS 14)
+      MESSAGE(FATAL_ERROR "Oracle Studio 12.5 or newer is required!")
     ENDIF()
   ELSE()
     MESSAGE(FATAL_ERROR "Unsupported compiler!")
diff --git a/configure.cmake b/configure.cmake
index 2f3aa2f..d0ffda5 100644
--- a/configure.cmake
+++ b/configure.cmake
@@ -68,50 +68,6 @@ IF(CMAKE_SYSTEM_NAME MATCHES "SunOS" AND
   ADD_DEFINITIONS(-DSOLARIS_64BIT_ENABLED)
 ENDIF()
 
-# Nothing explicit on command line? Use c++03
-IF(CMAKE_SYSTEM_NAME MATCHES "SunOS" AND
-   CMAKE_C_COMPILER_ID MATCHES "SunPro" AND
-   NOT CMAKE_CXX_FLAGS MATCHES "-std=" AND
-   NOT CMAKE_CXX_FLAGS MATCHES "-library" AND
-   NOT CMAKE_CXX_FLAGS MATCHES "stdcxx4" AND
-   NOT CMAKE_CXX_FLAGS MATCHES "stlport"
-   )
-  IF(SUNPRO_CXX_LIBRARY)
-    MESSAGE(WARNING "You should upgrade to -std=c++03")
-  ELSE()
-    # cmake/os/SunOS.cmake has done version check
-    # /opt/solarisstudio12.4/bin/CC has CC_MINOR_VERSION == 13
-    IF(DEFINED CC_MINOR_VERSION AND CC_MINOR_VERSION GREATER 12)
-      MESSAGE("Adding -std=c++03")
-      SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++03")
-    ENDIF()
-  ENDIF()
-ENDIF()
-
-# The default C++ library for SunPro is really old, and not standards compliant.
-# http://www.oracle.com/technetwork/server-storage/solaris/cmp-stlport-libcstd-142559.html
-# Use stlport rather than Rogue Wave,
-#   unless otherwise specified on command line.
-# This does *not* work for building the server, only for client libraries,
-# i.e. -DWITHOUT_SERVER=1
-IF(CMAKE_SYSTEM_NAME MATCHES "SunOS")
-  IF(CMAKE_CXX_COMPILER_ID MATCHES "SunPro")
-    IF(CMAKE_CXX_FLAGS MATCHES "-std=")
-      # Nothing here, handled separately below
-    ELSE()
-      IF(SUNPRO_CXX_LIBRARY)
-        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -library=${SUNPRO_CXX_LIBRARY}")
-        IF(SUNPRO_CXX_LIBRARY STREQUAL "stdcxx4")
-          ADD_DEFINITIONS(-D__MATHERR_RENAME_EXCEPTION)
-          SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -template=extdef")
-        ENDIF()
-      ELSE()
-        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -library=stlport4")
-      ENDIF()
-    ENDIF()
-  ENDIF()
-ENDIF()
-
 # Check to see if we are using LLVM's libc++ rather than e.g. libstd++
 # Can then check HAVE_LLBM_LIBCPP later without including e.g. ciso646.
 CHECK_CXX_SOURCE_RUNS("
@@ -129,94 +85,10 @@ MACRO(DIRNAME IN OUT)
   GET_FILENAME_COMPONENT(${OUT} ${IN} PATH)
 ENDMACRO()
 
-MACRO(FIND_REAL_LIBRARY SOFTLINK_NAME REALNAME)
-  # We re-distribute libstlport.so/libstdc++.so which are both symlinks.
-  # There is no 'readlink' on solaris, so we use perl to follow links:
-  SET(PERLSCRIPT
-    "my $link= $ARGV[0]; use Cwd qw(abs_path); my $file = abs_path($link); print $file;")
-  EXECUTE_PROCESS(
-    COMMAND perl -e "${PERLSCRIPT}" ${SOFTLINK_NAME}
-    RESULT_VARIABLE result
-    OUTPUT_VARIABLE real_library
-    )
-  SET(REALNAME ${real_library})
-ENDMACRO()
-
-MACRO(EXTEND_CXX_LINK_FLAGS LIBRARY_PATH)
-  # Using the $ORIGIN token with the -R option to locate the libraries
-  # on a path relative to the executable:
-  # We need an extra backslash to pass $ORIGIN to the mysql_config script...
-  SET(QUOTED_CMAKE_CXX_LINK_FLAGS
-    "${CMAKE_CXX_LINK_FLAGS} -R'\\$ORIGIN/../lib' -R${LIBRARY_PATH} ")
-  SET(CMAKE_CXX_LINK_FLAGS
-    "${CMAKE_CXX_LINK_FLAGS} -R'\$ORIGIN/../lib' -R${LIBRARY_PATH}")
-  MESSAGE(STATUS "CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS}")
-ENDMACRO()
-
-MACRO(EXTEND_C_LINK_FLAGS LIBRARY_PATH)
-  SET(CMAKE_C_LINK_FLAGS
-    "${CMAKE_C_LINK_FLAGS} -R'\$ORIGIN/../lib' -R${LIBRARY_PATH}")
-  MESSAGE(STATUS "CMAKE_C_LINK_FLAGS ${CMAKE_C_LINK_FLAGS}")
-  SET(CMAKE_SHARED_LIBRARY_C_FLAGS
-    "${CMAKE_SHARED_LIBRARY_C_FLAGS} -R'\$ORIGIN/../lib' -R${LIBRARY_PATH}")
-ENDMACRO()
-
-IF(CMAKE_SYSTEM_NAME MATCHES "SunOS" AND CMAKE_COMPILER_IS_GNUCC)
-  DIRNAME(${CMAKE_CXX_COMPILER} CXX_PATH)
-  SET(LIB_SUFFIX "lib")
-  IF(SIZEOF_VOIDP EQUAL 8 AND CMAKE_SYSTEM_PROCESSOR MATCHES "sparc")
-    SET(LIB_SUFFIX "lib/sparcv9")
-  ENDIF()
-  IF(SIZEOF_VOIDP EQUAL 8 AND CMAKE_SYSTEM_PROCESSOR MATCHES "i386")
-    SET(LIB_SUFFIX "lib/amd64")
-  ENDIF()
-  FIND_LIBRARY(GPP_LIBRARY_NAME
-    NAMES "stdc++"
-    PATHS ${CXX_PATH}/../${LIB_SUFFIX}
-    NO_DEFAULT_PATH
-  )
-  MESSAGE(STATUS "GPP_LIBRARY_NAME ${GPP_LIBRARY_NAME}")
-  IF(GPP_LIBRARY_NAME)
-    DIRNAME(${GPP_LIBRARY_NAME} GPP_LIBRARY_PATH)
-    FIND_REAL_LIBRARY(${GPP_LIBRARY_NAME} real_library)
-    MESSAGE(STATUS "INSTALL ${GPP_LIBRARY_NAME} ${real_library}")
-    INSTALL(FILES ${GPP_LIBRARY_NAME} ${real_library}
-            DESTINATION ${INSTALL_LIBDIR} COMPONENT SharedLibraries)
-    EXTEND_CXX_LINK_FLAGS(${GPP_LIBRARY_PATH})
-    EXECUTE_PROCESS(
-      COMMAND sh -c "elfdump ${real_library} | grep SONAME"
-      RESULT_VARIABLE result
-      OUTPUT_VARIABLE sonameline
-    )
-    IF(NOT result)
-      STRING(REGEX MATCH "libstdc.*[^\n]" soname ${sonameline})
-      MESSAGE(STATUS "INSTALL ${GPP_LIBRARY_PATH}/${soname}")
-      INSTALL(FILES "${GPP_LIBRARY_PATH}/${soname}"
-              DESTINATION ${INSTALL_LIBDIR} COMPONENT SharedLibraries)
-    ENDIF()
-  ENDIF()
-  FIND_LIBRARY(GCC_LIBRARY_NAME
-    NAMES "gcc_s"
-    PATHS ${CXX_PATH}/../${LIB_SUFFIX}
-    NO_DEFAULT_PATH
-  )
-  IF(GCC_LIBRARY_NAME)
-    DIRNAME(${GCC_LIBRARY_NAME} GCC_LIBRARY_PATH)
-    FIND_REAL_LIBRARY(${GCC_LIBRARY_NAME} real_library)
-    MESSAGE(STATUS "INSTALL ${GCC_LIBRARY_NAME} ${real_library}")
-    INSTALL(FILES ${GCC_LIBRARY_NAME} ${real_library}
-            DESTINATION ${INSTALL_LIBDIR} COMPONENT SharedLibraries)
-    EXTEND_C_LINK_FLAGS(${GCC_LIBRARY_PATH})
-  ENDIF()
-ENDIF()
 
-# TODO: consider to INSTALL this library
-# /opt/developerstudio12.5/lib/compilers/atomic/sparcv9/libstatomic.so
-# see: https://docs.oracle.com/cd/E60778_01/html/E60746/gqhbq.html
 # We assume that developer studio runtime libraries are installed.
 IF(CMAKE_SYSTEM_NAME MATCHES "SunOS" AND
-   CMAKE_CXX_COMPILER_ID STREQUAL "SunPro" AND
-   CMAKE_CXX_FLAGS MATCHES "-std=c")
+   CMAKE_CXX_COMPILER_ID STREQUAL "SunPro")
   DIRNAME(${CMAKE_CXX_COMPILER} CXX_PATH)
 
   SET(LIBRARY_SUFFIX "lib/compilers/CC-gcc/lib")
@@ -247,91 +119,6 @@ IF(CMAKE_SYSTEM_NAME MATCHES "SunOS" AND
     "${CMAKE_CXX_LINK_FLAGS} -lstdc++ -lgcc_s -lCrunG3 -lc")
   SET(QUOTED_CMAKE_CXX_LINK_FLAGS
     "${QUOTED_CMAKE_CXX_LINK_FLAGS} -lstdc++ -lgcc_s -lCrunG3 -lc ")
-  SET(QUOTED_CMAKE_CXX_LINK_FLAGS
-    "${QUOTED_CMAKE_CXX_LINK_FLAGS} -L/usr/lib -latomic ")
-ENDIF()
-
-IF(CMAKE_SYSTEM_NAME MATCHES "SunOS" AND
-   CMAKE_C_COMPILER_ID MATCHES "SunPro" AND
-   CMAKE_CXX_FLAGS MATCHES "stlport4")
-  DIRNAME(${CMAKE_CXX_COMPILER} CXX_PATH)
-  # Also extract real path to the compiler(which is normally
-  # in <install_path>/prod/bin) and try to find the
-  # stlport libs relative to that location as well.
-  GET_FILENAME_COMPONENT(CXX_REALPATH ${CMAKE_CXX_COMPILER} REALPATH)
-
-  # CC -V yields
-  # CC: Studio 12.6 Sun C++ 5.15 SunOS_sparc Beta 2016/12/19
-  # CC: Studio 12.5 Sun C++ 5.14 SunOS_sparc Dodona 2016/04/04
-  # CC: Sun C++ 5.13 SunOS_sparc Beta 2014/03/11
-  # CC: Sun C++ 5.11 SunOS_sparc 2010/08/13
-
-  EXECUTE_PROCESS(
-    COMMAND ${CMAKE_CXX_COMPILER} "-V"
-    OUTPUT_VARIABLE stdout
-    ERROR_VARIABLE  stderr
-    RESULT_VARIABLE result
-  )
-  IF(result)
-    MESSAGE(FATAL_ERROR "Failed to execute ${CMAKE_CXX_COMPILER} -V")
-  ENDIF()
-
-  STRING(REGEX MATCH "CC: Sun C\\+\\+ 5\\.([0-9]+)" VERSION_STRING ${stderr})
-  IF (NOT CMAKE_MATCH_1 OR CMAKE_MATCH_1 STREQUAL "")
-    STRING(REGEX MATCH "CC: Studio 12\\.[56] Sun C\\+\\+ 5\\.([0-9]+)"
-      VERSION_STRING ${stderr})
-  ENDIF()
-  SET(CC_MINOR_VERSION ${CMAKE_MATCH_1})
-
-  IF(${CC_MINOR_VERSION} EQUAL 14)
-    MESSAGE(FATAL_ERROR
-      "Please run cmake with -DCMAKE_CXX_FLAGS=-std=c++03 for ${stderr}")
-  ENDIF()
-
-  IF(${CC_MINOR_VERSION} EQUAL 13)
-    SET(STLPORT_SUFFIX "lib/compilers/stlport4")
-    IF(SIZEOF_VOIDP EQUAL 8 AND CMAKE_SYSTEM_PROCESSOR MATCHES "sparc")
-      SET(STLPORT_SUFFIX "lib/compilers/stlport4/sparcv9")
-    ENDIF()
-    IF(SIZEOF_VOIDP EQUAL 8 AND CMAKE_SYSTEM_PROCESSOR MATCHES "i386")
-      SET(STLPORT_SUFFIX "lib/compilers/stlport4/amd64")
-    ENDIF()
-  ELSE()
-    SET(STLPORT_SUFFIX "lib/stlport4")
-    IF(SIZEOF_VOIDP EQUAL 8 AND CMAKE_SYSTEM_PROCESSOR MATCHES "sparc")
-      SET(STLPORT_SUFFIX "lib/stlport4/v9")
-    ENDIF()
-    IF(SIZEOF_VOIDP EQUAL 8 AND CMAKE_SYSTEM_PROCESSOR MATCHES "i386")
-      SET(STLPORT_SUFFIX "lib/stlport4/amd64")
-    ENDIF()
-  ENDIF()
-
-  FIND_LIBRARY(STL_LIBRARY_NAME
-    NAMES "stlport"
-    PATHS ${CXX_PATH}/../${STLPORT_SUFFIX}
-          ${CXX_REALPATH}/../../${STLPORT_SUFFIX}
-  )
-  MESSAGE(STATUS "STL_LIBRARY_NAME ${STL_LIBRARY_NAME}")
-  IF(STL_LIBRARY_NAME)
-    DIRNAME(${STL_LIBRARY_NAME} STLPORT_PATH)
-    FIND_REAL_LIBRARY(${STL_LIBRARY_NAME} real_library)
-    MESSAGE(STATUS "INSTALL ${STL_LIBRARY_NAME} ${real_library}")
-    INSTALL(FILES ${STL_LIBRARY_NAME} ${real_library}
-            DESTINATION ${INSTALL_LIBDIR} COMPONENT SharedLibraries)
-    EXTEND_C_LINK_FLAGS(${STLPORT_PATH})
-    EXTEND_CXX_LINK_FLAGS(${STLPORT_PATH})
-  ELSE()
-    MESSAGE(STATUS "Failed to find the reuired stlport library, print some"
-                   "variables to help debugging and bail out")
-    MESSAGE(STATUS "CMAKE_CXX_COMPILER ${CMAKE_CXX_COMPILER}")
-    MESSAGE(STATUS "CXX_PATH ${CXX_PATH}")
-    MESSAGE(STATUS "CXX_REALPATH ${CXX_REALPATH}")
-    MESSAGE(STATUS "STLPORT_SUFFIX ${STLPORT_SUFFIX}")
-    MESSAGE(STATUS "PATH: ${CXX_PATH}/../${STLPORT_SUFFIX}")
-    MESSAGE(STATUS "PATH: ${CXX_REALPATH}/../../${STLPORT_SUFFIX}")
-    MESSAGE(FATAL_ERROR
-      "Could not find the required stlport library.")
-  ENDIF()
 ENDIF()
 
 IF(CMAKE_COMPILER_IS_GNUCXX)
diff --git a/scripts/CMakeLists.txt b/scripts/CMakeLists.txt
index beda33b..be91ed0 100644
--- a/scripts/CMakeLists.txt
+++ b/scripts/CMakeLists.txt
@@ -1,4 +1,4 @@
-# Copyright (c) 2006, 2017, Oracle and/or its affiliates. All rights reserved.
+# Copyright (c) 2006, 2018, Oracle and/or its affiliates. All rights reserved.
 # 
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -468,15 +468,6 @@ ELSE()
       COMPONENT ${${file}_COMPONENT}
      )
   ENDFOREACH()
-  IF(COPY_MYSQL_CONFIG)
-    CONFIGURE_FILE(${CMAKE_CURRENT_BINARY_DIR}/mysql_config
-       ${CMAKE_CURRENT_BINARY_DIR}/mysql_server_config COPYONLY)
-    INSTALL_SCRIPT(
-      ${CMAKE_CURRENT_BINARY_DIR}/mysql_server_config
-      DESTINATION ${INSTALL_BINDIR}
-      COMPONENT ${mysql_server_config_COMPONENT}
-    )
-  ENDIF()
 
   # Systemd files
   IF(WITH_SYSTEMD)
diff --git a/unittest/gunit/CMakeLists.txt b/unittest/gunit/CMakeLists.txt
index f37505d..48fd737 100644
--- a/unittest/gunit/CMakeLists.txt
+++ b/unittest/gunit/CMakeLists.txt
@@ -27,16 +27,6 @@
 # Either way: we will unpack the zip, compile gmock-all.cc and gtest-all.cc
 # and link them into the executables.
 
-# Disable googletest for Solaris Studio < 12.4 since it doesn't compile.
-IF(CMAKE_C_COMPILER_ID MATCHES "SunPro")
-  IF(${CC_MINOR_VERSION} LESS 13)
-    MESSAGE(WARNING "Googletest requires Solaris Studio 12.4 or newer.")
-    UNSET(GMOCK_FOUND)
-    UNSET(GMOCK_FOUND CACHE)
-    RETURN()
-  ENDIF()
-ENDIF()
-
 # Default location for where to download and build gmock/gtest.
 IF(NOT DOWNLOAD_ROOT)
   SET(DOWNLOAD_ROOT ${CMAKE_SOURCE_DIR}/source_downloads)
