Patch new async keyword so that pyatspi is compatible with Python 3.7. This is
already fixed in the upstream.

Upstream commit:
https://github.com/GNOME/pyatspi2/commit/29a7b929f7f1160b643dc5f5911533887173fcff

--- pyatspi-2.18.0/pyatspi/registry.py
+++ pyatspi-2.18.0/pyatspi/registry.py
@@ -111,14 +111,30 @@ class Registry(object):
 
                 self.has_implementations = True
 
-                self.async = False	# not fully supported yet
+                self.asynchronous = False	# not fully supported yet
                 self.started = False
                 self.event_listeners = dict()
 
+        def __getattr__(self, name):
+            """
+            For backwards compatibility with old API
+            """
+            if name == 'async':
+                return self.asynchronous
+            return object.__getattr__(self, name)
+
+        def __setattr__(self, name, value):
+            """
+            For backwards compatibility with old API
+            """
+            if name == 'async':
+                self.asynchronous = value
+            object.__setattr__(self, name, value)
+
         def _set_default_registry (self):
                 self._set_registry (MAIN_LOOP_GLIB)
 
-        def start(self, async=False, gil=True):
+        def start(self, asynchronous=False, gil=True, **kwargs):
                 """
                 Enter the main loop to start receiving and dispatching events.
 
@@ -130,6 +146,9 @@ class Registry(object):
                         will be used in this process.
                 @@type gil: boolean
                 """
+                if 'async' in kwargs:
+                    # support previous API
+                    asynchronous = kwargs['async']
                 if not self.has_implementations:
                         self._set_default_registry ()
                 self.started = True
