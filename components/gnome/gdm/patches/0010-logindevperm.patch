From ec1cbb0425a809bae65d76cec2440aeaac6a0970 Mon Sep 17 00:00:00 2001
From: Alan Coopersmith <alan.coopersmith@oracle.com>
Date: Tue, 29 Dec 2015 18:07:05 -0800
Subject: [PATCH 10/19] logindevperm

Support for Solaris /etc/logindevperm.  A previous version of this patch
was upstream, but disappeared in code rewrites.  The desktop gate had a
patch (gdm-28-logindevperm.diff) which also removed the old upstream code
and replaced with a new version - it's unclear if it was ever sent upstream.

This revision is based on that patch, but moves the calls from the
launch-environment to the session-worker, where they can be run as
root so that they actually work in gdm 3.18.

--- a/configure.ac	2020-03-26 13:34:19.174873361 -0700
+++ b/configure.ac	2020-03-26 13:41:36.035607065 -0700
@@ -1103,6 +1103,10 @@
 AC_SUBST(EXTRA_SETUP_LIBS)
 AC_SUBST(EXTRA_TEST_LIBS)
 
+AC_CHECK_LIB(devinfo, di_devperm_login, [
+                         AC_DEFINE(HAVE_LOGINDEVPERM)
+                            EXTRA_DAEMON_LIBS="$EXTRA_DAEMON_LIBS -ldevinfo" ])
+
 dnl ---------------------------------------------------------------------------
 dnl - Check for X Server location
 dnl ---------------------------------------------------------------------------
--- a/daemon/gdm-session-worker.c	2020-03-26 13:41:52.824386827 -0700
+++ b/daemon/gdm-session-worker.c	2020-03-26 13:45:31.476131087 -0700
@@ -46,6 +46,10 @@
 
 #include <security/pam_appl.h>
 
+#ifdef HAVE_LOGINDEVPERM
+#include <libdevinfo.h>
+#endif
+
 #ifdef HAVE_LOGINCAP
 #include <login_cap.h>
 #endif
@@ -2111,6 +2115,10 @@
                                worker->priv->x11_authority_file);
 }
 
+#ifdef HAVE_LOGINDEVPERM
+static void gdm_session_worker_revoke_console_permissions (GdmSessionWorker *);
+#endif
+
 static void
 session_worker_child_watch (GPid              pid,
                             int               status,
@@ -2141,6 +2149,10 @@
         worker->priv->child_pid = -1;
         worker->priv->child_watch_id = 0;
         run_script (worker, GDMCONFDIR "/PostSession");
+
+#ifdef HAVE_LOGINDEVPERM
+        gdm_session_worker_revoke_console_permissions (worker);
+#endif
 }
 
 static void
@@ -2300,6 +2312,66 @@
         return fd;
 }
 
+#ifdef HAVE_LOGINDEVPERM
+static void
+gdm_session_worker_grant_console_permissions (
+        GdmSessionWorker  *worker,
+        struct passwd *passwd_entry)
+{
+        const char *username =  worker->priv->username;
+        const char *display_device = worker->priv->display_device;
+
+        /*
+         * Only do logindevperm processing if /dev/console or
+         * a device associated with a VT
+         */
+        if (display_device != NULL &&
+            (strncmp (display_device, "/dev/vt/", strlen ("/dev/vt/")) == 0 ||
+             strcmp  (display_device, "/dev/console") == 0)) {
+                g_debug ("Logindevperm login for user %s, device %s",
+                         username, display_device);
+                if (di_devperm_login (display_device,
+                                      passwd_entry->pw_uid,
+                                      passwd_entry->pw_gid,
+                                      NULL) == -1) {
+                        g_debug("error processing /etc/logindevperm,"
+                                " see syslog for more details\n");
+                }
+        } else {
+                g_debug ("Not calling di_devperm_login login for user %s, device %s",
+                         username, display_device);
+        }
+}
+
+static void
+gdm_session_worker_revoke_console_permissions (
+        GdmSessionWorker  *worker)
+{
+        const char *username =  worker->priv->username;
+        const char *display_device = worker->priv->display_device;
+
+        /*
+         * Only do logindevperm processing if /dev/console or a device
+         * associated with a VT.  Do this after processing the PostSession
+         * script so that permissions for devices are not returned to root
+         * before running the script.
+         */
+        if (display_device != NULL &&
+            (strncmp (display_device, "/dev/vt/", strlen ("/dev/vt/")) == 0 ||
+             strcmp  (display_device, "/dev/console") == 0)) {
+                g_debug ("di_devperm_logout for user %s, device %s",
+                         username, display_device);
+                if (di_devperm_logout (display_device) == -1) {
+                        g_debug("error processing /etc/logindevperm,"
+                                " see syslog for more details\n");
+                }
+        } else {
+                g_debug ("Not calling di_devperm_logout logout for user %s, device %s",
+                         username, display_device);
+        }
+}
+#endif  /* HAVE_LOGINDEVPERM */
+
 #ifdef __sun
 static void
 solaris_xserver_cred (const char *username, struct passwd *passwd_entry,
@@ -2429,6 +2501,10 @@
                          worker->priv->arguments[0]);
         }
 
+#ifdef HAVE_LOGINDEVPERM
+        gdm_session_worker_grant_console_permissions (worker, passwd_entry);
+#endif
+
 #ifdef __sun
         solaris_xserver_cred (worker->priv->username,
                               passwd_entry,
