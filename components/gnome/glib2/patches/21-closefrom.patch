When F_CLOSEFROM is defined, we know that closefrom() is
signal safe.  And use F_NEXTFD/F_PREVFD for fdwalk when they
are available.

Reported upstream:

https://gitlab.gnome.org/GNOME/glib/-/issues/2429

--- a/glib/gspawn.c	Thu Mar 18 06:47:48 2021
+++ b/glib/gspawn.c	Tue Jun 15 01:42:00 2021
@@ -1263,6 +1263,21 @@
 
 #endif
 
+#if defined(sun) && defined(F_PREVFD) && defined(F_NEXTFD)
+/*
+ * Solaris has a signal-safe way in Solaris 11.4 which allows
+ * us to find all file descriptors in a process.
+ */
+ 
+  open_max = fcntl (INT_MAX, F_PREVFD); /* find the maximum fd */
+  if (open_max < 0) /* No open files */
+  	return 0;
+
+  for (fd = -1; (fd = fcntl (fd, F_NEXTFD, open_max)) != -1; )
+      if ((res = cb (data, fd)) != 0 || fd == open_max)
+          break;
+#else
+
 #if 0 && defined(HAVE_SYS_RESOURCE_H)
   /* Use getrlimit() function provided by the system if it is known to be
    * async-signal safe.
@@ -1293,6 +1308,7 @@
   for (fd = 0; fd < open_max; fd++)
       if ((res = cb (data, fd)) != 0)
           break;
+#endif
 
   return res;
 #endif
@@ -1303,7 +1319,7 @@
 static void
 safe_closefrom (int lowfd)
 {
-#if defined(__FreeBSD__) || defined(__OpenBSD__)
+#if defined(__FreeBSD__) || defined(__OpenBSD__) || (defined(sun) && defined(F_CLOSEFROM))
   /* Use closefrom function provided by the system if it is known to be
    * async-signal safe.
    *
@@ -1312,6 +1328,9 @@
    *
    * OpenBSD: closefrom is not included in the list, but a direct system call
    * should be safe to use.
+   *
+   * In Solaris as of 11.3 SRU 31, closefrom() is also a direct system call.
+   * On such systems, F_CLOSEFROM is defined.
    */
   (void) closefrom (lowfd);
 #elif defined(__DragonFly__)
