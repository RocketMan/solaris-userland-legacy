Solaris 11.3 does not have newlocale/uselocale, so we revert to the
old way of doing things using setlocale.


--- gnome-desktop-3.34.0/libgnome-desktop/gnome-wall-clock.c~	2019-09-10 01:59:50.000000000 +0000
+++ gnome-desktop-3.34.0/libgnome-desktop/gnome-wall-clock.c	2020-12-23 17:25:09.083100067 +0000
@@ -273,6 +273,13 @@
  * dcgettext(), the translation is still taken from the LC_MESSAGES
  * catalogue and not the LC_TIME one.
  */
+#ifdef __sun
+#define T_(string) (string)
+#ifdef N_
+#undef N_
+#endif
+#define N_(string) (string)
+#else
 static const char *
 translate_time_format_string (const char *str)
 {
@@ -299,6 +306,7 @@
 }
 
 #define T_(string) translate_time_format_string (string)
+#endif // __sun
 
 /**
  * gnome_wall_clock_string_for_datetime:
--- gnome-desktop-41.0/libgnome-desktop/gnome-gettext-portable.h~	2021-09-20 19:21:50.136714000 +0000
+++ gnome-desktop-41.0/libgnome-desktop/gnome-gettext-portable.h	2021-10-30 13:02:30.806329420 +0000
@@ -27,6 +27,8 @@
 #include <xlocale.h>
 #endif
 
+#define locale_t long
+
 const char * 
 dgettext_l (locale_t    locale,
             const char *domain,
--- gnome-desktop-41.0/libgnome-desktop/gnome-gettext-portable.c~	2021-09-20 19:21:50.136714000 +0000
+++ gnome-desktop-41.0/libgnome-desktop/gnome-gettext-portable.c	2021-10-30 13:09:19.014950765 +0000
@@ -27,6 +27,8 @@
 #include <glib.h>
 #include <glib/gi18n-lib.h>
 
+#define locale_t long
+
 #ifndef HAVE_USELOCALE
 /**
  * FIXME: This function does nothing if there's no thread-safe
--- gnome-desktop-41.0/libgnome-desktop/gnome-languages.c.~1~	2021-09-20 19:21:50.137714000 +0000
+++ gnome-desktop-41.0/libgnome-desktop/gnome-languages.c	2021-10-30 13:12:02.849869649 +0000
@@ -287,15 +287,15 @@
 static gboolean
 language_name_is_valid (const char *language_name)
 {
-        locale_t locale;
+        gboolean  is_valid;
+        int lc_type_id = LC_MESSAGES;
+        g_autofree char *old_locale = NULL;
+
+        old_locale = g_strdup (setlocale (lc_type_id, NULL));
+        is_valid = setlocale (lc_type_id, language_name) != NULL;
+        setlocale (lc_type_id, old_locale);
 
-        locale = newlocale (LC_MESSAGES_MASK, language_name, (locale_t) 0);
-        if (locale != (locale_t) 0) {
-                freelocale (locale);
-                return TRUE;
-        }
-
-        return FALSE;
+        return is_valid;
 }
 
 static void
@@ -303,27 +303,25 @@
                                    char       **pcodeset,
                                    gboolean    *is_utf8)
 {
-        locale_t locale;
-        const char *codeset = NULL;
+        g_autofree char *codeset = NULL;
+        g_autofree char *old_locale = NULL;
 
-        locale = newlocale (LC_CTYPE_MASK, language_name, (locale_t) 0);
-        if (locale == (locale_t) 0)
+        if (setlocale (LC_CTYPE, language_name) == NULL)
                 return;
 
-
-        codeset = nl_langinfo_l (CODESET, locale);
+        codeset = nl_langinfo (CODESET);
 
         if (pcodeset != NULL) {
                 *pcodeset = g_strdup (codeset);
         }
 
         if (is_utf8 != NULL) {
-                g_autofree char *normalized_codeset = normalize_codeset (codeset);
+                codeset = normalize_codeset (codeset);
 
-                *is_utf8 = strcmp (normalized_codeset, "UTF-8") == 0;
+                *is_utf8 = strcmp (codeset, "UTF-8") == 0;
         }
 
-        freelocale (locale);
+        setlocale (LC_CTYPE, old_locale);
 }
 
 /**
@@ -702,13 +700,13 @@
         if (language != NULL) {
                 const char *translated_name;
                 locale_t loc = 0;
+                g_autofree char *old_locale = NULL;
 
                 if (locale == NULL) {
                         locale = setlocale (LC_MESSAGES, NULL);
                 }
-                loc = newlocale (LC_MESSAGES_MASK, locale, (locale_t) 0);
-                if (loc == (locale_t) 0)
-                        return NULL;
+                old_locale = g_strdup (setlocale (LC_MESSAGES, NULL));
+                setlocale (LC_MESSAGES, locale);
 
                 if (is_fallback_language (code)) {
                         name = g_strdup (_("Unspecified"));
@@ -719,7 +717,7 @@
                         name = capitalize_utf8_string (tmp);
                 }
 
-                freelocale (loc);
+                setlocale (LC_MESSAGES, old_locale);
         }
 
         return name;
@@ -755,21 +753,21 @@
         name = NULL;
         if (territory != NULL) {
                 const char *translated_territory;
-                locale_t loc;
+                locale_t loc = 0;
                 g_autofree char *tmp = NULL;
+                g_autofree char *old_locale = NULL;
 
                 if (locale == NULL) {
                         locale = setlocale (LC_MESSAGES, NULL);
                 }
-                loc = newlocale (LC_MESSAGES_MASK, locale, (locale_t) 0);
-                if (loc == (locale_t) 0)
-                        return NULL;
+                old_locale = g_strdup (setlocale (LC_MESSAGES, NULL));
+                setlocale (LC_MESSAGES, locale);
 
                 translated_territory = dgettext_l (loc, "iso_3166", territory);
                 tmp = get_first_item_in_semicolon_list (translated_territory);
                 name = capitalize_utf8_string (tmp);
 
-                freelocale (loc);
+                setlocale (LC_MESSAGES, old_locale);
         }
 
         return name;
@@ -1349,16 +1347,15 @@
         char *retval;
         GHashTable *modifiers_map;
         locale_t loc;
+        g_autofree char *old_locale = NULL;
 
         g_return_val_if_fail (modifier != NULL, NULL);
 
         if (translation == NULL) {
                 translation = setlocale (LC_MESSAGES, NULL);
         }
-        loc = newlocale (LC_MESSAGES_MASK, translation, (locale_t) 0);
-        if (loc == (locale_t) 0) {
-                return NULL;
-        }
+        old_locale = g_strdup (setlocale (LC_MESSAGES, NULL));
+        setlocale (LC_MESSAGES, translation);
 
         /* Modifiers as listed in glibc's SUPPORTED file:
          * https://sourceware.org/git/?p=glibc.git;a=blob;f=localedata/SUPPORTED;hb=HEAD
@@ -1396,7 +1393,7 @@
 
         g_hash_table_destroy (modifiers_map);
 
-        freelocale (loc);
+        setlocale (LC_MESSAGES, old_locale);
 
         return retval;
 }
