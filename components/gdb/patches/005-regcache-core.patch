# For handling Solaris core files
# Will contribute upstream if possible

diff --git a/gdb/configure.nat b/gdb/configure.nat
index fb4522f..a906cf6 100644
--- a/gdb/configure.nat
+++ b/gdb/configure.nat
@@ -88,7 +88,7 @@ case ${gdb_host} in
 	    darwin-nat-info.o'
 	;;
     sol2)
-	NATDEPFILES='fork-child.o nat/fork-inferior.o \
+	NATDEPFILES='sol2-core-regset.o fork-child.o nat/fork-inferior.o \
 	    procfs.o proc-api.o proc-events.o proc-flags.o proc-why.o \
 	    sol-thread.o'
 	HAVE_NATIVE_GCORE_HOST=1
diff --git a/gdb/regcache.c b/gdb/regcache.c
index 1580359..fd60881 100644
--- a/gdb/regcache.c
+++ b/gdb/regcache.c
@@ -199,7 +199,7 @@ reg_buffer::reg_buffer (gdbarch *gdbarch, bool has_pseudo)
 regcache::regcache (gdbarch *gdbarch, const address_space *aspace_)
 /* The register buffers.  A read/write register cache can only hold
    [0 .. gdbarch_num_regs).  */
-  : detached_regcache (gdbarch, false), m_aspace (aspace_)
+  : detached_regcache (gdbarch, false), m_aspace (aspace_), from_corefile(0)
 {
   m_ptid = minus_one_ptid;
 }
@@ -859,6 +859,20 @@ regcache::write_part (int regnum, int offset, int len,
   return REG_VALID;
 }
 
+int
+set_regcache_from_corefile (struct regcache *regcache)
+{
+  gdb_assert (regcache != NULL);
+  regcache->from_corefile = 1;
+}
+
+int
+regcache_from_corefile (const struct regcache *regcache)
+{
+  gdb_assert (regcache != NULL);
+  return regcache->from_corefile;
+}
+
 /* See regcache.h.  */
 
 void
diff --git a/gdb/regcache.h b/gdb/regcache.h
index e2935ee..1f586bf 100644
--- a/gdb/regcache.h
+++ b/gdb/regcache.h
@@ -422,6 +422,9 @@ private:
   /* If this is a read-write cache, which thread's registers is
      it connected to?  */
   ptid_t m_ptid;
+  /* Is this a corefile regcache or a live process */
+  int from_corefile;
+
 
   friend struct regcache *
   get_thread_arch_aspace_regcache (ptid_t ptid, struct gdbarch *gdbarch,
@@ -429,8 +432,14 @@ private:
 
   friend void
   registers_changed_ptid (ptid_t ptid);
+
+  friend int set_regcache_from_corefile (struct regcache *regcache);
+  friend int regcache_from_corefile (const struct regcache *regcache);
 };
 
+extern int set_regcache_from_corefile (struct regcache *regcache);
+extern int regcache_from_corefile (const struct regcache *regcache);
+
 class readonly_detached_regcache : public readable_regcache
 {
 public:
diff --git a/gdb/sol2-core-regset.c b/gdb/sol2-core-regset.c
new file mode 100644
index 0000000..7f8bc71
--- /dev/null
+++ b/gdb/sol2-core-regset.c
@@ -0,0 +1,147 @@
+/* Machine dependent GDB support for core files on Solaris using "regsets".
+
+   Copyright (C) 2013 Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* This file is used by Solaris core dumps. The Solaris /proc filesystem
+ * will yield different sizes for prgregset_t prfpregset_t depending
+ * on sizeof(void*). We handle these differences in this Solaris-specific
+ * core-regset.c file, as opposed to imposing all these Solaris particulars
+ * on everyone else.
+ */
+
+#include "defs.h"
+#include "command.h"
+#include "gdbcore.h"
+#include "gdbarch.h"
+#include "inferior.h"
+#include "target.h"
+#include "regcache.h"
+#include "elf-bfd.h"
+
+#include <fcntl.h>
+#include <errno.h>
+#include <string.h>
+#include <time.h>
+#ifdef HAVE_SYS_PROCFS_H
+#include <sys/procfs.h>
+#endif
+
+/* Prototypes for supply_gregset etc.  */
+#include "gregset.h"
+
+/* Provide registers to GDB from a core file.
+
+   CORE_REG_SECT points to an array of bytes, which are the contents
+   of a `note' from a core file which BFD thinks might contain
+   register contents.  CORE_REG_SIZE is its size.
+
+   WHICH says which register set corelow suspects this is:
+     0 --- the general-purpose register set, in gregset_t format
+     2 --- the floating-point register set, in fpregset_t format
+
+   REG_ADDR is ignored.  */
+
+static void
+fetch_core_registers (struct regcache *regcache,
+		      char *core_reg_sect,
+		      unsigned core_reg_size,
+		      int which,
+		      CORE_ADDR reg_addr)
+{
+  gdb_gregset_t gregset;
+  gdb_fpregset_t fpregset;
+  gdb_gregset_t *gregset_p = &gregset;
+  gdb_fpregset_t *fpregset_p = &fpregset;
+  /* use default sizes on 64-bit Solaris */
+  size_t gregset_size = sizeof (gregset);
+  size_t fpregset_size = sizeof (fpregset);
+  int pointer_size;
+  struct gdbarch *gdbarch = regcache->arch();
+  enum bfd_endian byte_order;
+
+  if (gdbarch_osabi (gdbarch) == GDB_OSABI_SOLARIS)
+  {
+    set_regcache_from_corefile (regcache);
+    byte_order = gdbarch_byte_order (gdbarch);
+    pointer_size = gdbarch_ptr_bit (gdbarch);
+
+    if ((byte_order == BFD_ENDIAN_BIG) && (pointer_size == 32))
+    {
+      gregset_size = 152;
+      fpregset_size = 144;
+    }
+    else if ((byte_order == BFD_ENDIAN_LITTLE) && (pointer_size == 32))
+    {
+      gregset_size = 76;
+      fpregset_size = 380;
+    }
+  }
+
+  switch (which)
+    {
+    case 0:
+      if (core_reg_size != gregset_size)
+	warning (_("Wrong size gregset in core file."));
+      else
+	{
+	  memcpy (&gregset, core_reg_sect, gregset_size);
+	  supply_gregset (regcache, (const gdb_gregset_t *) gregset_p);
+	}
+      break;
+
+    case 2:
+      if (core_reg_size != fpregset_size)
+	warning (_("Wrong size fpregset in core file."));
+      else
+	{
+	  memcpy (&fpregset, core_reg_sect, fpregset_size);
+	  if (gdbarch_fp0_regnum (gdbarch) >= 0)
+	    supply_fpregset (regcache,
+			     (const gdb_fpregset_t *) fpregset_p);
+	}
+      break;
+
+    default:
+      /* We've covered all the kinds of registers we know about here,
+         so this must be something we wouldn't know what to do with
+         anyway.  Just ignore it.  */
+      break;
+    }
+}
+
+
+/* Register that we are able to handle ELF core file formats using
+   standard procfs "regset" structures.  */
+
+static struct core_fns regset_core_fns =
+{
+  bfd_target_elf_flavour,		/* core_flavour */
+  default_check_format,			/* check_format */
+  default_core_sniffer,			/* core_sniffer */
+  fetch_core_registers,			/* core_read_registers */
+  NULL					/* next */
+};
+
+/* Provide a prototype to silence -Wmissing-prototypes.  */
+extern void _initialize_core_regset (void);
+
+void
+_initialize_core_regset (void)
+{
+  deprecated_add_core_fns (&regset_core_fns);
+}
--- gdb-9.2/gdb/sparc-sol2-nat.c	2020-05-25 10:34:59.054665545 +0000
+++ gdb-9.2/gdb/sparc-sol2-nat.c	2020-05-25 10:34:38.990421383 +0000
@@ -24,12 +24,10 @@
 #include "gregset.h"
 
 #include "sparc-tdep.h"
+#include "sparc64-tdep.h"
 #include "target.h"
 #include "procfs.h"
-
-/* This file provids the (temporary) glue between the Solaris SPARC
-   target dependent code and the machine independent SVR4 /proc
-   support.  */
+#include "gdbarch.h"
 
 /* Solaris 7 (Solaris 2.7, SunOS 5.7) and up support two process data
    models, the traditional 32-bit data model (ILP32) and the 64-bit
@@ -43,51 +41,65 @@
    Note that a 32-bit GDB won't be able to debug a 64-bit target
    process using /proc on Solaris.  */
 
-#if PR_MODEL_NATIVE == PR_MODEL_LP64
-
-#include "sparc64-tdep.h"
-
-#define sparc_supply_gregset sparc64_supply_gregset
-#define sparc_supply_fpregset sparc64_supply_fpregset
-#define sparc_collect_gregset sparc64_collect_gregset
-#define sparc_collect_fpregset sparc64_collect_fpregset
-
-#define sparc_sol2_gregmap sparc64_sol2_gregmap
-#define sparc_sol2_fpregmap sparc64_sol2_fpregmap
-
-#else
-
-#define sparc_supply_gregset sparc32_supply_gregset
-#define sparc_supply_fpregset sparc32_supply_fpregset
-#define sparc_collect_gregset sparc32_collect_gregset
-#define sparc_collect_fpregset sparc32_collect_fpregset
-
-#define sparc_sol2_gregmap sparc32_sol2_gregmap
-#define sparc_sol2_fpregmap sparc32_sol2_fpregmap
-
-#endif
+static int from_corefile = -1;
 
 void
 supply_gregset (struct regcache *regcache, const prgregset_t *gregs)
 {
-  sparc_supply_gregset (&sparc_sol2_gregmap, regcache, -1, gregs);
+  struct gdbarch *gdbarch = regcache->arch();
+  int pointer_size = gdbarch_ptr_bit (gdbarch);
+
+  if (from_corefile == -1)
+    from_corefile = regcache_from_corefile (regcache);
+
+  if ((pointer_size == 32) && (from_corefile == 1))
+    sparc32_supply_gregset (&sparc32_sol2_gregmap, regcache, -1, gregs);
+  else
+    sparc64_supply_gregset (&sparc64_sol2_gregmap, regcache, -1, gregs);
 }
 
 void
 supply_fpregset (struct regcache *regcache, const prfpregset_t *fpregs)
 {
-  sparc_supply_fpregset (&sparc_sol2_fpregmap, regcache, -1, fpregs);
+  struct gdbarch *gdbarch = regcache->arch();
+  int pointer_size = gdbarch_ptr_bit (gdbarch);
+
+  if (from_corefile == -1)
+    from_corefile = regcache_from_corefile (regcache);
+
+  if ((pointer_size == 32) && (from_corefile == 1))
+    sparc32_supply_fpregset (&sparc32_sol2_fpregmap, regcache, -1, fpregs);
+  else
+    sparc64_supply_fpregset (&sparc64_sol2_fpregmap, regcache, -1, fpregs);
 }
 
 void
 fill_gregset (const struct regcache *regcache, prgregset_t *gregs, int regnum)
 {
-  sparc_collect_gregset (&sparc_sol2_gregmap, regcache, regnum, gregs);
+  struct gdbarch *gdbarch = regcache->arch();
+  int pointer_size = gdbarch_ptr_bit (gdbarch);
+
+  if (from_corefile == -1)
+    from_corefile = regcache_from_corefile (regcache);
+
+  if ((pointer_size == 32) && (from_corefile == 1))
+    sparc32_collect_gregset (&sparc32_sol2_gregmap, regcache, regnum, gregs);
+  else
+    sparc64_collect_gregset (&sparc64_sol2_gregmap, regcache, regnum, gregs);
 }
 
 void
 fill_fpregset (const struct regcache *regcache,
 	       prfpregset_t *fpregs, int regnum)
 {
-  sparc_collect_fpregset (&sparc_sol2_fpregmap, regcache, regnum, fpregs);
+  struct gdbarch *gdbarch = regcache->arch();
+  int pointer_size = gdbarch_ptr_bit (gdbarch);
+
+  if (from_corefile == -1)
+    from_corefile = regcache_from_corefile (regcache);
+
+  if ((pointer_size == 32) && (from_corefile == 1))
+    sparc32_collect_fpregset (&sparc32_sol2_fpregmap, regcache, regnum, fpregs);
+  else
+    sparc64_collect_fpregset (&sparc64_sol2_fpregmap, regcache, regnum, fpregs);
 }
