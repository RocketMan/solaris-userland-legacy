Patches to successfully compile dnsmasq on Solaris.

This patch was developed in-house. Since it is Solaris-specific it is not
suitable for upstream.

diff --git a/src/bpf.c b/src/bpf.c
index 0ac1c8f..ea45802 100644
--- a/src/bpf.c
+++ b/src/bpf.c
@@ -31,7 +31,9 @@
 #  include <net/if_var.h> 
 #endif
 #include <netinet/in_var.h>
+#ifndef HAVE_SOLARIS_NETWORK
 #include <netinet6/in6_var.h>
+#endif
 
 #ifndef SA_SIZE
 #define SA_SIZE(sa)                                             \
diff --git a/src/config.h b/src/config.h
index 7d08f7d..37fd345 100644
--- a/src/config.h
+++ b/src/config.h
@@ -296,7 +296,8 @@ HAVE_SOCKADDR_SA_LEN
 #define HAVE_GETOPT_LONG
 #undef HAVE_SOCKADDR_SA_LEN
 #define ETHER_ADDR_LEN 6 
- 
+#undef HAVE_IPSET
+
 #endif
 
 /* rules to implement compile-time option dependencies and 
diff --git a/src/dnsmasq.h b/src/dnsmasq.h
index 68e6287..7efa29e 100644
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -1362,7 +1362,7 @@ int set_ipv6pktinfo(int fd);
 #ifdef HAVE_DHCP6
 void join_multicast(int dienow);
 #endif
-#if defined(HAVE_LINUX_NETWORK) || defined(HAVE_BSD_NETWORK)
+#if defined(HAVE_LINUX_NETWORK) || defined(HAVE_BSD_NETWORK) || defined(HAVE_SOLARIS_NETWORK)
 void newaddress(time_t now);
 #endif
 
diff --git a/src/dump.c b/src/dump.c
index 9bd3a5f..d6b761e 100644
--- a/src/dump.c
+++ b/src/dump.c
@@ -148,7 +148,7 @@ void dump_packet(int mask, void *packet, size_t len, union mysockaddr *src, unio
       ip.ip_v = IPVERSION;
       ip.ip_hl = sizeof(struct ip) / 4;
       ip.ip_len = htons(sizeof(struct ip) + sizeof(struct udphdr) + len); 
-      ip.ip_ttl = IPDEFTTL;
+      ip.ip_ttl = 64;
       ip.ip_p = IPPROTO_UDP;
       
       if (src)
diff --git a/src/ip6addr.h b/src/ip6addr.h
index 352b330..ec8977b 100644
--- a/src/ip6addr.h
+++ b/src/ip6addr.h
@@ -14,8 +14,41 @@
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
+#ifdef HAVE_SOLARIS_NETWORK
+#ifdef _BIG_ENDIAN	
+#define IN6_IS_ADDR_ULA(a) \
+	(((a)->_S6_un._S6_u32[0] & htonl (0x000000ff))                        \
+	 == htonl (0x000000fd))
 
+#define IN6_IS_ADDR_ULA_ZERO(a) \
+	(((a)->_S6_un._S6_u32[0] == htonl (0x000000fd))                              \
+	 && ((a)->_S6_un._S6_u32[1] == 0)                                     \
+	 && ((a)->_S6_un._S6_u32[2] == 0)                                     \
+	 && ((a)->_S6_un._S6_u32[3] == 0))
 
+#define IN6_IS_ADDR_LINK_LOCAL_ZERO(a) \
+ 	(((a)->_S6_un._S6_u32[0] == htonl (0x000080fe))                        \
+	 && ((a)->_S6_un._S6_u32[1] == 0)                                     \
+	 && ((a)->_S6_un._S6_u32[2] == 0)                                     \
+	 && ((a)->_S6_un._S6_u32[3] == 0))
+#else /* _BIG_ENDIAN */
+#define IN6_IS_ADDR_ULA(a) \
+	(((a)->_S6_un._S6_u32[0] & htonl (0xff000000))                        \
+	 == htonl (0xfd000000))
+
+#define IN6_IS_ADDR_ULA_ZERO(a) \
+	(((a)->_S6_un._S6_u32[0] == htonl (0xfd000000))                              \
+	 && ((a)->_S6_un._S6_u32[1] == 0)                                     \
+	 && ((a)->_S6_un._S6_u32[2] == 0)                                     \
+	 && ((a)->_S6_un._S6_u32[3] == 0))
+
+#define IN6_IS_ADDR_LINK_LOCAL_ZERO(a) \
+	(((a)->_S6_un._S6_u32[0] == htonl (0xfe800000))                        \
+	 && ((a)->_S6_un._S6_u32[1] == 0)                                     \
+	 && ((a)->_S6_un._S6_u32[2] == 0)                                     \
+	 && ((a)->_S6_un._S6_u32[3] == 0))
+#endif /* _BIG_ENDIAN */
+#else /* HAVE_SOLARIS_NETWORK */
 #define IN6_IS_ADDR_ULA(a) \
         ((((__const uint32_t *) (a))[0] & htonl (0xff000000))                 \
          == htonl (0xfd000000))
@@ -31,4 +64,4 @@
          && ((__const uint32_t *) (a))[1] == 0                                \
          && ((__const uint32_t *) (a))[2] == 0                                \
          && ((__const uint32_t *) (a))[3] == 0)
-
+#endif /* HAVE_SOLARIS_NETWORK */
