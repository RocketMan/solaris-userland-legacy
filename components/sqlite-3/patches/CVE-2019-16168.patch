Fixes CVE-2019-16168.
Desc:
  In SQLite through 3.29.0, whereLoopAddBtreeIndex in sqlite3.c can crash a
  browser or other application because of missing validation of a sqlite_stat1
  sz field, aka a "severe division by zero in the query planner."

Upstream issue:
https://www.sqlite.org/src/info/e4598ecbdd18bd82945f6029013296690e719a62

Upstream commit:
https://www.sqlite.org/src/info/98357d8c1263920b

--- sqlite-autoconf-3290000/sqlite3.c
+++ sqlite-autoconf-3290000/sqlite3.c
@@ -105933,7 +105937,9 @@ static void decodeIntArray(
       if( sqlite3_strglob("unordered*", z)==0 ){
         pIndex->bUnordered = 1;
       }else if( sqlite3_strglob("sz=[0-9]*", z)==0 ){
-        pIndex->szIdxRow = sqlite3LogEst(sqlite3Atoi(z+3));
+        int sz = sqlite3Atoi(z+3);
+        if( sz<2 ) sz = 2;
+        pIndex->szIdxRow = sqlite3LogEst(sz);
       }else if( sqlite3_strglob("noskipscan*", z)==0 ){
         pIndex->noSkipScan = 1;
       }
@@ -143260,6 +143266,7 @@ static int whereLoopAddBtreeIndex(
     ** it to pNew->rRun, which is currently set to the cost of the index
     ** seek only. Then, if this is a non-covering index, add the cost of
     ** visiting the rows in the main table.  */
+    assert( pSrc->pTab->szTabRow>0 );
     rCostIdx = pNew->nOut + 1 + (15*pProbe->szIdxRow)/pSrc->pTab->szTabRow;
     pNew->rRun = sqlite3LogEstAdd(rLogSize, rCostIdx);
     if( (pNew->wsFlags & (WHERE_IDX_ONLY|WHERE_IPK))==0 ){
