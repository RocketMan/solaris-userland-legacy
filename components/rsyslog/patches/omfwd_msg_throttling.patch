The patch adds a configuration option that enables to reduce
the number of network errors logged and reported.

For example, if each 10th network error message should be logged,
the rsyslog configuration has to be updated as follows.

action(type="omfwd" Target="<IP_ADDR>" Port="<PORT>" Protocol="tcp" ConErrSkip="10")

Values in angled brackets should be replaced with suitable values.
When the network error is logged, it also prints an information
that the next ConErrSkip-1 network errors will be suppressed.

------------------------------------------------------------
Jan 18 08:27:19 <HOSTNAME> rsyslogd-2027: omfwd: remote server at
<IP_ADDR>:<PORT> seems to have closed connection. This often happens when the
remote peer (or an interim system like a load balancer or firewall) shuts
down or aborts a connection. Rsyslog will re-open the connection if
configured to do so (we saw a generic IO Error, which usually goes along with
that behaviour). Note that the next 9 connection error messages will be
skipped. [v8.2002.0 try https://www.rsyslog.com/e/2027 ]
------------------------------------------------------------

Note that the above phrasing was taken from the following upstream commit:

commit 1fba0dc33f551bd2f76a7230900a692ff98613f9
Author: Rainer Gerhards <rgerhards@adiscon.com>
Date:   Fri Nov 20 10:39:27 2020 +0100

    re-phrase error message to help users understand better what happens

Upstream issue: https://github.com/rsyslog/rsyslog/issues/3910

The patch was contributed to upstream and currently it is accepted:
https://github.com/rsyslog/rsyslog/pull/4532

--- rsyslog-8.2002.0/tools/omfwd.c	2021-01-13 16:00:10.455345657 +0000
+++ rsyslog-8.2002.0/tools/omfwd.c	2021-01-13 15:59:17.830358429 +0000
@@ -99,6 +99,7 @@ typedef struct _instanceData {
 	int iKeepAliveIntvl;
 	int iKeepAliveProbes;
 	int iKeepAliveTime;
+ 	int iConErrSkip;    /* skipping excessive connection errors */
 	uchar *gnutlsPriorityString;
 	int ipfreebind;
 
@@ -151,6 +152,7 @@ typedef struct configSettings_s {
 	int iKeepAliveIntvl;
 	int iKeepAliveProbes;
 	int iKeepAliveTime;
+ 	int iConErrSkip;
 	uchar *gnutlsPriorityString;
 	permittedPeers_t *pPermPeers;
 } configSettings_t;
@@ -187,6 +189,7 @@ static struct cnfparamdescr actpdescr[]
 	{ "keepalive.probes", eCmdHdlrPositiveInt, 0 },
 	{ "keepalive.time", eCmdHdlrPositiveInt, 0 },
 	{ "keepalive.interval", eCmdHdlrPositiveInt, 0 },
+	{ "conerrskip", eCmdHdlrPositiveInt, 0 },
 	{ "gnutlsprioritystring", eCmdHdlrString, 0 },
 	{ "streamdriver", eCmdHdlrGetWord, 0 },
 	{ "streamdrivermode", eCmdHdlrInt, 0 },
@@ -571,9 +574,29 @@ TCPSendBufUncompressed(wrkrInstanceData_
 
 finalize_it:
 	if(iRet != RS_RET_OK) {
-		/* error! */
-		LogError(0, iRet, "omfwd: TCPSendBuf error %d, destruct TCP Connection to %s:%s",
-			iRet, pWrkrData->pData->target, pWrkrData->pData->port);
+		if(iRet == RS_RET_IO_ERROR) {
+			static unsigned int conErrCnt = 0;
+			const int skipFactor = pWrkrData->pData->iConErrSkip;
+			if (skipFactor <= 1)  {
+				/* All the connection errors are printed. */
+				LogError(0, iRet, "omfwd: remote server at %s:%s seems to have closed connection. "
+					"This often happens when the remote peer (or an interim system like a load balancer or firewall) "
+					"shuts down or aborts a connection. Rsyslog will re-open the connection if configured "
+					"to do so (we saw a generic IO Error, which usually goes along with that behaviour).",
+					pWrkrData->pData->target, pWrkrData->pData->port);
+			} else if ((conErrCnt++ % skipFactor) == 0) {
+				/* Every N'th error message is printed where N is a skipFactor. */
+				LogError(0, iRet, "omfwd: remote server at %s:%s seems to have closed connection. "
+					"This often happens when the remote peer (or an interim system like a load balancer or firewall) "
+					"shuts down or aborts a connection. Rsyslog will re-open the connection if configured "
+					"to do so (we saw a generic IO Error, which usually goes along with that behaviour). "
+					"Note that the next %d connection error messages will be skipped.",
+					pWrkrData->pData->target, pWrkrData->pData->port, skipFactor-1);
+			}
+		} else {
+			LogError(0, iRet, "omfwd: TCPSendBuf error %d, destruct TCP Connection to %s:%s",
+				iRet, pWrkrData->pData->target, pWrkrData->pData->port);
+		}
 		DestructTCPInstanceData(pWrkrData);
 		iRet = RS_RET_SUSPENDED;
 	}
@@ -1137,6 +1160,7 @@ setInstParamDefaults(instanceData *pData
 	pData->iKeepAliveProbes = 0;
 	pData->iKeepAliveIntvl = 0;
 	pData->iKeepAliveTime = 0;
+ 	pData->iConErrSkip = 0;
 	pData->gnutlsPriorityString = NULL;
 	pData->bResendLastOnRecon = 0;
 	pData->bSendToAll = -1;  /* unspecified */
@@ -1227,6 +1251,8 @@ CODESTARTnewActInst
 			pData->iKeepAliveIntvl = (int) pvals[i].val.d.n;
 		} else if(!strcmp(actpblk.descr[i].name, "keepalive.time")) {
 			pData->iKeepAliveTime = (int) pvals[i].val.d.n;
+		} else if(!strcmp(actpblk.descr[i].name, "conerrskip")) {
+			pData->iConErrSkip = (int) pvals[i].val.d.n;
 		} else if(!strcmp(actpblk.descr[i].name, "gnutlsprioritystring")) {
 			pData->gnutlsPriorityString = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);
 		} else if(!strcmp(actpblk.descr[i].name, "streamdriver")) {
@@ -1517,6 +1543,7 @@ CODE_STD_STRING_REQUESTparseSelectorAct(
 	pData->iKeepAliveProbes = cs.iKeepAliveProbes;
 	pData->iKeepAliveIntvl = cs.iKeepAliveIntvl;
 	pData->iKeepAliveTime = cs.iKeepAliveTime;
+ 	pData->iConErrSkip = cs.iConErrSkip;
 
 	/* process template */
 	CHKiRet(cflineParseTemplateName(&p, *ppOMSR, 0, OMSR_NO_RQD_TPL_OPTS, getDfltTpl()));
@@ -1586,6 +1613,7 @@ static rsRetVal resetConfigVariables(uch
 	cs.iKeepAliveProbes = 0;
 	cs.iKeepAliveIntvl = 0;
 	cs.iKeepAliveTime = 0;
+ 	cs.iConErrSkip = 0;
 
 	return RS_RET_OK;
 }
